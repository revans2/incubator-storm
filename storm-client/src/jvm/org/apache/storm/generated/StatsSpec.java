/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.storm.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class StatsSpec implements org.apache.thrift.TBase<StatsSpec, StatsSpec._Fields>, java.io.Serializable, Cloneable, Comparable<StatsSpec> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StatsSpec");

  private static final org.apache.thrift.protocol.TField OP_FIELD_DESC = new org.apache.thrift.protocol.TField("op", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField WINDOWS_FIELD_DESC = new org.apache.thrift.protocol.TField("windows", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField TOPOLOGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("topology_id", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField COMPONENT_FIELD_DESC = new org.apache.thrift.protocol.TField("component", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField EXECUTOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("executor_id", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField METRICS_FIELD_DESC = new org.apache.thrift.protocol.TField("metrics", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField START_TIME_SEC_FIELD_DESC = new org.apache.thrift.protocol.TField("start_time_sec", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField END_TIME_SEC_FIELD_DESC = new org.apache.thrift.protocol.TField("end_time_sec", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField MIN_AGG_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("min_agg_level", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StatsSpecStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StatsSpecTupleSchemeFactory());
  }

  private StatsStoreOperation op; // optional
  private List<Window> windows; // optional
  private String topology_id; // optional
  private String component; // optional
  private String executor_id; // optional
  private List<String> metrics; // optional
  private long start_time_sec; // optional
  private long end_time_sec; // optional
  private AggLevel min_agg_level; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see StatsStoreOperation
     */
    OP((short)1, "op"),
    WINDOWS((short)2, "windows"),
    TOPOLOGY_ID((short)3, "topology_id"),
    COMPONENT((short)4, "component"),
    EXECUTOR_ID((short)5, "executor_id"),
    METRICS((short)6, "metrics"),
    START_TIME_SEC((short)7, "start_time_sec"),
    END_TIME_SEC((short)8, "end_time_sec"),
    /**
     * 
     * @see AggLevel
     */
    MIN_AGG_LEVEL((short)9, "min_agg_level");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OP
          return OP;
        case 2: // WINDOWS
          return WINDOWS;
        case 3: // TOPOLOGY_ID
          return TOPOLOGY_ID;
        case 4: // COMPONENT
          return COMPONENT;
        case 5: // EXECUTOR_ID
          return EXECUTOR_ID;
        case 6: // METRICS
          return METRICS;
        case 7: // START_TIME_SEC
          return START_TIME_SEC;
        case 8: // END_TIME_SEC
          return END_TIME_SEC;
        case 9: // MIN_AGG_LEVEL
          return MIN_AGG_LEVEL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __START_TIME_SEC_ISSET_ID = 0;
  private static final int __END_TIME_SEC_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.OP,_Fields.WINDOWS,_Fields.TOPOLOGY_ID,_Fields.COMPONENT,_Fields.EXECUTOR_ID,_Fields.METRICS,_Fields.START_TIME_SEC,_Fields.END_TIME_SEC,_Fields.MIN_AGG_LEVEL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OP, new org.apache.thrift.meta_data.FieldMetaData("op", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, StatsStoreOperation.class)));
    tmpMap.put(_Fields.WINDOWS, new org.apache.thrift.meta_data.FieldMetaData("windows", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Window.class))));
    tmpMap.put(_Fields.TOPOLOGY_ID, new org.apache.thrift.meta_data.FieldMetaData("topology_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPONENT, new org.apache.thrift.meta_data.FieldMetaData("component", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXECUTOR_ID, new org.apache.thrift.meta_data.FieldMetaData("executor_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.METRICS, new org.apache.thrift.meta_data.FieldMetaData("metrics", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.START_TIME_SEC, new org.apache.thrift.meta_data.FieldMetaData("start_time_sec", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.END_TIME_SEC, new org.apache.thrift.meta_data.FieldMetaData("end_time_sec", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MIN_AGG_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("min_agg_level", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, AggLevel.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StatsSpec.class, metaDataMap);
  }

  public StatsSpec() {
    this.op = org.apache.storm.generated.StatsStoreOperation.SUM;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StatsSpec(StatsSpec other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.is_set_op()) {
      this.op = other.op;
    }
    if (other.is_set_windows()) {
      List<Window> __this__windows = new ArrayList<Window>(other.windows.size());
      for (Window other_element : other.windows) {
        __this__windows.add(other_element);
      }
      this.windows = __this__windows;
    }
    if (other.is_set_topology_id()) {
      this.topology_id = other.topology_id;
    }
    if (other.is_set_component()) {
      this.component = other.component;
    }
    if (other.is_set_executor_id()) {
      this.executor_id = other.executor_id;
    }
    if (other.is_set_metrics()) {
      List<String> __this__metrics = new ArrayList<String>(other.metrics);
      this.metrics = __this__metrics;
    }
    this.start_time_sec = other.start_time_sec;
    this.end_time_sec = other.end_time_sec;
    if (other.is_set_min_agg_level()) {
      this.min_agg_level = other.min_agg_level;
    }
  }

  public StatsSpec deepCopy() {
    return new StatsSpec(this);
  }

  @Override
  public void clear() {
    this.op = org.apache.storm.generated.StatsStoreOperation.SUM;

    this.windows = null;
    this.topology_id = null;
    this.component = null;
    this.executor_id = null;
    this.metrics = null;
    set_start_time_sec_isSet(false);
    this.start_time_sec = 0;
    set_end_time_sec_isSet(false);
    this.end_time_sec = 0;
    this.min_agg_level = null;
  }

  /**
   * 
   * @see StatsStoreOperation
   */
  public StatsStoreOperation get_op() {
    return this.op;
  }

  /**
   * 
   * @see StatsStoreOperation
   */
  public void set_op(StatsStoreOperation op) {
    this.op = op;
  }

  public void unset_op() {
    this.op = null;
  }

  /** Returns true if field op is set (has been assigned a value) and false otherwise */
  public boolean is_set_op() {
    return this.op != null;
  }

  public void set_op_isSet(boolean value) {
    if (!value) {
      this.op = null;
    }
  }

  public int get_windows_size() {
    return (this.windows == null) ? 0 : this.windows.size();
  }

  public java.util.Iterator<Window> get_windows_iterator() {
    return (this.windows == null) ? null : this.windows.iterator();
  }

  public void add_to_windows(Window elem) {
    if (this.windows == null) {
      this.windows = new ArrayList<Window>();
    }
    this.windows.add(elem);
  }

  public List<Window> get_windows() {
    return this.windows;
  }

  public void set_windows(List<Window> windows) {
    this.windows = windows;
  }

  public void unset_windows() {
    this.windows = null;
  }

  /** Returns true if field windows is set (has been assigned a value) and false otherwise */
  public boolean is_set_windows() {
    return this.windows != null;
  }

  public void set_windows_isSet(boolean value) {
    if (!value) {
      this.windows = null;
    }
  }

  public String get_topology_id() {
    return this.topology_id;
  }

  public void set_topology_id(String topology_id) {
    this.topology_id = topology_id;
  }

  public void unset_topology_id() {
    this.topology_id = null;
  }

  /** Returns true if field topology_id is set (has been assigned a value) and false otherwise */
  public boolean is_set_topology_id() {
    return this.topology_id != null;
  }

  public void set_topology_id_isSet(boolean value) {
    if (!value) {
      this.topology_id = null;
    }
  }

  public String get_component() {
    return this.component;
  }

  public void set_component(String component) {
    this.component = component;
  }

  public void unset_component() {
    this.component = null;
  }

  /** Returns true if field component is set (has been assigned a value) and false otherwise */
  public boolean is_set_component() {
    return this.component != null;
  }

  public void set_component_isSet(boolean value) {
    if (!value) {
      this.component = null;
    }
  }

  public String get_executor_id() {
    return this.executor_id;
  }

  public void set_executor_id(String executor_id) {
    this.executor_id = executor_id;
  }

  public void unset_executor_id() {
    this.executor_id = null;
  }

  /** Returns true if field executor_id is set (has been assigned a value) and false otherwise */
  public boolean is_set_executor_id() {
    return this.executor_id != null;
  }

  public void set_executor_id_isSet(boolean value) {
    if (!value) {
      this.executor_id = null;
    }
  }

  public int get_metrics_size() {
    return (this.metrics == null) ? 0 : this.metrics.size();
  }

  public java.util.Iterator<String> get_metrics_iterator() {
    return (this.metrics == null) ? null : this.metrics.iterator();
  }

  public void add_to_metrics(String elem) {
    if (this.metrics == null) {
      this.metrics = new ArrayList<String>();
    }
    this.metrics.add(elem);
  }

  public List<String> get_metrics() {
    return this.metrics;
  }

  public void set_metrics(List<String> metrics) {
    this.metrics = metrics;
  }

  public void unset_metrics() {
    this.metrics = null;
  }

  /** Returns true if field metrics is set (has been assigned a value) and false otherwise */
  public boolean is_set_metrics() {
    return this.metrics != null;
  }

  public void set_metrics_isSet(boolean value) {
    if (!value) {
      this.metrics = null;
    }
  }

  public long get_start_time_sec() {
    return this.start_time_sec;
  }

  public void set_start_time_sec(long start_time_sec) {
    this.start_time_sec = start_time_sec;
    set_start_time_sec_isSet(true);
  }

  public void unset_start_time_sec() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_TIME_SEC_ISSET_ID);
  }

  /** Returns true if field start_time_sec is set (has been assigned a value) and false otherwise */
  public boolean is_set_start_time_sec() {
    return EncodingUtils.testBit(__isset_bitfield, __START_TIME_SEC_ISSET_ID);
  }

  public void set_start_time_sec_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_TIME_SEC_ISSET_ID, value);
  }

  public long get_end_time_sec() {
    return this.end_time_sec;
  }

  public void set_end_time_sec(long end_time_sec) {
    this.end_time_sec = end_time_sec;
    set_end_time_sec_isSet(true);
  }

  public void unset_end_time_sec() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __END_TIME_SEC_ISSET_ID);
  }

  /** Returns true if field end_time_sec is set (has been assigned a value) and false otherwise */
  public boolean is_set_end_time_sec() {
    return EncodingUtils.testBit(__isset_bitfield, __END_TIME_SEC_ISSET_ID);
  }

  public void set_end_time_sec_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __END_TIME_SEC_ISSET_ID, value);
  }

  /**
   * 
   * @see AggLevel
   */
  public AggLevel get_min_agg_level() {
    return this.min_agg_level;
  }

  /**
   * 
   * @see AggLevel
   */
  public void set_min_agg_level(AggLevel min_agg_level) {
    this.min_agg_level = min_agg_level;
  }

  public void unset_min_agg_level() {
    this.min_agg_level = null;
  }

  /** Returns true if field min_agg_level is set (has been assigned a value) and false otherwise */
  public boolean is_set_min_agg_level() {
    return this.min_agg_level != null;
  }

  public void set_min_agg_level_isSet(boolean value) {
    if (!value) {
      this.min_agg_level = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OP:
      if (value == null) {
        unset_op();
      } else {
        set_op((StatsStoreOperation)value);
      }
      break;

    case WINDOWS:
      if (value == null) {
        unset_windows();
      } else {
        set_windows((List<Window>)value);
      }
      break;

    case TOPOLOGY_ID:
      if (value == null) {
        unset_topology_id();
      } else {
        set_topology_id((String)value);
      }
      break;

    case COMPONENT:
      if (value == null) {
        unset_component();
      } else {
        set_component((String)value);
      }
      break;

    case EXECUTOR_ID:
      if (value == null) {
        unset_executor_id();
      } else {
        set_executor_id((String)value);
      }
      break;

    case METRICS:
      if (value == null) {
        unset_metrics();
      } else {
        set_metrics((List<String>)value);
      }
      break;

    case START_TIME_SEC:
      if (value == null) {
        unset_start_time_sec();
      } else {
        set_start_time_sec((Long)value);
      }
      break;

    case END_TIME_SEC:
      if (value == null) {
        unset_end_time_sec();
      } else {
        set_end_time_sec((Long)value);
      }
      break;

    case MIN_AGG_LEVEL:
      if (value == null) {
        unset_min_agg_level();
      } else {
        set_min_agg_level((AggLevel)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OP:
      return get_op();

    case WINDOWS:
      return get_windows();

    case TOPOLOGY_ID:
      return get_topology_id();

    case COMPONENT:
      return get_component();

    case EXECUTOR_ID:
      return get_executor_id();

    case METRICS:
      return get_metrics();

    case START_TIME_SEC:
      return get_start_time_sec();

    case END_TIME_SEC:
      return get_end_time_sec();

    case MIN_AGG_LEVEL:
      return get_min_agg_level();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OP:
      return is_set_op();
    case WINDOWS:
      return is_set_windows();
    case TOPOLOGY_ID:
      return is_set_topology_id();
    case COMPONENT:
      return is_set_component();
    case EXECUTOR_ID:
      return is_set_executor_id();
    case METRICS:
      return is_set_metrics();
    case START_TIME_SEC:
      return is_set_start_time_sec();
    case END_TIME_SEC:
      return is_set_end_time_sec();
    case MIN_AGG_LEVEL:
      return is_set_min_agg_level();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StatsSpec)
      return this.equals((StatsSpec)that);
    return false;
  }

  public boolean equals(StatsSpec that) {
    if (that == null)
      return false;

    boolean this_present_op = true && this.is_set_op();
    boolean that_present_op = true && that.is_set_op();
    if (this_present_op || that_present_op) {
      if (!(this_present_op && that_present_op))
        return false;
      if (!this.op.equals(that.op))
        return false;
    }

    boolean this_present_windows = true && this.is_set_windows();
    boolean that_present_windows = true && that.is_set_windows();
    if (this_present_windows || that_present_windows) {
      if (!(this_present_windows && that_present_windows))
        return false;
      if (!this.windows.equals(that.windows))
        return false;
    }

    boolean this_present_topology_id = true && this.is_set_topology_id();
    boolean that_present_topology_id = true && that.is_set_topology_id();
    if (this_present_topology_id || that_present_topology_id) {
      if (!(this_present_topology_id && that_present_topology_id))
        return false;
      if (!this.topology_id.equals(that.topology_id))
        return false;
    }

    boolean this_present_component = true && this.is_set_component();
    boolean that_present_component = true && that.is_set_component();
    if (this_present_component || that_present_component) {
      if (!(this_present_component && that_present_component))
        return false;
      if (!this.component.equals(that.component))
        return false;
    }

    boolean this_present_executor_id = true && this.is_set_executor_id();
    boolean that_present_executor_id = true && that.is_set_executor_id();
    if (this_present_executor_id || that_present_executor_id) {
      if (!(this_present_executor_id && that_present_executor_id))
        return false;
      if (!this.executor_id.equals(that.executor_id))
        return false;
    }

    boolean this_present_metrics = true && this.is_set_metrics();
    boolean that_present_metrics = true && that.is_set_metrics();
    if (this_present_metrics || that_present_metrics) {
      if (!(this_present_metrics && that_present_metrics))
        return false;
      if (!this.metrics.equals(that.metrics))
        return false;
    }

    boolean this_present_start_time_sec = true && this.is_set_start_time_sec();
    boolean that_present_start_time_sec = true && that.is_set_start_time_sec();
    if (this_present_start_time_sec || that_present_start_time_sec) {
      if (!(this_present_start_time_sec && that_present_start_time_sec))
        return false;
      if (this.start_time_sec != that.start_time_sec)
        return false;
    }

    boolean this_present_end_time_sec = true && this.is_set_end_time_sec();
    boolean that_present_end_time_sec = true && that.is_set_end_time_sec();
    if (this_present_end_time_sec || that_present_end_time_sec) {
      if (!(this_present_end_time_sec && that_present_end_time_sec))
        return false;
      if (this.end_time_sec != that.end_time_sec)
        return false;
    }

    boolean this_present_min_agg_level = true && this.is_set_min_agg_level();
    boolean that_present_min_agg_level = true && that.is_set_min_agg_level();
    if (this_present_min_agg_level || that_present_min_agg_level) {
      if (!(this_present_min_agg_level && that_present_min_agg_level))
        return false;
      if (!this.min_agg_level.equals(that.min_agg_level))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_op = true && (is_set_op());
    list.add(present_op);
    if (present_op)
      list.add(op.getValue());

    boolean present_windows = true && (is_set_windows());
    list.add(present_windows);
    if (present_windows)
      list.add(windows);

    boolean present_topology_id = true && (is_set_topology_id());
    list.add(present_topology_id);
    if (present_topology_id)
      list.add(topology_id);

    boolean present_component = true && (is_set_component());
    list.add(present_component);
    if (present_component)
      list.add(component);

    boolean present_executor_id = true && (is_set_executor_id());
    list.add(present_executor_id);
    if (present_executor_id)
      list.add(executor_id);

    boolean present_metrics = true && (is_set_metrics());
    list.add(present_metrics);
    if (present_metrics)
      list.add(metrics);

    boolean present_start_time_sec = true && (is_set_start_time_sec());
    list.add(present_start_time_sec);
    if (present_start_time_sec)
      list.add(start_time_sec);

    boolean present_end_time_sec = true && (is_set_end_time_sec());
    list.add(present_end_time_sec);
    if (present_end_time_sec)
      list.add(end_time_sec);

    boolean present_min_agg_level = true && (is_set_min_agg_level());
    list.add(present_min_agg_level);
    if (present_min_agg_level)
      list.add(min_agg_level.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(StatsSpec other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_op()).compareTo(other.is_set_op());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_op()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.op, other.op);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_windows()).compareTo(other.is_set_windows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_windows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.windows, other.windows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_topology_id()).compareTo(other.is_set_topology_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_topology_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topology_id, other.topology_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_component()).compareTo(other.is_set_component());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_component()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.component, other.component);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_executor_id()).compareTo(other.is_set_executor_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_executor_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executor_id, other.executor_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_metrics()).compareTo(other.is_set_metrics());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_metrics()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metrics, other.metrics);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_start_time_sec()).compareTo(other.is_set_start_time_sec());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_start_time_sec()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_time_sec, other.start_time_sec);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_end_time_sec()).compareTo(other.is_set_end_time_sec());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_end_time_sec()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_time_sec, other.end_time_sec);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_min_agg_level()).compareTo(other.is_set_min_agg_level());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_min_agg_level()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min_agg_level, other.min_agg_level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StatsSpec(");
    boolean first = true;

    if (is_set_op()) {
      sb.append("op:");
      if (this.op == null) {
        sb.append("null");
      } else {
        sb.append(this.op);
      }
      first = false;
    }
    if (is_set_windows()) {
      if (!first) sb.append(", ");
      sb.append("windows:");
      if (this.windows == null) {
        sb.append("null");
      } else {
        sb.append(this.windows);
      }
      first = false;
    }
    if (is_set_topology_id()) {
      if (!first) sb.append(", ");
      sb.append("topology_id:");
      if (this.topology_id == null) {
        sb.append("null");
      } else {
        sb.append(this.topology_id);
      }
      first = false;
    }
    if (is_set_component()) {
      if (!first) sb.append(", ");
      sb.append("component:");
      if (this.component == null) {
        sb.append("null");
      } else {
        sb.append(this.component);
      }
      first = false;
    }
    if (is_set_executor_id()) {
      if (!first) sb.append(", ");
      sb.append("executor_id:");
      if (this.executor_id == null) {
        sb.append("null");
      } else {
        sb.append(this.executor_id);
      }
      first = false;
    }
    if (is_set_metrics()) {
      if (!first) sb.append(", ");
      sb.append("metrics:");
      if (this.metrics == null) {
        sb.append("null");
      } else {
        sb.append(this.metrics);
      }
      first = false;
    }
    if (is_set_start_time_sec()) {
      if (!first) sb.append(", ");
      sb.append("start_time_sec:");
      sb.append(this.start_time_sec);
      first = false;
    }
    if (is_set_end_time_sec()) {
      if (!first) sb.append(", ");
      sb.append("end_time_sec:");
      sb.append(this.end_time_sec);
      first = false;
    }
    if (is_set_min_agg_level()) {
      if (!first) sb.append(", ");
      sb.append("min_agg_level:");
      if (this.min_agg_level == null) {
        sb.append("null");
      } else {
        sb.append(this.min_agg_level);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StatsSpecStandardSchemeFactory implements SchemeFactory {
    public StatsSpecStandardScheme getScheme() {
      return new StatsSpecStandardScheme();
    }
  }

  private static class StatsSpecStandardScheme extends StandardScheme<StatsSpec> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StatsSpec struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.op = org.apache.storm.generated.StatsStoreOperation.findByValue(iprot.readI32());
              struct.set_op_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WINDOWS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list908 = iprot.readListBegin();
                struct.windows = new ArrayList<Window>(_list908.size);
                Window _elem909;
                for (int _i910 = 0; _i910 < _list908.size; ++_i910)
                {
                  _elem909 = org.apache.storm.generated.Window.findByValue(iprot.readI32());
                  struct.windows.add(_elem909);
                }
                iprot.readListEnd();
              }
              struct.set_windows_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOPOLOGY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.topology_id = iprot.readString();
              struct.set_topology_id_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMPONENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.component = iprot.readString();
              struct.set_component_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXECUTOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.executor_id = iprot.readString();
              struct.set_executor_id_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // METRICS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list911 = iprot.readListBegin();
                struct.metrics = new ArrayList<String>(_list911.size);
                String _elem912;
                for (int _i913 = 0; _i913 < _list911.size; ++_i913)
                {
                  _elem912 = iprot.readString();
                  struct.metrics.add(_elem912);
                }
                iprot.readListEnd();
              }
              struct.set_metrics_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // START_TIME_SEC
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.start_time_sec = iprot.readI64();
              struct.set_start_time_sec_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // END_TIME_SEC
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.end_time_sec = iprot.readI64();
              struct.set_end_time_sec_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MIN_AGG_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.min_agg_level = org.apache.storm.generated.AggLevel.findByValue(iprot.readI32());
              struct.set_min_agg_level_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StatsSpec struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.op != null) {
        if (struct.is_set_op()) {
          oprot.writeFieldBegin(OP_FIELD_DESC);
          oprot.writeI32(struct.op.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.windows != null) {
        if (struct.is_set_windows()) {
          oprot.writeFieldBegin(WINDOWS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.windows.size()));
            for (Window _iter914 : struct.windows)
            {
              oprot.writeI32(_iter914.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.topology_id != null) {
        if (struct.is_set_topology_id()) {
          oprot.writeFieldBegin(TOPOLOGY_ID_FIELD_DESC);
          oprot.writeString(struct.topology_id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.component != null) {
        if (struct.is_set_component()) {
          oprot.writeFieldBegin(COMPONENT_FIELD_DESC);
          oprot.writeString(struct.component);
          oprot.writeFieldEnd();
        }
      }
      if (struct.executor_id != null) {
        if (struct.is_set_executor_id()) {
          oprot.writeFieldBegin(EXECUTOR_ID_FIELD_DESC);
          oprot.writeString(struct.executor_id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.metrics != null) {
        if (struct.is_set_metrics()) {
          oprot.writeFieldBegin(METRICS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.metrics.size()));
            for (String _iter915 : struct.metrics)
            {
              oprot.writeString(_iter915);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.is_set_start_time_sec()) {
        oprot.writeFieldBegin(START_TIME_SEC_FIELD_DESC);
        oprot.writeI64(struct.start_time_sec);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_end_time_sec()) {
        oprot.writeFieldBegin(END_TIME_SEC_FIELD_DESC);
        oprot.writeI64(struct.end_time_sec);
        oprot.writeFieldEnd();
      }
      if (struct.min_agg_level != null) {
        if (struct.is_set_min_agg_level()) {
          oprot.writeFieldBegin(MIN_AGG_LEVEL_FIELD_DESC);
          oprot.writeI32(struct.min_agg_level.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StatsSpecTupleSchemeFactory implements SchemeFactory {
    public StatsSpecTupleScheme getScheme() {
      return new StatsSpecTupleScheme();
    }
  }

  private static class StatsSpecTupleScheme extends TupleScheme<StatsSpec> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StatsSpec struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.is_set_op()) {
        optionals.set(0);
      }
      if (struct.is_set_windows()) {
        optionals.set(1);
      }
      if (struct.is_set_topology_id()) {
        optionals.set(2);
      }
      if (struct.is_set_component()) {
        optionals.set(3);
      }
      if (struct.is_set_executor_id()) {
        optionals.set(4);
      }
      if (struct.is_set_metrics()) {
        optionals.set(5);
      }
      if (struct.is_set_start_time_sec()) {
        optionals.set(6);
      }
      if (struct.is_set_end_time_sec()) {
        optionals.set(7);
      }
      if (struct.is_set_min_agg_level()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.is_set_op()) {
        oprot.writeI32(struct.op.getValue());
      }
      if (struct.is_set_windows()) {
        {
          oprot.writeI32(struct.windows.size());
          for (Window _iter916 : struct.windows)
          {
            oprot.writeI32(_iter916.getValue());
          }
        }
      }
      if (struct.is_set_topology_id()) {
        oprot.writeString(struct.topology_id);
      }
      if (struct.is_set_component()) {
        oprot.writeString(struct.component);
      }
      if (struct.is_set_executor_id()) {
        oprot.writeString(struct.executor_id);
      }
      if (struct.is_set_metrics()) {
        {
          oprot.writeI32(struct.metrics.size());
          for (String _iter917 : struct.metrics)
          {
            oprot.writeString(_iter917);
          }
        }
      }
      if (struct.is_set_start_time_sec()) {
        oprot.writeI64(struct.start_time_sec);
      }
      if (struct.is_set_end_time_sec()) {
        oprot.writeI64(struct.end_time_sec);
      }
      if (struct.is_set_min_agg_level()) {
        oprot.writeI32(struct.min_agg_level.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StatsSpec struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.op = org.apache.storm.generated.StatsStoreOperation.findByValue(iprot.readI32());
        struct.set_op_isSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list918 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.windows = new ArrayList<Window>(_list918.size);
          Window _elem919;
          for (int _i920 = 0; _i920 < _list918.size; ++_i920)
          {
            _elem919 = org.apache.storm.generated.Window.findByValue(iprot.readI32());
            struct.windows.add(_elem919);
          }
        }
        struct.set_windows_isSet(true);
      }
      if (incoming.get(2)) {
        struct.topology_id = iprot.readString();
        struct.set_topology_id_isSet(true);
      }
      if (incoming.get(3)) {
        struct.component = iprot.readString();
        struct.set_component_isSet(true);
      }
      if (incoming.get(4)) {
        struct.executor_id = iprot.readString();
        struct.set_executor_id_isSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list921 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.metrics = new ArrayList<String>(_list921.size);
          String _elem922;
          for (int _i923 = 0; _i923 < _list921.size; ++_i923)
          {
            _elem922 = iprot.readString();
            struct.metrics.add(_elem922);
          }
        }
        struct.set_metrics_isSet(true);
      }
      if (incoming.get(6)) {
        struct.start_time_sec = iprot.readI64();
        struct.set_start_time_sec_isSet(true);
      }
      if (incoming.get(7)) {
        struct.end_time_sec = iprot.readI64();
        struct.set_end_time_sec_isSet(true);
      }
      if (incoming.get(8)) {
        struct.min_agg_level = org.apache.storm.generated.AggLevel.findByValue(iprot.readI32());
        struct.set_min_agg_level_isSet(true);
      }
    }
  }

}

