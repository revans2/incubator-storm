/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.storm.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class StatsMetadata implements org.apache.thrift.TBase<StatsMetadata, StatsMetadata._Fields>, java.io.Serializable, Cloneable, Comparable<StatsMetadata> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StatsMetadata");

  private static final org.apache.thrift.protocol.TField COMP_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("comp_ids", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField METRIC_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("metric_ids", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField EXECUTOR_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("executor_ids", org.apache.thrift.protocol.TType.MAP, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StatsMetadataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StatsMetadataTupleSchemeFactory());
  }

  private Map<String,Integer> comp_ids; // optional
  private Map<String,Integer> metric_ids; // optional
  private Map<String,Integer> executor_ids; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMP_IDS((short)1, "comp_ids"),
    METRIC_IDS((short)2, "metric_ids"),
    EXECUTOR_IDS((short)5, "executor_ids");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMP_IDS
          return COMP_IDS;
        case 2: // METRIC_IDS
          return METRIC_IDS;
        case 5: // EXECUTOR_IDS
          return EXECUTOR_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.COMP_IDS,_Fields.METRIC_IDS,_Fields.EXECUTOR_IDS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMP_IDS, new org.apache.thrift.meta_data.FieldMetaData("comp_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.METRIC_IDS, new org.apache.thrift.meta_data.FieldMetaData("metric_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.EXECUTOR_IDS, new org.apache.thrift.meta_data.FieldMetaData("executor_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StatsMetadata.class, metaDataMap);
  }

  public StatsMetadata() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StatsMetadata(StatsMetadata other) {
    if (other.is_set_comp_ids()) {
      Map<String,Integer> __this__comp_ids = new HashMap<String,Integer>(other.comp_ids);
      this.comp_ids = __this__comp_ids;
    }
    if (other.is_set_metric_ids()) {
      Map<String,Integer> __this__metric_ids = new HashMap<String,Integer>(other.metric_ids);
      this.metric_ids = __this__metric_ids;
    }
    if (other.is_set_executor_ids()) {
      Map<String,Integer> __this__executor_ids = new HashMap<String,Integer>(other.executor_ids);
      this.executor_ids = __this__executor_ids;
    }
  }

  public StatsMetadata deepCopy() {
    return new StatsMetadata(this);
  }

  @Override
  public void clear() {
    this.comp_ids = null;
    this.metric_ids = null;
    this.executor_ids = null;
  }

  public int get_comp_ids_size() {
    return (this.comp_ids == null) ? 0 : this.comp_ids.size();
  }

  public void put_to_comp_ids(String key, int val) {
    if (this.comp_ids == null) {
      this.comp_ids = new HashMap<String,Integer>();
    }
    this.comp_ids.put(key, val);
  }

  public Map<String,Integer> get_comp_ids() {
    return this.comp_ids;
  }

  public void set_comp_ids(Map<String,Integer> comp_ids) {
    this.comp_ids = comp_ids;
  }

  public void unset_comp_ids() {
    this.comp_ids = null;
  }

  /** Returns true if field comp_ids is set (has been assigned a value) and false otherwise */
  public boolean is_set_comp_ids() {
    return this.comp_ids != null;
  }

  public void set_comp_ids_isSet(boolean value) {
    if (!value) {
      this.comp_ids = null;
    }
  }

  public int get_metric_ids_size() {
    return (this.metric_ids == null) ? 0 : this.metric_ids.size();
  }

  public void put_to_metric_ids(String key, int val) {
    if (this.metric_ids == null) {
      this.metric_ids = new HashMap<String,Integer>();
    }
    this.metric_ids.put(key, val);
  }

  public Map<String,Integer> get_metric_ids() {
    return this.metric_ids;
  }

  public void set_metric_ids(Map<String,Integer> metric_ids) {
    this.metric_ids = metric_ids;
  }

  public void unset_metric_ids() {
    this.metric_ids = null;
  }

  /** Returns true if field metric_ids is set (has been assigned a value) and false otherwise */
  public boolean is_set_metric_ids() {
    return this.metric_ids != null;
  }

  public void set_metric_ids_isSet(boolean value) {
    if (!value) {
      this.metric_ids = null;
    }
  }

  public int get_executor_ids_size() {
    return (this.executor_ids == null) ? 0 : this.executor_ids.size();
  }

  public void put_to_executor_ids(String key, int val) {
    if (this.executor_ids == null) {
      this.executor_ids = new HashMap<String,Integer>();
    }
    this.executor_ids.put(key, val);
  }

  public Map<String,Integer> get_executor_ids() {
    return this.executor_ids;
  }

  public void set_executor_ids(Map<String,Integer> executor_ids) {
    this.executor_ids = executor_ids;
  }

  public void unset_executor_ids() {
    this.executor_ids = null;
  }

  /** Returns true if field executor_ids is set (has been assigned a value) and false otherwise */
  public boolean is_set_executor_ids() {
    return this.executor_ids != null;
  }

  public void set_executor_ids_isSet(boolean value) {
    if (!value) {
      this.executor_ids = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMP_IDS:
      if (value == null) {
        unset_comp_ids();
      } else {
        set_comp_ids((Map<String,Integer>)value);
      }
      break;

    case METRIC_IDS:
      if (value == null) {
        unset_metric_ids();
      } else {
        set_metric_ids((Map<String,Integer>)value);
      }
      break;

    case EXECUTOR_IDS:
      if (value == null) {
        unset_executor_ids();
      } else {
        set_executor_ids((Map<String,Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMP_IDS:
      return get_comp_ids();

    case METRIC_IDS:
      return get_metric_ids();

    case EXECUTOR_IDS:
      return get_executor_ids();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMP_IDS:
      return is_set_comp_ids();
    case METRIC_IDS:
      return is_set_metric_ids();
    case EXECUTOR_IDS:
      return is_set_executor_ids();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StatsMetadata)
      return this.equals((StatsMetadata)that);
    return false;
  }

  public boolean equals(StatsMetadata that) {
    if (that == null)
      return false;

    boolean this_present_comp_ids = true && this.is_set_comp_ids();
    boolean that_present_comp_ids = true && that.is_set_comp_ids();
    if (this_present_comp_ids || that_present_comp_ids) {
      if (!(this_present_comp_ids && that_present_comp_ids))
        return false;
      if (!this.comp_ids.equals(that.comp_ids))
        return false;
    }

    boolean this_present_metric_ids = true && this.is_set_metric_ids();
    boolean that_present_metric_ids = true && that.is_set_metric_ids();
    if (this_present_metric_ids || that_present_metric_ids) {
      if (!(this_present_metric_ids && that_present_metric_ids))
        return false;
      if (!this.metric_ids.equals(that.metric_ids))
        return false;
    }

    boolean this_present_executor_ids = true && this.is_set_executor_ids();
    boolean that_present_executor_ids = true && that.is_set_executor_ids();
    if (this_present_executor_ids || that_present_executor_ids) {
      if (!(this_present_executor_ids && that_present_executor_ids))
        return false;
      if (!this.executor_ids.equals(that.executor_ids))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_comp_ids = true && (is_set_comp_ids());
    list.add(present_comp_ids);
    if (present_comp_ids)
      list.add(comp_ids);

    boolean present_metric_ids = true && (is_set_metric_ids());
    list.add(present_metric_ids);
    if (present_metric_ids)
      list.add(metric_ids);

    boolean present_executor_ids = true && (is_set_executor_ids());
    list.add(present_executor_ids);
    if (present_executor_ids)
      list.add(executor_ids);

    return list.hashCode();
  }

  @Override
  public int compareTo(StatsMetadata other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_comp_ids()).compareTo(other.is_set_comp_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_comp_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comp_ids, other.comp_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_metric_ids()).compareTo(other.is_set_metric_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_metric_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metric_ids, other.metric_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_executor_ids()).compareTo(other.is_set_executor_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_executor_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executor_ids, other.executor_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StatsMetadata(");
    boolean first = true;

    if (is_set_comp_ids()) {
      sb.append("comp_ids:");
      if (this.comp_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.comp_ids);
      }
      first = false;
    }
    if (is_set_metric_ids()) {
      if (!first) sb.append(", ");
      sb.append("metric_ids:");
      if (this.metric_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.metric_ids);
      }
      first = false;
    }
    if (is_set_executor_ids()) {
      if (!first) sb.append(", ");
      sb.append("executor_ids:");
      if (this.executor_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.executor_ids);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StatsMetadataStandardSchemeFactory implements SchemeFactory {
    public StatsMetadataStandardScheme getScheme() {
      return new StatsMetadataStandardScheme();
    }
  }

  private static class StatsMetadataStandardScheme extends StandardScheme<StatsMetadata> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StatsMetadata struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMP_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map1016 = iprot.readMapBegin();
                struct.comp_ids = new HashMap<String,Integer>(2*_map1016.size);
                String _key1017;
                int _val1018;
                for (int _i1019 = 0; _i1019 < _map1016.size; ++_i1019)
                {
                  _key1017 = iprot.readString();
                  _val1018 = iprot.readI32();
                  struct.comp_ids.put(_key1017, _val1018);
                }
                iprot.readMapEnd();
              }
              struct.set_comp_ids_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // METRIC_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map1020 = iprot.readMapBegin();
                struct.metric_ids = new HashMap<String,Integer>(2*_map1020.size);
                String _key1021;
                int _val1022;
                for (int _i1023 = 0; _i1023 < _map1020.size; ++_i1023)
                {
                  _key1021 = iprot.readString();
                  _val1022 = iprot.readI32();
                  struct.metric_ids.put(_key1021, _val1022);
                }
                iprot.readMapEnd();
              }
              struct.set_metric_ids_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXECUTOR_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map1024 = iprot.readMapBegin();
                struct.executor_ids = new HashMap<String,Integer>(2*_map1024.size);
                String _key1025;
                int _val1026;
                for (int _i1027 = 0; _i1027 < _map1024.size; ++_i1027)
                {
                  _key1025 = iprot.readString();
                  _val1026 = iprot.readI32();
                  struct.executor_ids.put(_key1025, _val1026);
                }
                iprot.readMapEnd();
              }
              struct.set_executor_ids_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StatsMetadata struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.comp_ids != null) {
        if (struct.is_set_comp_ids()) {
          oprot.writeFieldBegin(COMP_IDS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.comp_ids.size()));
            for (Map.Entry<String, Integer> _iter1028 : struct.comp_ids.entrySet())
            {
              oprot.writeString(_iter1028.getKey());
              oprot.writeI32(_iter1028.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.metric_ids != null) {
        if (struct.is_set_metric_ids()) {
          oprot.writeFieldBegin(METRIC_IDS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.metric_ids.size()));
            for (Map.Entry<String, Integer> _iter1029 : struct.metric_ids.entrySet())
            {
              oprot.writeString(_iter1029.getKey());
              oprot.writeI32(_iter1029.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.executor_ids != null) {
        if (struct.is_set_executor_ids()) {
          oprot.writeFieldBegin(EXECUTOR_IDS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.executor_ids.size()));
            for (Map.Entry<String, Integer> _iter1030 : struct.executor_ids.entrySet())
            {
              oprot.writeString(_iter1030.getKey());
              oprot.writeI32(_iter1030.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StatsMetadataTupleSchemeFactory implements SchemeFactory {
    public StatsMetadataTupleScheme getScheme() {
      return new StatsMetadataTupleScheme();
    }
  }

  private static class StatsMetadataTupleScheme extends TupleScheme<StatsMetadata> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StatsMetadata struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.is_set_comp_ids()) {
        optionals.set(0);
      }
      if (struct.is_set_metric_ids()) {
        optionals.set(1);
      }
      if (struct.is_set_executor_ids()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.is_set_comp_ids()) {
        {
          oprot.writeI32(struct.comp_ids.size());
          for (Map.Entry<String, Integer> _iter1031 : struct.comp_ids.entrySet())
          {
            oprot.writeString(_iter1031.getKey());
            oprot.writeI32(_iter1031.getValue());
          }
        }
      }
      if (struct.is_set_metric_ids()) {
        {
          oprot.writeI32(struct.metric_ids.size());
          for (Map.Entry<String, Integer> _iter1032 : struct.metric_ids.entrySet())
          {
            oprot.writeString(_iter1032.getKey());
            oprot.writeI32(_iter1032.getValue());
          }
        }
      }
      if (struct.is_set_executor_ids()) {
        {
          oprot.writeI32(struct.executor_ids.size());
          for (Map.Entry<String, Integer> _iter1033 : struct.executor_ids.entrySet())
          {
            oprot.writeString(_iter1033.getKey());
            oprot.writeI32(_iter1033.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StatsMetadata struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map1034 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.comp_ids = new HashMap<String,Integer>(2*_map1034.size);
          String _key1035;
          int _val1036;
          for (int _i1037 = 0; _i1037 < _map1034.size; ++_i1037)
          {
            _key1035 = iprot.readString();
            _val1036 = iprot.readI32();
            struct.comp_ids.put(_key1035, _val1036);
          }
        }
        struct.set_comp_ids_isSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map1038 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.metric_ids = new HashMap<String,Integer>(2*_map1038.size);
          String _key1039;
          int _val1040;
          for (int _i1041 = 0; _i1041 < _map1038.size; ++_i1041)
          {
            _key1039 = iprot.readString();
            _val1040 = iprot.readI32();
            struct.metric_ids.put(_key1039, _val1040);
          }
        }
        struct.set_metric_ids_isSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map1042 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.executor_ids = new HashMap<String,Integer>(2*_map1042.size);
          String _key1043;
          int _val1044;
          for (int _i1045 = 0; _i1045 < _map1042.size; ++_i1045)
          {
            _key1043 = iprot.readString();
            _val1044 = iprot.readI32();
            struct.executor_ids.put(_key1043, _val1044);
          }
        }
        struct.set_executor_ids_isSet(true);
      }
    }
  }

}

