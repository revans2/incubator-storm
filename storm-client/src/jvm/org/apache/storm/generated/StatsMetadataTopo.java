/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.storm.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class StatsMetadataTopo implements org.apache.thrift.TBase<StatsMetadataTopo, StatsMetadataTopo._Fields>, java.io.Serializable, Cloneable, Comparable<StatsMetadataTopo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StatsMetadataTopo");

  private static final org.apache.thrift.protocol.TField TOPO_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("topo_ids", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField STREAM_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("stream_ids", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField HOST_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("host_ids", org.apache.thrift.protocol.TType.MAP, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StatsMetadataTopoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StatsMetadataTopoTupleSchemeFactory());
  }

  private Map<String,Integer> topo_ids; // optional
  private Map<String,Integer> stream_ids; // optional
  private Map<String,Integer> host_ids; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TOPO_IDS((short)1, "topo_ids"),
    STREAM_IDS((short)2, "stream_ids"),
    HOST_IDS((short)3, "host_ids");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOPO_IDS
          return TOPO_IDS;
        case 2: // STREAM_IDS
          return STREAM_IDS;
        case 3: // HOST_IDS
          return HOST_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.TOPO_IDS,_Fields.STREAM_IDS,_Fields.HOST_IDS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOPO_IDS, new org.apache.thrift.meta_data.FieldMetaData("topo_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.STREAM_IDS, new org.apache.thrift.meta_data.FieldMetaData("stream_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.HOST_IDS, new org.apache.thrift.meta_data.FieldMetaData("host_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StatsMetadataTopo.class, metaDataMap);
  }

  public StatsMetadataTopo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StatsMetadataTopo(StatsMetadataTopo other) {
    if (other.is_set_topo_ids()) {
      Map<String,Integer> __this__topo_ids = new HashMap<String,Integer>(other.topo_ids);
      this.topo_ids = __this__topo_ids;
    }
    if (other.is_set_stream_ids()) {
      Map<String,Integer> __this__stream_ids = new HashMap<String,Integer>(other.stream_ids);
      this.stream_ids = __this__stream_ids;
    }
    if (other.is_set_host_ids()) {
      Map<String,Integer> __this__host_ids = new HashMap<String,Integer>(other.host_ids);
      this.host_ids = __this__host_ids;
    }
  }

  public StatsMetadataTopo deepCopy() {
    return new StatsMetadataTopo(this);
  }

  @Override
  public void clear() {
    this.topo_ids = null;
    this.stream_ids = null;
    this.host_ids = null;
  }

  public int get_topo_ids_size() {
    return (this.topo_ids == null) ? 0 : this.topo_ids.size();
  }

  public void put_to_topo_ids(String key, int val) {
    if (this.topo_ids == null) {
      this.topo_ids = new HashMap<String,Integer>();
    }
    this.topo_ids.put(key, val);
  }

  public Map<String,Integer> get_topo_ids() {
    return this.topo_ids;
  }

  public void set_topo_ids(Map<String,Integer> topo_ids) {
    this.topo_ids = topo_ids;
  }

  public void unset_topo_ids() {
    this.topo_ids = null;
  }

  /** Returns true if field topo_ids is set (has been assigned a value) and false otherwise */
  public boolean is_set_topo_ids() {
    return this.topo_ids != null;
  }

  public void set_topo_ids_isSet(boolean value) {
    if (!value) {
      this.topo_ids = null;
    }
  }

  public int get_stream_ids_size() {
    return (this.stream_ids == null) ? 0 : this.stream_ids.size();
  }

  public void put_to_stream_ids(String key, int val) {
    if (this.stream_ids == null) {
      this.stream_ids = new HashMap<String,Integer>();
    }
    this.stream_ids.put(key, val);
  }

  public Map<String,Integer> get_stream_ids() {
    return this.stream_ids;
  }

  public void set_stream_ids(Map<String,Integer> stream_ids) {
    this.stream_ids = stream_ids;
  }

  public void unset_stream_ids() {
    this.stream_ids = null;
  }

  /** Returns true if field stream_ids is set (has been assigned a value) and false otherwise */
  public boolean is_set_stream_ids() {
    return this.stream_ids != null;
  }

  public void set_stream_ids_isSet(boolean value) {
    if (!value) {
      this.stream_ids = null;
    }
  }

  public int get_host_ids_size() {
    return (this.host_ids == null) ? 0 : this.host_ids.size();
  }

  public void put_to_host_ids(String key, int val) {
    if (this.host_ids == null) {
      this.host_ids = new HashMap<String,Integer>();
    }
    this.host_ids.put(key, val);
  }

  public Map<String,Integer> get_host_ids() {
    return this.host_ids;
  }

  public void set_host_ids(Map<String,Integer> host_ids) {
    this.host_ids = host_ids;
  }

  public void unset_host_ids() {
    this.host_ids = null;
  }

  /** Returns true if field host_ids is set (has been assigned a value) and false otherwise */
  public boolean is_set_host_ids() {
    return this.host_ids != null;
  }

  public void set_host_ids_isSet(boolean value) {
    if (!value) {
      this.host_ids = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TOPO_IDS:
      if (value == null) {
        unset_topo_ids();
      } else {
        set_topo_ids((Map<String,Integer>)value);
      }
      break;

    case STREAM_IDS:
      if (value == null) {
        unset_stream_ids();
      } else {
        set_stream_ids((Map<String,Integer>)value);
      }
      break;

    case HOST_IDS:
      if (value == null) {
        unset_host_ids();
      } else {
        set_host_ids((Map<String,Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TOPO_IDS:
      return get_topo_ids();

    case STREAM_IDS:
      return get_stream_ids();

    case HOST_IDS:
      return get_host_ids();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TOPO_IDS:
      return is_set_topo_ids();
    case STREAM_IDS:
      return is_set_stream_ids();
    case HOST_IDS:
      return is_set_host_ids();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StatsMetadataTopo)
      return this.equals((StatsMetadataTopo)that);
    return false;
  }

  public boolean equals(StatsMetadataTopo that) {
    if (that == null)
      return false;

    boolean this_present_topo_ids = true && this.is_set_topo_ids();
    boolean that_present_topo_ids = true && that.is_set_topo_ids();
    if (this_present_topo_ids || that_present_topo_ids) {
      if (!(this_present_topo_ids && that_present_topo_ids))
        return false;
      if (!this.topo_ids.equals(that.topo_ids))
        return false;
    }

    boolean this_present_stream_ids = true && this.is_set_stream_ids();
    boolean that_present_stream_ids = true && that.is_set_stream_ids();
    if (this_present_stream_ids || that_present_stream_ids) {
      if (!(this_present_stream_ids && that_present_stream_ids))
        return false;
      if (!this.stream_ids.equals(that.stream_ids))
        return false;
    }

    boolean this_present_host_ids = true && this.is_set_host_ids();
    boolean that_present_host_ids = true && that.is_set_host_ids();
    if (this_present_host_ids || that_present_host_ids) {
      if (!(this_present_host_ids && that_present_host_ids))
        return false;
      if (!this.host_ids.equals(that.host_ids))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_topo_ids = true && (is_set_topo_ids());
    list.add(present_topo_ids);
    if (present_topo_ids)
      list.add(topo_ids);

    boolean present_stream_ids = true && (is_set_stream_ids());
    list.add(present_stream_ids);
    if (present_stream_ids)
      list.add(stream_ids);

    boolean present_host_ids = true && (is_set_host_ids());
    list.add(present_host_ids);
    if (present_host_ids)
      list.add(host_ids);

    return list.hashCode();
  }

  @Override
  public int compareTo(StatsMetadataTopo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_topo_ids()).compareTo(other.is_set_topo_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_topo_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topo_ids, other.topo_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_stream_ids()).compareTo(other.is_set_stream_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_stream_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stream_ids, other.stream_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_host_ids()).compareTo(other.is_set_host_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_host_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host_ids, other.host_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StatsMetadataTopo(");
    boolean first = true;

    if (is_set_topo_ids()) {
      sb.append("topo_ids:");
      if (this.topo_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.topo_ids);
      }
      first = false;
    }
    if (is_set_stream_ids()) {
      if (!first) sb.append(", ");
      sb.append("stream_ids:");
      if (this.stream_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.stream_ids);
      }
      first = false;
    }
    if (is_set_host_ids()) {
      if (!first) sb.append(", ");
      sb.append("host_ids:");
      if (this.host_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.host_ids);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StatsMetadataTopoStandardSchemeFactory implements SchemeFactory {
    public StatsMetadataTopoStandardScheme getScheme() {
      return new StatsMetadataTopoStandardScheme();
    }
  }

  private static class StatsMetadataTopoStandardScheme extends StandardScheme<StatsMetadataTopo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StatsMetadataTopo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOPO_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map986 = iprot.readMapBegin();
                struct.topo_ids = new HashMap<String,Integer>(2*_map986.size);
                String _key987;
                int _val988;
                for (int _i989 = 0; _i989 < _map986.size; ++_i989)
                {
                  _key987 = iprot.readString();
                  _val988 = iprot.readI32();
                  struct.topo_ids.put(_key987, _val988);
                }
                iprot.readMapEnd();
              }
              struct.set_topo_ids_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STREAM_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map990 = iprot.readMapBegin();
                struct.stream_ids = new HashMap<String,Integer>(2*_map990.size);
                String _key991;
                int _val992;
                for (int _i993 = 0; _i993 < _map990.size; ++_i993)
                {
                  _key991 = iprot.readString();
                  _val992 = iprot.readI32();
                  struct.stream_ids.put(_key991, _val992);
                }
                iprot.readMapEnd();
              }
              struct.set_stream_ids_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HOST_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map994 = iprot.readMapBegin();
                struct.host_ids = new HashMap<String,Integer>(2*_map994.size);
                String _key995;
                int _val996;
                for (int _i997 = 0; _i997 < _map994.size; ++_i997)
                {
                  _key995 = iprot.readString();
                  _val996 = iprot.readI32();
                  struct.host_ids.put(_key995, _val996);
                }
                iprot.readMapEnd();
              }
              struct.set_host_ids_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StatsMetadataTopo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.topo_ids != null) {
        if (struct.is_set_topo_ids()) {
          oprot.writeFieldBegin(TOPO_IDS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.topo_ids.size()));
            for (Map.Entry<String, Integer> _iter998 : struct.topo_ids.entrySet())
            {
              oprot.writeString(_iter998.getKey());
              oprot.writeI32(_iter998.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.stream_ids != null) {
        if (struct.is_set_stream_ids()) {
          oprot.writeFieldBegin(STREAM_IDS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.stream_ids.size()));
            for (Map.Entry<String, Integer> _iter999 : struct.stream_ids.entrySet())
            {
              oprot.writeString(_iter999.getKey());
              oprot.writeI32(_iter999.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.host_ids != null) {
        if (struct.is_set_host_ids()) {
          oprot.writeFieldBegin(HOST_IDS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.host_ids.size()));
            for (Map.Entry<String, Integer> _iter1000 : struct.host_ids.entrySet())
            {
              oprot.writeString(_iter1000.getKey());
              oprot.writeI32(_iter1000.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StatsMetadataTopoTupleSchemeFactory implements SchemeFactory {
    public StatsMetadataTopoTupleScheme getScheme() {
      return new StatsMetadataTopoTupleScheme();
    }
  }

  private static class StatsMetadataTopoTupleScheme extends TupleScheme<StatsMetadataTopo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StatsMetadataTopo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.is_set_topo_ids()) {
        optionals.set(0);
      }
      if (struct.is_set_stream_ids()) {
        optionals.set(1);
      }
      if (struct.is_set_host_ids()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.is_set_topo_ids()) {
        {
          oprot.writeI32(struct.topo_ids.size());
          for (Map.Entry<String, Integer> _iter1001 : struct.topo_ids.entrySet())
          {
            oprot.writeString(_iter1001.getKey());
            oprot.writeI32(_iter1001.getValue());
          }
        }
      }
      if (struct.is_set_stream_ids()) {
        {
          oprot.writeI32(struct.stream_ids.size());
          for (Map.Entry<String, Integer> _iter1002 : struct.stream_ids.entrySet())
          {
            oprot.writeString(_iter1002.getKey());
            oprot.writeI32(_iter1002.getValue());
          }
        }
      }
      if (struct.is_set_host_ids()) {
        {
          oprot.writeI32(struct.host_ids.size());
          for (Map.Entry<String, Integer> _iter1003 : struct.host_ids.entrySet())
          {
            oprot.writeString(_iter1003.getKey());
            oprot.writeI32(_iter1003.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StatsMetadataTopo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map1004 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.topo_ids = new HashMap<String,Integer>(2*_map1004.size);
          String _key1005;
          int _val1006;
          for (int _i1007 = 0; _i1007 < _map1004.size; ++_i1007)
          {
            _key1005 = iprot.readString();
            _val1006 = iprot.readI32();
            struct.topo_ids.put(_key1005, _val1006);
          }
        }
        struct.set_topo_ids_isSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map1008 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.stream_ids = new HashMap<String,Integer>(2*_map1008.size);
          String _key1009;
          int _val1010;
          for (int _i1011 = 0; _i1011 < _map1008.size; ++_i1011)
          {
            _key1009 = iprot.readString();
            _val1010 = iprot.readI32();
            struct.stream_ids.put(_key1009, _val1010);
          }
        }
        struct.set_stream_ids_isSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map1012 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.host_ids = new HashMap<String,Integer>(2*_map1012.size);
          String _key1013;
          int _val1014;
          for (int _i1015 = 0; _i1015 < _map1012.size; ++_i1015)
          {
            _key1013 = iprot.readString();
            _val1014 = iprot.readI32();
            struct.host_ids.put(_key1013, _val1014);
          }
        }
        struct.set_host_ids_isSet(true);
      }
    }
  }

}

