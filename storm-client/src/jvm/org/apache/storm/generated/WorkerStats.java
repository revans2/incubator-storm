/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.storm.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class WorkerStats implements org.apache.thrift.TBase<WorkerStats, WorkerStats._Fields>, java.io.Serializable, Cloneable, Comparable<WorkerStats> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WorkerStats");

  private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField STORM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("storm_id", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField METRICS_FIELD_DESC = new org.apache.thrift.protocol.TField("metrics", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField EXECUTOR_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("executor_infos", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WorkerStatsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WorkerStatsTupleSchemeFactory());
  }

  private long port; // optional
  private String storm_id; // optional
  private Map<Long,LSWorkerStats> metrics; // optional
  private List<ExecutorInfo> executor_infos; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PORT((short)1, "port"),
    STORM_ID((short)2, "storm_id"),
    METRICS((short)3, "metrics"),
    EXECUTOR_INFOS((short)4, "executor_infos");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PORT
          return PORT;
        case 2: // STORM_ID
          return STORM_ID;
        case 3: // METRICS
          return METRICS;
        case 4: // EXECUTOR_INFOS
          return EXECUTOR_INFOS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PORT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PORT,_Fields.STORM_ID,_Fields.METRICS,_Fields.EXECUTOR_INFOS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STORM_ID, new org.apache.thrift.meta_data.FieldMetaData("storm_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.METRICS, new org.apache.thrift.meta_data.FieldMetaData("metrics", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LSWorkerStats.class))));
    tmpMap.put(_Fields.EXECUTOR_INFOS, new org.apache.thrift.meta_data.FieldMetaData("executor_infos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExecutorInfo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WorkerStats.class, metaDataMap);
  }

  public WorkerStats() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WorkerStats(WorkerStats other) {
    __isset_bitfield = other.__isset_bitfield;
    this.port = other.port;
    if (other.is_set_storm_id()) {
      this.storm_id = other.storm_id;
    }
    if (other.is_set_metrics()) {
      Map<Long,LSWorkerStats> __this__metrics = new HashMap<Long,LSWorkerStats>(other.metrics.size());
      for (Map.Entry<Long, LSWorkerStats> other_element : other.metrics.entrySet()) {

        Long other_element_key = other_element.getKey();
        LSWorkerStats other_element_value = other_element.getValue();

        Long __this__metrics_copy_key = other_element_key;

        LSWorkerStats __this__metrics_copy_value = new LSWorkerStats(other_element_value);

        __this__metrics.put(__this__metrics_copy_key, __this__metrics_copy_value);
      }
      this.metrics = __this__metrics;
    }
    if (other.is_set_executor_infos()) {
      List<ExecutorInfo> __this__executor_infos = new ArrayList<ExecutorInfo>(other.executor_infos.size());
      for (ExecutorInfo other_element : other.executor_infos) {
        __this__executor_infos.add(new ExecutorInfo(other_element));
      }
      this.executor_infos = __this__executor_infos;
    }
  }

  public WorkerStats deepCopy() {
    return new WorkerStats(this);
  }

  @Override
  public void clear() {
    set_port_isSet(false);
    this.port = 0;
    this.storm_id = null;
    this.metrics = null;
    this.executor_infos = null;
  }

  public long get_port() {
    return this.port;
  }

  public void set_port(long port) {
    this.port = port;
    set_port_isSet(true);
  }

  public void unset_port() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  /** Returns true if field port is set (has been assigned a value) and false otherwise */
  public boolean is_set_port() {
    return EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  public void set_port_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
  }

  public String get_storm_id() {
    return this.storm_id;
  }

  public void set_storm_id(String storm_id) {
    this.storm_id = storm_id;
  }

  public void unset_storm_id() {
    this.storm_id = null;
  }

  /** Returns true if field storm_id is set (has been assigned a value) and false otherwise */
  public boolean is_set_storm_id() {
    return this.storm_id != null;
  }

  public void set_storm_id_isSet(boolean value) {
    if (!value) {
      this.storm_id = null;
    }
  }

  public int get_metrics_size() {
    return (this.metrics == null) ? 0 : this.metrics.size();
  }

  public void put_to_metrics(long key, LSWorkerStats val) {
    if (this.metrics == null) {
      this.metrics = new HashMap<Long,LSWorkerStats>();
    }
    this.metrics.put(key, val);
  }

  public Map<Long,LSWorkerStats> get_metrics() {
    return this.metrics;
  }

  public void set_metrics(Map<Long,LSWorkerStats> metrics) {
    this.metrics = metrics;
  }

  public void unset_metrics() {
    this.metrics = null;
  }

  /** Returns true if field metrics is set (has been assigned a value) and false otherwise */
  public boolean is_set_metrics() {
    return this.metrics != null;
  }

  public void set_metrics_isSet(boolean value) {
    if (!value) {
      this.metrics = null;
    }
  }

  public int get_executor_infos_size() {
    return (this.executor_infos == null) ? 0 : this.executor_infos.size();
  }

  public java.util.Iterator<ExecutorInfo> get_executor_infos_iterator() {
    return (this.executor_infos == null) ? null : this.executor_infos.iterator();
  }

  public void add_to_executor_infos(ExecutorInfo elem) {
    if (this.executor_infos == null) {
      this.executor_infos = new ArrayList<ExecutorInfo>();
    }
    this.executor_infos.add(elem);
  }

  public List<ExecutorInfo> get_executor_infos() {
    return this.executor_infos;
  }

  public void set_executor_infos(List<ExecutorInfo> executor_infos) {
    this.executor_infos = executor_infos;
  }

  public void unset_executor_infos() {
    this.executor_infos = null;
  }

  /** Returns true if field executor_infos is set (has been assigned a value) and false otherwise */
  public boolean is_set_executor_infos() {
    return this.executor_infos != null;
  }

  public void set_executor_infos_isSet(boolean value) {
    if (!value) {
      this.executor_infos = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PORT:
      if (value == null) {
        unset_port();
      } else {
        set_port((Long)value);
      }
      break;

    case STORM_ID:
      if (value == null) {
        unset_storm_id();
      } else {
        set_storm_id((String)value);
      }
      break;

    case METRICS:
      if (value == null) {
        unset_metrics();
      } else {
        set_metrics((Map<Long,LSWorkerStats>)value);
      }
      break;

    case EXECUTOR_INFOS:
      if (value == null) {
        unset_executor_infos();
      } else {
        set_executor_infos((List<ExecutorInfo>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PORT:
      return get_port();

    case STORM_ID:
      return get_storm_id();

    case METRICS:
      return get_metrics();

    case EXECUTOR_INFOS:
      return get_executor_infos();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PORT:
      return is_set_port();
    case STORM_ID:
      return is_set_storm_id();
    case METRICS:
      return is_set_metrics();
    case EXECUTOR_INFOS:
      return is_set_executor_infos();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WorkerStats)
      return this.equals((WorkerStats)that);
    return false;
  }

  public boolean equals(WorkerStats that) {
    if (that == null)
      return false;

    boolean this_present_port = true && this.is_set_port();
    boolean that_present_port = true && that.is_set_port();
    if (this_present_port || that_present_port) {
      if (!(this_present_port && that_present_port))
        return false;
      if (this.port != that.port)
        return false;
    }

    boolean this_present_storm_id = true && this.is_set_storm_id();
    boolean that_present_storm_id = true && that.is_set_storm_id();
    if (this_present_storm_id || that_present_storm_id) {
      if (!(this_present_storm_id && that_present_storm_id))
        return false;
      if (!this.storm_id.equals(that.storm_id))
        return false;
    }

    boolean this_present_metrics = true && this.is_set_metrics();
    boolean that_present_metrics = true && that.is_set_metrics();
    if (this_present_metrics || that_present_metrics) {
      if (!(this_present_metrics && that_present_metrics))
        return false;
      if (!this.metrics.equals(that.metrics))
        return false;
    }

    boolean this_present_executor_infos = true && this.is_set_executor_infos();
    boolean that_present_executor_infos = true && that.is_set_executor_infos();
    if (this_present_executor_infos || that_present_executor_infos) {
      if (!(this_present_executor_infos && that_present_executor_infos))
        return false;
      if (!this.executor_infos.equals(that.executor_infos))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_port = true && (is_set_port());
    list.add(present_port);
    if (present_port)
      list.add(port);

    boolean present_storm_id = true && (is_set_storm_id());
    list.add(present_storm_id);
    if (present_storm_id)
      list.add(storm_id);

    boolean present_metrics = true && (is_set_metrics());
    list.add(present_metrics);
    if (present_metrics)
      list.add(metrics);

    boolean present_executor_infos = true && (is_set_executor_infos());
    list.add(present_executor_infos);
    if (present_executor_infos)
      list.add(executor_infos);

    return list.hashCode();
  }

  @Override
  public int compareTo(WorkerStats other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_port()).compareTo(other.is_set_port());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_port()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_storm_id()).compareTo(other.is_set_storm_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_storm_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storm_id, other.storm_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_metrics()).compareTo(other.is_set_metrics());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_metrics()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metrics, other.metrics);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_executor_infos()).compareTo(other.is_set_executor_infos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_executor_infos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executor_infos, other.executor_infos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WorkerStats(");
    boolean first = true;

    if (is_set_port()) {
      sb.append("port:");
      sb.append(this.port);
      first = false;
    }
    if (is_set_storm_id()) {
      if (!first) sb.append(", ");
      sb.append("storm_id:");
      if (this.storm_id == null) {
        sb.append("null");
      } else {
        sb.append(this.storm_id);
      }
      first = false;
    }
    if (is_set_metrics()) {
      if (!first) sb.append(", ");
      sb.append("metrics:");
      if (this.metrics == null) {
        sb.append("null");
      } else {
        sb.append(this.metrics);
      }
      first = false;
    }
    if (is_set_executor_infos()) {
      if (!first) sb.append(", ");
      sb.append("executor_infos:");
      if (this.executor_infos == null) {
        sb.append("null");
      } else {
        sb.append(this.executor_infos);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WorkerStatsStandardSchemeFactory implements SchemeFactory {
    public WorkerStatsStandardScheme getScheme() {
      return new WorkerStatsStandardScheme();
    }
  }

  private static class WorkerStatsStandardScheme extends StandardScheme<WorkerStats> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WorkerStats struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.port = iprot.readI64();
              struct.set_port_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STORM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.storm_id = iprot.readString();
              struct.set_storm_id_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // METRICS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map668 = iprot.readMapBegin();
                struct.metrics = new HashMap<Long,LSWorkerStats>(2*_map668.size);
                long _key669;
                LSWorkerStats _val670;
                for (int _i671 = 0; _i671 < _map668.size; ++_i671)
                {
                  _key669 = iprot.readI64();
                  _val670 = new LSWorkerStats();
                  _val670.read(iprot);
                  struct.metrics.put(_key669, _val670);
                }
                iprot.readMapEnd();
              }
              struct.set_metrics_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXECUTOR_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list672 = iprot.readListBegin();
                struct.executor_infos = new ArrayList<ExecutorInfo>(_list672.size);
                ExecutorInfo _elem673;
                for (int _i674 = 0; _i674 < _list672.size; ++_i674)
                {
                  _elem673 = new ExecutorInfo();
                  _elem673.read(iprot);
                  struct.executor_infos.add(_elem673);
                }
                iprot.readListEnd();
              }
              struct.set_executor_infos_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WorkerStats struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.is_set_port()) {
        oprot.writeFieldBegin(PORT_FIELD_DESC);
        oprot.writeI64(struct.port);
        oprot.writeFieldEnd();
      }
      if (struct.storm_id != null) {
        if (struct.is_set_storm_id()) {
          oprot.writeFieldBegin(STORM_ID_FIELD_DESC);
          oprot.writeString(struct.storm_id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.metrics != null) {
        if (struct.is_set_metrics()) {
          oprot.writeFieldBegin(METRICS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, struct.metrics.size()));
            for (Map.Entry<Long, LSWorkerStats> _iter675 : struct.metrics.entrySet())
            {
              oprot.writeI64(_iter675.getKey());
              _iter675.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.executor_infos != null) {
        if (struct.is_set_executor_infos()) {
          oprot.writeFieldBegin(EXECUTOR_INFOS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.executor_infos.size()));
            for (ExecutorInfo _iter676 : struct.executor_infos)
            {
              _iter676.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WorkerStatsTupleSchemeFactory implements SchemeFactory {
    public WorkerStatsTupleScheme getScheme() {
      return new WorkerStatsTupleScheme();
    }
  }

  private static class WorkerStatsTupleScheme extends TupleScheme<WorkerStats> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WorkerStats struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.is_set_port()) {
        optionals.set(0);
      }
      if (struct.is_set_storm_id()) {
        optionals.set(1);
      }
      if (struct.is_set_metrics()) {
        optionals.set(2);
      }
      if (struct.is_set_executor_infos()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.is_set_port()) {
        oprot.writeI64(struct.port);
      }
      if (struct.is_set_storm_id()) {
        oprot.writeString(struct.storm_id);
      }
      if (struct.is_set_metrics()) {
        {
          oprot.writeI32(struct.metrics.size());
          for (Map.Entry<Long, LSWorkerStats> _iter677 : struct.metrics.entrySet())
          {
            oprot.writeI64(_iter677.getKey());
            _iter677.getValue().write(oprot);
          }
        }
      }
      if (struct.is_set_executor_infos()) {
        {
          oprot.writeI32(struct.executor_infos.size());
          for (ExecutorInfo _iter678 : struct.executor_infos)
          {
            _iter678.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WorkerStats struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.port = iprot.readI64();
        struct.set_port_isSet(true);
      }
      if (incoming.get(1)) {
        struct.storm_id = iprot.readString();
        struct.set_storm_id_isSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map679 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.metrics = new HashMap<Long,LSWorkerStats>(2*_map679.size);
          long _key680;
          LSWorkerStats _val681;
          for (int _i682 = 0; _i682 < _map679.size; ++_i682)
          {
            _key680 = iprot.readI64();
            _val681 = new LSWorkerStats();
            _val681.read(iprot);
            struct.metrics.put(_key680, _val681);
          }
        }
        struct.set_metrics_isSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list683 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.executor_infos = new ArrayList<ExecutorInfo>(_list683.size);
          ExecutorInfo _elem684;
          for (int _i685 = 0; _i685 < _list683.size; ++_i685)
          {
            _elem684 = new ExecutorInfo();
            _elem684.read(iprot);
            struct.executor_infos.add(_elem684);
          }
        }
        struct.set_executor_infos_isSet(true);
      }
    }
  }

}

