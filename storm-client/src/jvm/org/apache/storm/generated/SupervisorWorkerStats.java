/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.storm.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class SupervisorWorkerStats implements org.apache.thrift.TBase<SupervisorWorkerStats, SupervisorWorkerStats._Fields>, java.io.Serializable, Cloneable, Comparable<SupervisorWorkerStats> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SupervisorWorkerStats");

  private static final org.apache.thrift.protocol.TField SUPERVISOR_HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("supervisor_host", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SUPERVISOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("supervisor_id", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField WORKER_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("worker_stats", org.apache.thrift.protocol.TType.MAP, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SupervisorWorkerStatsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SupervisorWorkerStatsTupleSchemeFactory());
  }

  private String supervisor_host; // optional
  private String supervisor_id; // optional
  private Map<String,WorkerStats> worker_stats; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SUPERVISOR_HOST((short)1, "supervisor_host"),
    SUPERVISOR_ID((short)2, "supervisor_id"),
    WORKER_STATS((short)3, "worker_stats");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUPERVISOR_HOST
          return SUPERVISOR_HOST;
        case 2: // SUPERVISOR_ID
          return SUPERVISOR_ID;
        case 3: // WORKER_STATS
          return WORKER_STATS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.SUPERVISOR_HOST,_Fields.SUPERVISOR_ID,_Fields.WORKER_STATS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUPERVISOR_HOST, new org.apache.thrift.meta_data.FieldMetaData("supervisor_host", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUPERVISOR_ID, new org.apache.thrift.meta_data.FieldMetaData("supervisor_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WORKER_STATS, new org.apache.thrift.meta_data.FieldMetaData("worker_stats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WorkerStats.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SupervisorWorkerStats.class, metaDataMap);
  }

  public SupervisorWorkerStats() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SupervisorWorkerStats(SupervisorWorkerStats other) {
    if (other.is_set_supervisor_host()) {
      this.supervisor_host = other.supervisor_host;
    }
    if (other.is_set_supervisor_id()) {
      this.supervisor_id = other.supervisor_id;
    }
    if (other.is_set_worker_stats()) {
      Map<String,WorkerStats> __this__worker_stats = new HashMap<String,WorkerStats>(other.worker_stats.size());
      for (Map.Entry<String, WorkerStats> other_element : other.worker_stats.entrySet()) {

        String other_element_key = other_element.getKey();
        WorkerStats other_element_value = other_element.getValue();

        String __this__worker_stats_copy_key = other_element_key;

        WorkerStats __this__worker_stats_copy_value = new WorkerStats(other_element_value);

        __this__worker_stats.put(__this__worker_stats_copy_key, __this__worker_stats_copy_value);
      }
      this.worker_stats = __this__worker_stats;
    }
  }

  public SupervisorWorkerStats deepCopy() {
    return new SupervisorWorkerStats(this);
  }

  @Override
  public void clear() {
    this.supervisor_host = null;
    this.supervisor_id = null;
    this.worker_stats = null;
  }

  public String get_supervisor_host() {
    return this.supervisor_host;
  }

  public void set_supervisor_host(String supervisor_host) {
    this.supervisor_host = supervisor_host;
  }

  public void unset_supervisor_host() {
    this.supervisor_host = null;
  }

  /** Returns true if field supervisor_host is set (has been assigned a value) and false otherwise */
  public boolean is_set_supervisor_host() {
    return this.supervisor_host != null;
  }

  public void set_supervisor_host_isSet(boolean value) {
    if (!value) {
      this.supervisor_host = null;
    }
  }

  public String get_supervisor_id() {
    return this.supervisor_id;
  }

  public void set_supervisor_id(String supervisor_id) {
    this.supervisor_id = supervisor_id;
  }

  public void unset_supervisor_id() {
    this.supervisor_id = null;
  }

  /** Returns true if field supervisor_id is set (has been assigned a value) and false otherwise */
  public boolean is_set_supervisor_id() {
    return this.supervisor_id != null;
  }

  public void set_supervisor_id_isSet(boolean value) {
    if (!value) {
      this.supervisor_id = null;
    }
  }

  public int get_worker_stats_size() {
    return (this.worker_stats == null) ? 0 : this.worker_stats.size();
  }

  public void put_to_worker_stats(String key, WorkerStats val) {
    if (this.worker_stats == null) {
      this.worker_stats = new HashMap<String,WorkerStats>();
    }
    this.worker_stats.put(key, val);
  }

  public Map<String,WorkerStats> get_worker_stats() {
    return this.worker_stats;
  }

  public void set_worker_stats(Map<String,WorkerStats> worker_stats) {
    this.worker_stats = worker_stats;
  }

  public void unset_worker_stats() {
    this.worker_stats = null;
  }

  /** Returns true if field worker_stats is set (has been assigned a value) and false otherwise */
  public boolean is_set_worker_stats() {
    return this.worker_stats != null;
  }

  public void set_worker_stats_isSet(boolean value) {
    if (!value) {
      this.worker_stats = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUPERVISOR_HOST:
      if (value == null) {
        unset_supervisor_host();
      } else {
        set_supervisor_host((String)value);
      }
      break;

    case SUPERVISOR_ID:
      if (value == null) {
        unset_supervisor_id();
      } else {
        set_supervisor_id((String)value);
      }
      break;

    case WORKER_STATS:
      if (value == null) {
        unset_worker_stats();
      } else {
        set_worker_stats((Map<String,WorkerStats>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUPERVISOR_HOST:
      return get_supervisor_host();

    case SUPERVISOR_ID:
      return get_supervisor_id();

    case WORKER_STATS:
      return get_worker_stats();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUPERVISOR_HOST:
      return is_set_supervisor_host();
    case SUPERVISOR_ID:
      return is_set_supervisor_id();
    case WORKER_STATS:
      return is_set_worker_stats();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SupervisorWorkerStats)
      return this.equals((SupervisorWorkerStats)that);
    return false;
  }

  public boolean equals(SupervisorWorkerStats that) {
    if (that == null)
      return false;

    boolean this_present_supervisor_host = true && this.is_set_supervisor_host();
    boolean that_present_supervisor_host = true && that.is_set_supervisor_host();
    if (this_present_supervisor_host || that_present_supervisor_host) {
      if (!(this_present_supervisor_host && that_present_supervisor_host))
        return false;
      if (!this.supervisor_host.equals(that.supervisor_host))
        return false;
    }

    boolean this_present_supervisor_id = true && this.is_set_supervisor_id();
    boolean that_present_supervisor_id = true && that.is_set_supervisor_id();
    if (this_present_supervisor_id || that_present_supervisor_id) {
      if (!(this_present_supervisor_id && that_present_supervisor_id))
        return false;
      if (!this.supervisor_id.equals(that.supervisor_id))
        return false;
    }

    boolean this_present_worker_stats = true && this.is_set_worker_stats();
    boolean that_present_worker_stats = true && that.is_set_worker_stats();
    if (this_present_worker_stats || that_present_worker_stats) {
      if (!(this_present_worker_stats && that_present_worker_stats))
        return false;
      if (!this.worker_stats.equals(that.worker_stats))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_supervisor_host = true && (is_set_supervisor_host());
    list.add(present_supervisor_host);
    if (present_supervisor_host)
      list.add(supervisor_host);

    boolean present_supervisor_id = true && (is_set_supervisor_id());
    list.add(present_supervisor_id);
    if (present_supervisor_id)
      list.add(supervisor_id);

    boolean present_worker_stats = true && (is_set_worker_stats());
    list.add(present_worker_stats);
    if (present_worker_stats)
      list.add(worker_stats);

    return list.hashCode();
  }

  @Override
  public int compareTo(SupervisorWorkerStats other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_supervisor_host()).compareTo(other.is_set_supervisor_host());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_supervisor_host()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supervisor_host, other.supervisor_host);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_supervisor_id()).compareTo(other.is_set_supervisor_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_supervisor_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supervisor_id, other.supervisor_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_worker_stats()).compareTo(other.is_set_worker_stats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_worker_stats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.worker_stats, other.worker_stats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SupervisorWorkerStats(");
    boolean first = true;

    if (is_set_supervisor_host()) {
      sb.append("supervisor_host:");
      if (this.supervisor_host == null) {
        sb.append("null");
      } else {
        sb.append(this.supervisor_host);
      }
      first = false;
    }
    if (is_set_supervisor_id()) {
      if (!first) sb.append(", ");
      sb.append("supervisor_id:");
      if (this.supervisor_id == null) {
        sb.append("null");
      } else {
        sb.append(this.supervisor_id);
      }
      first = false;
    }
    if (is_set_worker_stats()) {
      if (!first) sb.append(", ");
      sb.append("worker_stats:");
      if (this.worker_stats == null) {
        sb.append("null");
      } else {
        sb.append(this.worker_stats);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SupervisorWorkerStatsStandardSchemeFactory implements SchemeFactory {
    public SupervisorWorkerStatsStandardScheme getScheme() {
      return new SupervisorWorkerStatsStandardScheme();
    }
  }

  private static class SupervisorWorkerStatsStandardScheme extends StandardScheme<SupervisorWorkerStats> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SupervisorWorkerStats struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUPERVISOR_HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.supervisor_host = iprot.readString();
              struct.set_supervisor_host_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUPERVISOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.supervisor_id = iprot.readString();
              struct.set_supervisor_id_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // WORKER_STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map686 = iprot.readMapBegin();
                struct.worker_stats = new HashMap<String,WorkerStats>(2*_map686.size);
                String _key687;
                WorkerStats _val688;
                for (int _i689 = 0; _i689 < _map686.size; ++_i689)
                {
                  _key687 = iprot.readString();
                  _val688 = new WorkerStats();
                  _val688.read(iprot);
                  struct.worker_stats.put(_key687, _val688);
                }
                iprot.readMapEnd();
              }
              struct.set_worker_stats_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SupervisorWorkerStats struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.supervisor_host != null) {
        if (struct.is_set_supervisor_host()) {
          oprot.writeFieldBegin(SUPERVISOR_HOST_FIELD_DESC);
          oprot.writeString(struct.supervisor_host);
          oprot.writeFieldEnd();
        }
      }
      if (struct.supervisor_id != null) {
        if (struct.is_set_supervisor_id()) {
          oprot.writeFieldBegin(SUPERVISOR_ID_FIELD_DESC);
          oprot.writeString(struct.supervisor_id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.worker_stats != null) {
        if (struct.is_set_worker_stats()) {
          oprot.writeFieldBegin(WORKER_STATS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.worker_stats.size()));
            for (Map.Entry<String, WorkerStats> _iter690 : struct.worker_stats.entrySet())
            {
              oprot.writeString(_iter690.getKey());
              _iter690.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SupervisorWorkerStatsTupleSchemeFactory implements SchemeFactory {
    public SupervisorWorkerStatsTupleScheme getScheme() {
      return new SupervisorWorkerStatsTupleScheme();
    }
  }

  private static class SupervisorWorkerStatsTupleScheme extends TupleScheme<SupervisorWorkerStats> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SupervisorWorkerStats struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.is_set_supervisor_host()) {
        optionals.set(0);
      }
      if (struct.is_set_supervisor_id()) {
        optionals.set(1);
      }
      if (struct.is_set_worker_stats()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.is_set_supervisor_host()) {
        oprot.writeString(struct.supervisor_host);
      }
      if (struct.is_set_supervisor_id()) {
        oprot.writeString(struct.supervisor_id);
      }
      if (struct.is_set_worker_stats()) {
        {
          oprot.writeI32(struct.worker_stats.size());
          for (Map.Entry<String, WorkerStats> _iter691 : struct.worker_stats.entrySet())
          {
            oprot.writeString(_iter691.getKey());
            _iter691.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SupervisorWorkerStats struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.supervisor_host = iprot.readString();
        struct.set_supervisor_host_isSet(true);
      }
      if (incoming.get(1)) {
        struct.supervisor_id = iprot.readString();
        struct.set_supervisor_id_isSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map692 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.worker_stats = new HashMap<String,WorkerStats>(2*_map692.size);
          String _key693;
          WorkerStats _val694;
          for (int _i695 = 0; _i695 < _map692.size; ++_i695)
          {
            _key693 = iprot.readString();
            _val694 = new WorkerStats();
            _val694.read(iprot);
            struct.worker_stats.put(_key693, _val694);
          }
        }
        struct.set_worker_stats_isSet(true);
      }
    }
  }

}

