#!/usr/bin/env python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class ComponentType:
  BOLT = 1
  SPOUT = 2

  _VALUES_TO_NAMES = {
    1: "BOLT",
    2: "SPOUT",
  }

  _NAMES_TO_VALUES = {
    "BOLT": 1,
    "SPOUT": 2,
  }

class TopologyInitialStatus:
  ACTIVE = 1
  INACTIVE = 2

  _VALUES_TO_NAMES = {
    1: "ACTIVE",
    2: "INACTIVE",
  }

  _NAMES_TO_VALUES = {
    "ACTIVE": 1,
    "INACTIVE": 2,
  }

class AccessControlType:
  OTHER = 1
  USER = 2

  _VALUES_TO_NAMES = {
    1: "OTHER",
    2: "USER",
  }

  _NAMES_TO_VALUES = {
    "OTHER": 1,
    "USER": 2,
  }

class TopologyStatus:
  ACTIVE = 1
  INACTIVE = 2
  REBALANCING = 3
  KILLED = 4

  _VALUES_TO_NAMES = {
    1: "ACTIVE",
    2: "INACTIVE",
    3: "REBALANCING",
    4: "KILLED",
  }

  _NAMES_TO_VALUES = {
    "ACTIVE": 1,
    "INACTIVE": 2,
    "REBALANCING": 3,
    "KILLED": 4,
  }

class NumErrorsChoice:
  ALL = 0
  NONE = 1
  ONE = 2

  _VALUES_TO_NAMES = {
    0: "ALL",
    1: "NONE",
    2: "ONE",
  }

  _NAMES_TO_VALUES = {
    "ALL": 0,
    "NONE": 1,
    "ONE": 2,
  }

class ProfileAction:
  JPROFILE_STOP = 0
  JPROFILE_START = 1
  JPROFILE_DUMP = 2
  JMAP_DUMP = 3
  JSTACK_DUMP = 4
  JVM_RESTART = 5

  _VALUES_TO_NAMES = {
    0: "JPROFILE_STOP",
    1: "JPROFILE_START",
    2: "JPROFILE_DUMP",
    3: "JMAP_DUMP",
    4: "JSTACK_DUMP",
    5: "JVM_RESTART",
  }

  _NAMES_TO_VALUES = {
    "JPROFILE_STOP": 0,
    "JPROFILE_START": 1,
    "JPROFILE_DUMP": 2,
    "JMAP_DUMP": 3,
    "JSTACK_DUMP": 4,
    "JVM_RESTART": 5,
  }

class LogLevelAction:
  UNCHANGED = 1
  UPDATE = 2
  REMOVE = 3

  _VALUES_TO_NAMES = {
    1: "UNCHANGED",
    2: "UPDATE",
    3: "REMOVE",
  }

  _NAMES_TO_VALUES = {
    "UNCHANGED": 1,
    "UPDATE": 2,
    "REMOVE": 3,
  }

class HBServerMessageType:
  CREATE_PATH = 0
  CREATE_PATH_RESPONSE = 1
  EXISTS = 2
  EXISTS_RESPONSE = 3
  SEND_PULSE = 4
  SEND_PULSE_RESPONSE = 5
  GET_ALL_PULSE_FOR_PATH = 6
  GET_ALL_PULSE_FOR_PATH_RESPONSE = 7
  GET_ALL_NODES_FOR_PATH = 8
  GET_ALL_NODES_FOR_PATH_RESPONSE = 9
  GET_PULSE = 10
  GET_PULSE_RESPONSE = 11
  DELETE_PATH = 12
  DELETE_PATH_RESPONSE = 13
  DELETE_PULSE_ID = 14
  DELETE_PULSE_ID_RESPONSE = 15
  CONTROL_MESSAGE = 16
  SASL_MESSAGE_TOKEN = 17
  NOT_AUTHORIZED = 18

  _VALUES_TO_NAMES = {
    0: "CREATE_PATH",
    1: "CREATE_PATH_RESPONSE",
    2: "EXISTS",
    3: "EXISTS_RESPONSE",
    4: "SEND_PULSE",
    5: "SEND_PULSE_RESPONSE",
    6: "GET_ALL_PULSE_FOR_PATH",
    7: "GET_ALL_PULSE_FOR_PATH_RESPONSE",
    8: "GET_ALL_NODES_FOR_PATH",
    9: "GET_ALL_NODES_FOR_PATH_RESPONSE",
    10: "GET_PULSE",
    11: "GET_PULSE_RESPONSE",
    12: "DELETE_PATH",
    13: "DELETE_PATH_RESPONSE",
    14: "DELETE_PULSE_ID",
    15: "DELETE_PULSE_ID_RESPONSE",
    16: "CONTROL_MESSAGE",
    17: "SASL_MESSAGE_TOKEN",
    18: "NOT_AUTHORIZED",
  }

  _NAMES_TO_VALUES = {
    "CREATE_PATH": 0,
    "CREATE_PATH_RESPONSE": 1,
    "EXISTS": 2,
    "EXISTS_RESPONSE": 3,
    "SEND_PULSE": 4,
    "SEND_PULSE_RESPONSE": 5,
    "GET_ALL_PULSE_FOR_PATH": 6,
    "GET_ALL_PULSE_FOR_PATH_RESPONSE": 7,
    "GET_ALL_NODES_FOR_PATH": 8,
    "GET_ALL_NODES_FOR_PATH_RESPONSE": 9,
    "GET_PULSE": 10,
    "GET_PULSE_RESPONSE": 11,
    "DELETE_PATH": 12,
    "DELETE_PATH_RESPONSE": 13,
    "DELETE_PULSE_ID": 14,
    "DELETE_PULSE_ID_RESPONSE": 15,
    "CONTROL_MESSAGE": 16,
    "SASL_MESSAGE_TOKEN": 17,
    "NOT_AUTHORIZED": 18,
  }


class JavaObjectArg:
  """
  Attributes:
   - int_arg
   - long_arg
   - string_arg
   - bool_arg
   - binary_arg
   - double_arg
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'int_arg', None, None, ), # 1
    (2, TType.I64, 'long_arg', None, None, ), # 2
    (3, TType.STRING, 'string_arg', None, None, ), # 3
    (4, TType.BOOL, 'bool_arg', None, None, ), # 4
    (5, TType.STRING, 'binary_arg', None, None, ), # 5
    (6, TType.DOUBLE, 'double_arg', None, None, ), # 6
  )

  def __init__(self, int_arg=None, long_arg=None, string_arg=None, bool_arg=None, binary_arg=None, double_arg=None,):
    self.int_arg = int_arg
    self.long_arg = long_arg
    self.string_arg = string_arg
    self.bool_arg = bool_arg
    self.binary_arg = binary_arg
    self.double_arg = double_arg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.int_arg = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.long_arg = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.string_arg = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.bool_arg = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.binary_arg = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.double_arg = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('JavaObjectArg')
    if self.int_arg is not None:
      oprot.writeFieldBegin('int_arg', TType.I32, 1)
      oprot.writeI32(self.int_arg)
      oprot.writeFieldEnd()
    if self.long_arg is not None:
      oprot.writeFieldBegin('long_arg', TType.I64, 2)
      oprot.writeI64(self.long_arg)
      oprot.writeFieldEnd()
    if self.string_arg is not None:
      oprot.writeFieldBegin('string_arg', TType.STRING, 3)
      oprot.writeString(self.string_arg.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.bool_arg is not None:
      oprot.writeFieldBegin('bool_arg', TType.BOOL, 4)
      oprot.writeBool(self.bool_arg)
      oprot.writeFieldEnd()
    if self.binary_arg is not None:
      oprot.writeFieldBegin('binary_arg', TType.STRING, 5)
      oprot.writeString(self.binary_arg)
      oprot.writeFieldEnd()
    if self.double_arg is not None:
      oprot.writeFieldBegin('double_arg', TType.DOUBLE, 6)
      oprot.writeDouble(self.double_arg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.int_arg)
    value = (value * 31) ^ hash(self.long_arg)
    value = (value * 31) ^ hash(self.string_arg)
    value = (value * 31) ^ hash(self.bool_arg)
    value = (value * 31) ^ hash(self.binary_arg)
    value = (value * 31) ^ hash(self.double_arg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class JavaObject:
  """
  Attributes:
   - full_class_name
   - args_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'full_class_name', None, None, ), # 1
    (2, TType.LIST, 'args_list', (TType.STRUCT,(JavaObjectArg, JavaObjectArg.thrift_spec)), None, ), # 2
  )

  def __init__(self, full_class_name=None, args_list=None,):
    self.full_class_name = full_class_name
    self.args_list = args_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.full_class_name = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.args_list = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = JavaObjectArg()
            _elem5.read(iprot)
            self.args_list.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('JavaObject')
    if self.full_class_name is not None:
      oprot.writeFieldBegin('full_class_name', TType.STRING, 1)
      oprot.writeString(self.full_class_name.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.args_list is not None:
      oprot.writeFieldBegin('args_list', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.args_list))
      for iter6 in self.args_list:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.full_class_name is None:
      raise TProtocol.TProtocolException(message='Required field full_class_name is unset!')
    if self.args_list is None:
      raise TProtocol.TProtocolException(message='Required field args_list is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.full_class_name)
    value = (value * 31) ^ hash(self.args_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NullStruct:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NullStruct')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GlobalStreamId:
  """
  Attributes:
   - componentId
   - streamId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'componentId', None, None, ), # 1
    (2, TType.STRING, 'streamId', None, None, ), # 2
  )

  def __init__(self, componentId=None, streamId=None,):
    self.componentId = componentId
    self.streamId = streamId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.componentId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.streamId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GlobalStreamId')
    if self.componentId is not None:
      oprot.writeFieldBegin('componentId', TType.STRING, 1)
      oprot.writeString(self.componentId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.streamId is not None:
      oprot.writeFieldBegin('streamId', TType.STRING, 2)
      oprot.writeString(self.streamId.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.componentId is None:
      raise TProtocol.TProtocolException(message='Required field componentId is unset!')
    if self.streamId is None:
      raise TProtocol.TProtocolException(message='Required field streamId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.componentId)
    value = (value * 31) ^ hash(self.streamId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Grouping:
  """
  Attributes:
   - fields
   - shuffle
   - all
   - none
   - direct
   - custom_object
   - custom_serialized
   - local_or_shuffle
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'fields', (TType.STRING,None), None, ), # 1
    (2, TType.STRUCT, 'shuffle', (NullStruct, NullStruct.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'all', (NullStruct, NullStruct.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'none', (NullStruct, NullStruct.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'direct', (NullStruct, NullStruct.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'custom_object', (JavaObject, JavaObject.thrift_spec), None, ), # 6
    (7, TType.STRING, 'custom_serialized', None, None, ), # 7
    (8, TType.STRUCT, 'local_or_shuffle', (NullStruct, NullStruct.thrift_spec), None, ), # 8
  )

  def __init__(self, fields=None, shuffle=None, all=None, none=None, direct=None, custom_object=None, custom_serialized=None, local_or_shuffle=None,):
    self.fields = fields
    self.shuffle = shuffle
    self.all = all
    self.none = none
    self.direct = direct
    self.custom_object = custom_object
    self.custom_serialized = custom_serialized
    self.local_or_shuffle = local_or_shuffle

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.fields = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readString().decode('utf-8')
            self.fields.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.shuffle = NullStruct()
          self.shuffle.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.all = NullStruct()
          self.all.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.none = NullStruct()
          self.none.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.direct = NullStruct()
          self.direct.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.custom_object = JavaObject()
          self.custom_object.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.custom_serialized = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRUCT:
          self.local_or_shuffle = NullStruct()
          self.local_or_shuffle.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Grouping')
    if self.fields is not None:
      oprot.writeFieldBegin('fields', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.fields))
      for iter13 in self.fields:
        oprot.writeString(iter13.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.shuffle is not None:
      oprot.writeFieldBegin('shuffle', TType.STRUCT, 2)
      self.shuffle.write(oprot)
      oprot.writeFieldEnd()
    if self.all is not None:
      oprot.writeFieldBegin('all', TType.STRUCT, 3)
      self.all.write(oprot)
      oprot.writeFieldEnd()
    if self.none is not None:
      oprot.writeFieldBegin('none', TType.STRUCT, 4)
      self.none.write(oprot)
      oprot.writeFieldEnd()
    if self.direct is not None:
      oprot.writeFieldBegin('direct', TType.STRUCT, 5)
      self.direct.write(oprot)
      oprot.writeFieldEnd()
    if self.custom_object is not None:
      oprot.writeFieldBegin('custom_object', TType.STRUCT, 6)
      self.custom_object.write(oprot)
      oprot.writeFieldEnd()
    if self.custom_serialized is not None:
      oprot.writeFieldBegin('custom_serialized', TType.STRING, 7)
      oprot.writeString(self.custom_serialized)
      oprot.writeFieldEnd()
    if self.local_or_shuffle is not None:
      oprot.writeFieldBegin('local_or_shuffle', TType.STRUCT, 8)
      self.local_or_shuffle.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.fields)
    value = (value * 31) ^ hash(self.shuffle)
    value = (value * 31) ^ hash(self.all)
    value = (value * 31) ^ hash(self.none)
    value = (value * 31) ^ hash(self.direct)
    value = (value * 31) ^ hash(self.custom_object)
    value = (value * 31) ^ hash(self.custom_serialized)
    value = (value * 31) ^ hash(self.local_or_shuffle)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StreamInfo:
  """
  Attributes:
   - output_fields
   - direct
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'output_fields', (TType.STRING,None), None, ), # 1
    (2, TType.BOOL, 'direct', None, None, ), # 2
  )

  def __init__(self, output_fields=None, direct=None,):
    self.output_fields = output_fields
    self.direct = direct

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.output_fields = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = iprot.readString().decode('utf-8')
            self.output_fields.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.direct = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StreamInfo')
    if self.output_fields is not None:
      oprot.writeFieldBegin('output_fields', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.output_fields))
      for iter20 in self.output_fields:
        oprot.writeString(iter20.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.direct is not None:
      oprot.writeFieldBegin('direct', TType.BOOL, 2)
      oprot.writeBool(self.direct)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.output_fields is None:
      raise TProtocol.TProtocolException(message='Required field output_fields is unset!')
    if self.direct is None:
      raise TProtocol.TProtocolException(message='Required field direct is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.output_fields)
    value = (value * 31) ^ hash(self.direct)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ShellComponent:
  """
  Attributes:
   - execution_command
   - script
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'execution_command', None, None, ), # 1
    (2, TType.STRING, 'script', None, None, ), # 2
  )

  def __init__(self, execution_command=None, script=None,):
    self.execution_command = execution_command
    self.script = script

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.execution_command = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.script = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ShellComponent')
    if self.execution_command is not None:
      oprot.writeFieldBegin('execution_command', TType.STRING, 1)
      oprot.writeString(self.execution_command.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.script is not None:
      oprot.writeFieldBegin('script', TType.STRING, 2)
      oprot.writeString(self.script.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.execution_command)
    value = (value * 31) ^ hash(self.script)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ComponentObject:
  """
  Attributes:
   - serialized_java
   - shell
   - java_object
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'serialized_java', None, None, ), # 1
    (2, TType.STRUCT, 'shell', (ShellComponent, ShellComponent.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'java_object', (JavaObject, JavaObject.thrift_spec), None, ), # 3
  )

  def __init__(self, serialized_java=None, shell=None, java_object=None,):
    self.serialized_java = serialized_java
    self.shell = shell
    self.java_object = java_object

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.serialized_java = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.shell = ShellComponent()
          self.shell.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.java_object = JavaObject()
          self.java_object.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ComponentObject')
    if self.serialized_java is not None:
      oprot.writeFieldBegin('serialized_java', TType.STRING, 1)
      oprot.writeString(self.serialized_java)
      oprot.writeFieldEnd()
    if self.shell is not None:
      oprot.writeFieldBegin('shell', TType.STRUCT, 2)
      self.shell.write(oprot)
      oprot.writeFieldEnd()
    if self.java_object is not None:
      oprot.writeFieldBegin('java_object', TType.STRUCT, 3)
      self.java_object.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.serialized_java)
    value = (value * 31) ^ hash(self.shell)
    value = (value * 31) ^ hash(self.java_object)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ComponentCommon:
  """
  Attributes:
   - inputs
   - streams
   - parallelism_hint
   - json_conf
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'inputs', (TType.STRUCT,(GlobalStreamId, GlobalStreamId.thrift_spec),TType.STRUCT,(Grouping, Grouping.thrift_spec)), None, ), # 1
    (2, TType.MAP, 'streams', (TType.STRING,None,TType.STRUCT,(StreamInfo, StreamInfo.thrift_spec)), None, ), # 2
    (3, TType.I32, 'parallelism_hint', None, None, ), # 3
    (4, TType.STRING, 'json_conf', None, None, ), # 4
  )

  def __init__(self, inputs=None, streams=None, parallelism_hint=None, json_conf=None,):
    self.inputs = inputs
    self.streams = streams
    self.parallelism_hint = parallelism_hint
    self.json_conf = json_conf

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.inputs = {}
          (_ktype22, _vtype23, _size21 ) = iprot.readMapBegin()
          for _i25 in xrange(_size21):
            _key26 = GlobalStreamId()
            _key26.read(iprot)
            _val27 = Grouping()
            _val27.read(iprot)
            self.inputs[_key26] = _val27
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.streams = {}
          (_ktype29, _vtype30, _size28 ) = iprot.readMapBegin()
          for _i32 in xrange(_size28):
            _key33 = iprot.readString().decode('utf-8')
            _val34 = StreamInfo()
            _val34.read(iprot)
            self.streams[_key33] = _val34
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.parallelism_hint = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.json_conf = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ComponentCommon')
    if self.inputs is not None:
      oprot.writeFieldBegin('inputs', TType.MAP, 1)
      oprot.writeMapBegin(TType.STRUCT, TType.STRUCT, len(self.inputs))
      for kiter35,viter36 in self.inputs.items():
        kiter35.write(oprot)
        viter36.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.streams is not None:
      oprot.writeFieldBegin('streams', TType.MAP, 2)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.streams))
      for kiter37,viter38 in self.streams.items():
        oprot.writeString(kiter37.encode('utf-8'))
        viter38.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.parallelism_hint is not None:
      oprot.writeFieldBegin('parallelism_hint', TType.I32, 3)
      oprot.writeI32(self.parallelism_hint)
      oprot.writeFieldEnd()
    if self.json_conf is not None:
      oprot.writeFieldBegin('json_conf', TType.STRING, 4)
      oprot.writeString(self.json_conf.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.inputs is None:
      raise TProtocol.TProtocolException(message='Required field inputs is unset!')
    if self.streams is None:
      raise TProtocol.TProtocolException(message='Required field streams is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.inputs)
    value = (value * 31) ^ hash(self.streams)
    value = (value * 31) ^ hash(self.parallelism_hint)
    value = (value * 31) ^ hash(self.json_conf)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SpoutSpec:
  """
  Attributes:
   - spout_object
   - common
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'spout_object', (ComponentObject, ComponentObject.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'common', (ComponentCommon, ComponentCommon.thrift_spec), None, ), # 2
  )

  def __init__(self, spout_object=None, common=None,):
    self.spout_object = spout_object
    self.common = common

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.spout_object = ComponentObject()
          self.spout_object.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.common = ComponentCommon()
          self.common.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SpoutSpec')
    if self.spout_object is not None:
      oprot.writeFieldBegin('spout_object', TType.STRUCT, 1)
      self.spout_object.write(oprot)
      oprot.writeFieldEnd()
    if self.common is not None:
      oprot.writeFieldBegin('common', TType.STRUCT, 2)
      self.common.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.spout_object is None:
      raise TProtocol.TProtocolException(message='Required field spout_object is unset!')
    if self.common is None:
      raise TProtocol.TProtocolException(message='Required field common is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.spout_object)
    value = (value * 31) ^ hash(self.common)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Bolt:
  """
  Attributes:
   - bolt_object
   - common
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'bolt_object', (ComponentObject, ComponentObject.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'common', (ComponentCommon, ComponentCommon.thrift_spec), None, ), # 2
  )

  def __init__(self, bolt_object=None, common=None,):
    self.bolt_object = bolt_object
    self.common = common

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.bolt_object = ComponentObject()
          self.bolt_object.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.common = ComponentCommon()
          self.common.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Bolt')
    if self.bolt_object is not None:
      oprot.writeFieldBegin('bolt_object', TType.STRUCT, 1)
      self.bolt_object.write(oprot)
      oprot.writeFieldEnd()
    if self.common is not None:
      oprot.writeFieldBegin('common', TType.STRUCT, 2)
      self.common.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.bolt_object is None:
      raise TProtocol.TProtocolException(message='Required field bolt_object is unset!')
    if self.common is None:
      raise TProtocol.TProtocolException(message='Required field common is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.bolt_object)
    value = (value * 31) ^ hash(self.common)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StateSpoutSpec:
  """
  Attributes:
   - state_spout_object
   - common
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'state_spout_object', (ComponentObject, ComponentObject.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'common', (ComponentCommon, ComponentCommon.thrift_spec), None, ), # 2
  )

  def __init__(self, state_spout_object=None, common=None,):
    self.state_spout_object = state_spout_object
    self.common = common

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.state_spout_object = ComponentObject()
          self.state_spout_object.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.common = ComponentCommon()
          self.common.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StateSpoutSpec')
    if self.state_spout_object is not None:
      oprot.writeFieldBegin('state_spout_object', TType.STRUCT, 1)
      self.state_spout_object.write(oprot)
      oprot.writeFieldEnd()
    if self.common is not None:
      oprot.writeFieldBegin('common', TType.STRUCT, 2)
      self.common.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.state_spout_object is None:
      raise TProtocol.TProtocolException(message='Required field state_spout_object is unset!')
    if self.common is None:
      raise TProtocol.TProtocolException(message='Required field common is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.state_spout_object)
    value = (value * 31) ^ hash(self.common)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SharedMemory:
  """
  Attributes:
   - name
   - on_heap
   - off_heap_worker
   - off_heap_node
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.DOUBLE, 'on_heap', None, None, ), # 2
    (3, TType.DOUBLE, 'off_heap_worker', None, None, ), # 3
    (4, TType.DOUBLE, 'off_heap_node', None, None, ), # 4
  )

  def __init__(self, name=None, on_heap=None, off_heap_worker=None, off_heap_node=None,):
    self.name = name
    self.on_heap = on_heap
    self.off_heap_worker = off_heap_worker
    self.off_heap_node = off_heap_node

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.on_heap = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.off_heap_worker = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.off_heap_node = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SharedMemory')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.on_heap is not None:
      oprot.writeFieldBegin('on_heap', TType.DOUBLE, 2)
      oprot.writeDouble(self.on_heap)
      oprot.writeFieldEnd()
    if self.off_heap_worker is not None:
      oprot.writeFieldBegin('off_heap_worker', TType.DOUBLE, 3)
      oprot.writeDouble(self.off_heap_worker)
      oprot.writeFieldEnd()
    if self.off_heap_node is not None:
      oprot.writeFieldBegin('off_heap_node', TType.DOUBLE, 4)
      oprot.writeDouble(self.off_heap_node)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.name is None:
      raise TProtocol.TProtocolException(message='Required field name is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.on_heap)
    value = (value * 31) ^ hash(self.off_heap_worker)
    value = (value * 31) ^ hash(self.off_heap_node)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StormTopology:
  """
  Attributes:
   - spouts
   - bolts
   - state_spouts
   - storm_version
   - jdk_version
   - component_to_shared_memory
   - shared_memory
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'spouts', (TType.STRING,None,TType.STRUCT,(SpoutSpec, SpoutSpec.thrift_spec)), None, ), # 1
    (2, TType.MAP, 'bolts', (TType.STRING,None,TType.STRUCT,(Bolt, Bolt.thrift_spec)), None, ), # 2
    (3, TType.MAP, 'state_spouts', (TType.STRING,None,TType.STRUCT,(StateSpoutSpec, StateSpoutSpec.thrift_spec)), None, ), # 3
    None, # 4
    None, # 5
    None, # 6
    (7, TType.STRING, 'storm_version', None, None, ), # 7
    (8, TType.STRING, 'jdk_version', None, None, ), # 8
    (9, TType.MAP, 'component_to_shared_memory', (TType.STRING,None,TType.SET,(TType.STRING,None)), None, ), # 9
    (10, TType.MAP, 'shared_memory', (TType.STRING,None,TType.STRUCT,(SharedMemory, SharedMemory.thrift_spec)), None, ), # 10
  )

  def __init__(self, spouts=None, bolts=None, state_spouts=None, storm_version=None, jdk_version=None, component_to_shared_memory=None, shared_memory=None,):
    self.spouts = spouts
    self.bolts = bolts
    self.state_spouts = state_spouts
    self.storm_version = storm_version
    self.jdk_version = jdk_version
    self.component_to_shared_memory = component_to_shared_memory
    self.shared_memory = shared_memory

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.spouts = {}
          (_ktype40, _vtype41, _size39 ) = iprot.readMapBegin()
          for _i43 in xrange(_size39):
            _key44 = iprot.readString().decode('utf-8')
            _val45 = SpoutSpec()
            _val45.read(iprot)
            self.spouts[_key44] = _val45
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.bolts = {}
          (_ktype47, _vtype48, _size46 ) = iprot.readMapBegin()
          for _i50 in xrange(_size46):
            _key51 = iprot.readString().decode('utf-8')
            _val52 = Bolt()
            _val52.read(iprot)
            self.bolts[_key51] = _val52
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.state_spouts = {}
          (_ktype54, _vtype55, _size53 ) = iprot.readMapBegin()
          for _i57 in xrange(_size53):
            _key58 = iprot.readString().decode('utf-8')
            _val59 = StateSpoutSpec()
            _val59.read(iprot)
            self.state_spouts[_key58] = _val59
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.storm_version = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.jdk_version = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.MAP:
          self.component_to_shared_memory = {}
          (_ktype61, _vtype62, _size60 ) = iprot.readMapBegin()
          for _i64 in xrange(_size60):
            _key65 = iprot.readString().decode('utf-8')
            _val66 = set()
            (_etype70, _size67) = iprot.readSetBegin()
            for _i71 in xrange(_size67):
              _elem72 = iprot.readString().decode('utf-8')
              _val66.add(_elem72)
            iprot.readSetEnd()
            self.component_to_shared_memory[_key65] = _val66
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.MAP:
          self.shared_memory = {}
          (_ktype74, _vtype75, _size73 ) = iprot.readMapBegin()
          for _i77 in xrange(_size73):
            _key78 = iprot.readString().decode('utf-8')
            _val79 = SharedMemory()
            _val79.read(iprot)
            self.shared_memory[_key78] = _val79
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StormTopology')
    if self.spouts is not None:
      oprot.writeFieldBegin('spouts', TType.MAP, 1)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.spouts))
      for kiter80,viter81 in self.spouts.items():
        oprot.writeString(kiter80.encode('utf-8'))
        viter81.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.bolts is not None:
      oprot.writeFieldBegin('bolts', TType.MAP, 2)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.bolts))
      for kiter82,viter83 in self.bolts.items():
        oprot.writeString(kiter82.encode('utf-8'))
        viter83.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.state_spouts is not None:
      oprot.writeFieldBegin('state_spouts', TType.MAP, 3)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.state_spouts))
      for kiter84,viter85 in self.state_spouts.items():
        oprot.writeString(kiter84.encode('utf-8'))
        viter85.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.storm_version is not None:
      oprot.writeFieldBegin('storm_version', TType.STRING, 7)
      oprot.writeString(self.storm_version.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jdk_version is not None:
      oprot.writeFieldBegin('jdk_version', TType.STRING, 8)
      oprot.writeString(self.jdk_version.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.component_to_shared_memory is not None:
      oprot.writeFieldBegin('component_to_shared_memory', TType.MAP, 9)
      oprot.writeMapBegin(TType.STRING, TType.SET, len(self.component_to_shared_memory))
      for kiter86,viter87 in self.component_to_shared_memory.items():
        oprot.writeString(kiter86.encode('utf-8'))
        oprot.writeSetBegin(TType.STRING, len(viter87))
        for iter88 in viter87:
          oprot.writeString(iter88.encode('utf-8'))
        oprot.writeSetEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.shared_memory is not None:
      oprot.writeFieldBegin('shared_memory', TType.MAP, 10)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.shared_memory))
      for kiter89,viter90 in self.shared_memory.items():
        oprot.writeString(kiter89.encode('utf-8'))
        viter90.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.spouts is None:
      raise TProtocol.TProtocolException(message='Required field spouts is unset!')
    if self.bolts is None:
      raise TProtocol.TProtocolException(message='Required field bolts is unset!')
    if self.state_spouts is None:
      raise TProtocol.TProtocolException(message='Required field state_spouts is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.spouts)
    value = (value * 31) ^ hash(self.bolts)
    value = (value * 31) ^ hash(self.state_spouts)
    value = (value * 31) ^ hash(self.storm_version)
    value = (value * 31) ^ hash(self.jdk_version)
    value = (value * 31) ^ hash(self.component_to_shared_memory)
    value = (value * 31) ^ hash(self.shared_memory)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AlreadyAliveException(TException):
  """
  Attributes:
   - msg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'msg', None, None, ), # 1
  )

  def __init__(self, msg=None,):
    self.msg = msg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.msg = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AlreadyAliveException')
    if self.msg is not None:
      oprot.writeFieldBegin('msg', TType.STRING, 1)
      oprot.writeString(self.msg.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.msg is None:
      raise TProtocol.TProtocolException(message='Required field msg is unset!')
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.msg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NotAliveException(TException):
  """
  Attributes:
   - msg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'msg', None, None, ), # 1
  )

  def __init__(self, msg=None,):
    self.msg = msg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.msg = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NotAliveException')
    if self.msg is not None:
      oprot.writeFieldBegin('msg', TType.STRING, 1)
      oprot.writeString(self.msg.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.msg is None:
      raise TProtocol.TProtocolException(message='Required field msg is unset!')
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.msg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AuthorizationException(TException):
  """
  Attributes:
   - msg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'msg', None, None, ), # 1
  )

  def __init__(self, msg=None,):
    self.msg = msg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.msg = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AuthorizationException')
    if self.msg is not None:
      oprot.writeFieldBegin('msg', TType.STRING, 1)
      oprot.writeString(self.msg.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.msg is None:
      raise TProtocol.TProtocolException(message='Required field msg is unset!')
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.msg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class InvalidTopologyException(TException):
  """
  Attributes:
   - msg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'msg', None, None, ), # 1
  )

  def __init__(self, msg=None,):
    self.msg = msg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.msg = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('InvalidTopologyException')
    if self.msg is not None:
      oprot.writeFieldBegin('msg', TType.STRING, 1)
      oprot.writeString(self.msg.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.msg is None:
      raise TProtocol.TProtocolException(message='Required field msg is unset!')
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.msg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class KeyNotFoundException(TException):
  """
  Attributes:
   - msg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'msg', None, None, ), # 1
  )

  def __init__(self, msg=None,):
    self.msg = msg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.msg = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('KeyNotFoundException')
    if self.msg is not None:
      oprot.writeFieldBegin('msg', TType.STRING, 1)
      oprot.writeString(self.msg.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.msg is None:
      raise TProtocol.TProtocolException(message='Required field msg is unset!')
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.msg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class KeyAlreadyExistsException(TException):
  """
  Attributes:
   - msg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'msg', None, None, ), # 1
  )

  def __init__(self, msg=None,):
    self.msg = msg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.msg = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('KeyAlreadyExistsException')
    if self.msg is not None:
      oprot.writeFieldBegin('msg', TType.STRING, 1)
      oprot.writeString(self.msg.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.msg is None:
      raise TProtocol.TProtocolException(message='Required field msg is unset!')
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.msg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TopologySummary:
  """
  Attributes:
   - id
   - name
   - num_tasks
   - num_executors
   - num_workers
   - uptime_secs
   - status
   - topology_version
   - sched_status
   - owner
   - requested_memonheap
   - requested_memoffheap
   - requested_cpu
   - assigned_memonheap
   - assigned_memoffheap
   - assigned_cpu
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.I32, 'num_tasks', None, None, ), # 3
    (4, TType.I32, 'num_executors', None, None, ), # 4
    (5, TType.I32, 'num_workers', None, None, ), # 5
    (6, TType.I32, 'uptime_secs', None, None, ), # 6
    (7, TType.STRING, 'status', None, None, ), # 7
    None, # 8
    (9, TType.STRING, 'topology_version', None, None, ), # 9
    None, # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    None, # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    None, # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    None, # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    None, # 50
    None, # 51
    None, # 52
    None, # 53
    None, # 54
    None, # 55
    None, # 56
    None, # 57
    None, # 58
    None, # 59
    None, # 60
    None, # 61
    None, # 62
    None, # 63
    None, # 64
    None, # 65
    None, # 66
    None, # 67
    None, # 68
    None, # 69
    None, # 70
    None, # 71
    None, # 72
    None, # 73
    None, # 74
    None, # 75
    None, # 76
    None, # 77
    None, # 78
    None, # 79
    None, # 80
    None, # 81
    None, # 82
    None, # 83
    None, # 84
    None, # 85
    None, # 86
    None, # 87
    None, # 88
    None, # 89
    None, # 90
    None, # 91
    None, # 92
    None, # 93
    None, # 94
    None, # 95
    None, # 96
    None, # 97
    None, # 98
    None, # 99
    None, # 100
    None, # 101
    None, # 102
    None, # 103
    None, # 104
    None, # 105
    None, # 106
    None, # 107
    None, # 108
    None, # 109
    None, # 110
    None, # 111
    None, # 112
    None, # 113
    None, # 114
    None, # 115
    None, # 116
    None, # 117
    None, # 118
    None, # 119
    None, # 120
    None, # 121
    None, # 122
    None, # 123
    None, # 124
    None, # 125
    None, # 126
    None, # 127
    None, # 128
    None, # 129
    None, # 130
    None, # 131
    None, # 132
    None, # 133
    None, # 134
    None, # 135
    None, # 136
    None, # 137
    None, # 138
    None, # 139
    None, # 140
    None, # 141
    None, # 142
    None, # 143
    None, # 144
    None, # 145
    None, # 146
    None, # 147
    None, # 148
    None, # 149
    None, # 150
    None, # 151
    None, # 152
    None, # 153
    None, # 154
    None, # 155
    None, # 156
    None, # 157
    None, # 158
    None, # 159
    None, # 160
    None, # 161
    None, # 162
    None, # 163
    None, # 164
    None, # 165
    None, # 166
    None, # 167
    None, # 168
    None, # 169
    None, # 170
    None, # 171
    None, # 172
    None, # 173
    None, # 174
    None, # 175
    None, # 176
    None, # 177
    None, # 178
    None, # 179
    None, # 180
    None, # 181
    None, # 182
    None, # 183
    None, # 184
    None, # 185
    None, # 186
    None, # 187
    None, # 188
    None, # 189
    None, # 190
    None, # 191
    None, # 192
    None, # 193
    None, # 194
    None, # 195
    None, # 196
    None, # 197
    None, # 198
    None, # 199
    None, # 200
    None, # 201
    None, # 202
    None, # 203
    None, # 204
    None, # 205
    None, # 206
    None, # 207
    None, # 208
    None, # 209
    None, # 210
    None, # 211
    None, # 212
    None, # 213
    None, # 214
    None, # 215
    None, # 216
    None, # 217
    None, # 218
    None, # 219
    None, # 220
    None, # 221
    None, # 222
    None, # 223
    None, # 224
    None, # 225
    None, # 226
    None, # 227
    None, # 228
    None, # 229
    None, # 230
    None, # 231
    None, # 232
    None, # 233
    None, # 234
    None, # 235
    None, # 236
    None, # 237
    None, # 238
    None, # 239
    None, # 240
    None, # 241
    None, # 242
    None, # 243
    None, # 244
    None, # 245
    None, # 246
    None, # 247
    None, # 248
    None, # 249
    None, # 250
    None, # 251
    None, # 252
    None, # 253
    None, # 254
    None, # 255
    None, # 256
    None, # 257
    None, # 258
    None, # 259
    None, # 260
    None, # 261
    None, # 262
    None, # 263
    None, # 264
    None, # 265
    None, # 266
    None, # 267
    None, # 268
    None, # 269
    None, # 270
    None, # 271
    None, # 272
    None, # 273
    None, # 274
    None, # 275
    None, # 276
    None, # 277
    None, # 278
    None, # 279
    None, # 280
    None, # 281
    None, # 282
    None, # 283
    None, # 284
    None, # 285
    None, # 286
    None, # 287
    None, # 288
    None, # 289
    None, # 290
    None, # 291
    None, # 292
    None, # 293
    None, # 294
    None, # 295
    None, # 296
    None, # 297
    None, # 298
    None, # 299
    None, # 300
    None, # 301
    None, # 302
    None, # 303
    None, # 304
    None, # 305
    None, # 306
    None, # 307
    None, # 308
    None, # 309
    None, # 310
    None, # 311
    None, # 312
    None, # 313
    None, # 314
    None, # 315
    None, # 316
    None, # 317
    None, # 318
    None, # 319
    None, # 320
    None, # 321
    None, # 322
    None, # 323
    None, # 324
    None, # 325
    None, # 326
    None, # 327
    None, # 328
    None, # 329
    None, # 330
    None, # 331
    None, # 332
    None, # 333
    None, # 334
    None, # 335
    None, # 336
    None, # 337
    None, # 338
    None, # 339
    None, # 340
    None, # 341
    None, # 342
    None, # 343
    None, # 344
    None, # 345
    None, # 346
    None, # 347
    None, # 348
    None, # 349
    None, # 350
    None, # 351
    None, # 352
    None, # 353
    None, # 354
    None, # 355
    None, # 356
    None, # 357
    None, # 358
    None, # 359
    None, # 360
    None, # 361
    None, # 362
    None, # 363
    None, # 364
    None, # 365
    None, # 366
    None, # 367
    None, # 368
    None, # 369
    None, # 370
    None, # 371
    None, # 372
    None, # 373
    None, # 374
    None, # 375
    None, # 376
    None, # 377
    None, # 378
    None, # 379
    None, # 380
    None, # 381
    None, # 382
    None, # 383
    None, # 384
    None, # 385
    None, # 386
    None, # 387
    None, # 388
    None, # 389
    None, # 390
    None, # 391
    None, # 392
    None, # 393
    None, # 394
    None, # 395
    None, # 396
    None, # 397
    None, # 398
    None, # 399
    None, # 400
    None, # 401
    None, # 402
    None, # 403
    None, # 404
    None, # 405
    None, # 406
    None, # 407
    None, # 408
    None, # 409
    None, # 410
    None, # 411
    None, # 412
    None, # 413
    None, # 414
    None, # 415
    None, # 416
    None, # 417
    None, # 418
    None, # 419
    None, # 420
    None, # 421
    None, # 422
    None, # 423
    None, # 424
    None, # 425
    None, # 426
    None, # 427
    None, # 428
    None, # 429
    None, # 430
    None, # 431
    None, # 432
    None, # 433
    None, # 434
    None, # 435
    None, # 436
    None, # 437
    None, # 438
    None, # 439
    None, # 440
    None, # 441
    None, # 442
    None, # 443
    None, # 444
    None, # 445
    None, # 446
    None, # 447
    None, # 448
    None, # 449
    None, # 450
    None, # 451
    None, # 452
    None, # 453
    None, # 454
    None, # 455
    None, # 456
    None, # 457
    None, # 458
    None, # 459
    None, # 460
    None, # 461
    None, # 462
    None, # 463
    None, # 464
    None, # 465
    None, # 466
    None, # 467
    None, # 468
    None, # 469
    None, # 470
    None, # 471
    None, # 472
    None, # 473
    None, # 474
    None, # 475
    None, # 476
    None, # 477
    None, # 478
    None, # 479
    None, # 480
    None, # 481
    None, # 482
    None, # 483
    None, # 484
    None, # 485
    None, # 486
    None, # 487
    None, # 488
    None, # 489
    None, # 490
    None, # 491
    None, # 492
    None, # 493
    None, # 494
    None, # 495
    None, # 496
    None, # 497
    None, # 498
    None, # 499
    None, # 500
    None, # 501
    None, # 502
    None, # 503
    None, # 504
    None, # 505
    None, # 506
    None, # 507
    None, # 508
    None, # 509
    None, # 510
    None, # 511
    None, # 512
    (513, TType.STRING, 'sched_status', None, None, ), # 513
    (514, TType.STRING, 'owner', None, None, ), # 514
    None, # 515
    None, # 516
    None, # 517
    None, # 518
    None, # 519
    None, # 520
    (521, TType.DOUBLE, 'requested_memonheap', None, None, ), # 521
    (522, TType.DOUBLE, 'requested_memoffheap', None, None, ), # 522
    (523, TType.DOUBLE, 'requested_cpu', None, None, ), # 523
    (524, TType.DOUBLE, 'assigned_memonheap', None, None, ), # 524
    (525, TType.DOUBLE, 'assigned_memoffheap', None, None, ), # 525
    (526, TType.DOUBLE, 'assigned_cpu', None, None, ), # 526
  )

  def __init__(self, id=None, name=None, num_tasks=None, num_executors=None, num_workers=None, uptime_secs=None, status=None, topology_version=None, sched_status=None, owner=None, requested_memonheap=None, requested_memoffheap=None, requested_cpu=None, assigned_memonheap=None, assigned_memoffheap=None, assigned_cpu=None,):
    self.id = id
    self.name = name
    self.num_tasks = num_tasks
    self.num_executors = num_executors
    self.num_workers = num_workers
    self.uptime_secs = uptime_secs
    self.status = status
    self.topology_version = topology_version
    self.sched_status = sched_status
    self.owner = owner
    self.requested_memonheap = requested_memonheap
    self.requested_memoffheap = requested_memoffheap
    self.requested_cpu = requested_cpu
    self.assigned_memonheap = assigned_memonheap
    self.assigned_memoffheap = assigned_memoffheap
    self.assigned_cpu = assigned_cpu

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.num_tasks = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.num_executors = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.num_workers = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.uptime_secs = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.status = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.topology_version = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 513:
        if ftype == TType.STRING:
          self.sched_status = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 514:
        if ftype == TType.STRING:
          self.owner = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 521:
        if ftype == TType.DOUBLE:
          self.requested_memonheap = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 522:
        if ftype == TType.DOUBLE:
          self.requested_memoffheap = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 523:
        if ftype == TType.DOUBLE:
          self.requested_cpu = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 524:
        if ftype == TType.DOUBLE:
          self.assigned_memonheap = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 525:
        if ftype == TType.DOUBLE:
          self.assigned_memoffheap = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 526:
        if ftype == TType.DOUBLE:
          self.assigned_cpu = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TopologySummary')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.num_tasks is not None:
      oprot.writeFieldBegin('num_tasks', TType.I32, 3)
      oprot.writeI32(self.num_tasks)
      oprot.writeFieldEnd()
    if self.num_executors is not None:
      oprot.writeFieldBegin('num_executors', TType.I32, 4)
      oprot.writeI32(self.num_executors)
      oprot.writeFieldEnd()
    if self.num_workers is not None:
      oprot.writeFieldBegin('num_workers', TType.I32, 5)
      oprot.writeI32(self.num_workers)
      oprot.writeFieldEnd()
    if self.uptime_secs is not None:
      oprot.writeFieldBegin('uptime_secs', TType.I32, 6)
      oprot.writeI32(self.uptime_secs)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRING, 7)
      oprot.writeString(self.status.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.topology_version is not None:
      oprot.writeFieldBegin('topology_version', TType.STRING, 9)
      oprot.writeString(self.topology_version.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.sched_status is not None:
      oprot.writeFieldBegin('sched_status', TType.STRING, 513)
      oprot.writeString(self.sched_status.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.owner is not None:
      oprot.writeFieldBegin('owner', TType.STRING, 514)
      oprot.writeString(self.owner.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.requested_memonheap is not None:
      oprot.writeFieldBegin('requested_memonheap', TType.DOUBLE, 521)
      oprot.writeDouble(self.requested_memonheap)
      oprot.writeFieldEnd()
    if self.requested_memoffheap is not None:
      oprot.writeFieldBegin('requested_memoffheap', TType.DOUBLE, 522)
      oprot.writeDouble(self.requested_memoffheap)
      oprot.writeFieldEnd()
    if self.requested_cpu is not None:
      oprot.writeFieldBegin('requested_cpu', TType.DOUBLE, 523)
      oprot.writeDouble(self.requested_cpu)
      oprot.writeFieldEnd()
    if self.assigned_memonheap is not None:
      oprot.writeFieldBegin('assigned_memonheap', TType.DOUBLE, 524)
      oprot.writeDouble(self.assigned_memonheap)
      oprot.writeFieldEnd()
    if self.assigned_memoffheap is not None:
      oprot.writeFieldBegin('assigned_memoffheap', TType.DOUBLE, 525)
      oprot.writeDouble(self.assigned_memoffheap)
      oprot.writeFieldEnd()
    if self.assigned_cpu is not None:
      oprot.writeFieldBegin('assigned_cpu', TType.DOUBLE, 526)
      oprot.writeDouble(self.assigned_cpu)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    if self.name is None:
      raise TProtocol.TProtocolException(message='Required field name is unset!')
    if self.num_tasks is None:
      raise TProtocol.TProtocolException(message='Required field num_tasks is unset!')
    if self.num_executors is None:
      raise TProtocol.TProtocolException(message='Required field num_executors is unset!')
    if self.num_workers is None:
      raise TProtocol.TProtocolException(message='Required field num_workers is unset!')
    if self.uptime_secs is None:
      raise TProtocol.TProtocolException(message='Required field uptime_secs is unset!')
    if self.status is None:
      raise TProtocol.TProtocolException(message='Required field status is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.num_tasks)
    value = (value * 31) ^ hash(self.num_executors)
    value = (value * 31) ^ hash(self.num_workers)
    value = (value * 31) ^ hash(self.uptime_secs)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.topology_version)
    value = (value * 31) ^ hash(self.sched_status)
    value = (value * 31) ^ hash(self.owner)
    value = (value * 31) ^ hash(self.requested_memonheap)
    value = (value * 31) ^ hash(self.requested_memoffheap)
    value = (value * 31) ^ hash(self.requested_cpu)
    value = (value * 31) ^ hash(self.assigned_memonheap)
    value = (value * 31) ^ hash(self.assigned_memoffheap)
    value = (value * 31) ^ hash(self.assigned_cpu)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SupervisorSummary:
  """
  Attributes:
   - host
   - uptime_secs
   - num_workers
   - num_used_workers
   - supervisor_id
   - version
   - total_resources
   - used_mem
   - used_cpu
   - fragmented_mem
   - fragmented_cpu
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'host', None, None, ), # 1
    (2, TType.I32, 'uptime_secs', None, None, ), # 2
    (3, TType.I32, 'num_workers', None, None, ), # 3
    (4, TType.I32, 'num_used_workers', None, None, ), # 4
    (5, TType.STRING, 'supervisor_id', None, None, ), # 5
    (6, TType.STRING, 'version', None, "VERSION_NOT_PROVIDED", ), # 6
    (7, TType.MAP, 'total_resources', (TType.STRING,None,TType.DOUBLE,None), None, ), # 7
    (8, TType.DOUBLE, 'used_mem', None, None, ), # 8
    (9, TType.DOUBLE, 'used_cpu', None, None, ), # 9
    (10, TType.DOUBLE, 'fragmented_mem', None, None, ), # 10
    (11, TType.DOUBLE, 'fragmented_cpu', None, None, ), # 11
  )

  def __init__(self, host=None, uptime_secs=None, num_workers=None, num_used_workers=None, supervisor_id=None, version=thrift_spec[6][4], total_resources=None, used_mem=None, used_cpu=None, fragmented_mem=None, fragmented_cpu=None,):
    self.host = host
    self.uptime_secs = uptime_secs
    self.num_workers = num_workers
    self.num_used_workers = num_used_workers
    self.supervisor_id = supervisor_id
    self.version = version
    self.total_resources = total_resources
    self.used_mem = used_mem
    self.used_cpu = used_cpu
    self.fragmented_mem = fragmented_mem
    self.fragmented_cpu = fragmented_cpu

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.host = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.uptime_secs = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.num_workers = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.num_used_workers = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.supervisor_id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.version = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.MAP:
          self.total_resources = {}
          (_ktype92, _vtype93, _size91 ) = iprot.readMapBegin()
          for _i95 in xrange(_size91):
            _key96 = iprot.readString().decode('utf-8')
            _val97 = iprot.readDouble()
            self.total_resources[_key96] = _val97
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.used_mem = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.used_cpu = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.DOUBLE:
          self.fragmented_mem = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.DOUBLE:
          self.fragmented_cpu = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SupervisorSummary')
    if self.host is not None:
      oprot.writeFieldBegin('host', TType.STRING, 1)
      oprot.writeString(self.host.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.uptime_secs is not None:
      oprot.writeFieldBegin('uptime_secs', TType.I32, 2)
      oprot.writeI32(self.uptime_secs)
      oprot.writeFieldEnd()
    if self.num_workers is not None:
      oprot.writeFieldBegin('num_workers', TType.I32, 3)
      oprot.writeI32(self.num_workers)
      oprot.writeFieldEnd()
    if self.num_used_workers is not None:
      oprot.writeFieldBegin('num_used_workers', TType.I32, 4)
      oprot.writeI32(self.num_used_workers)
      oprot.writeFieldEnd()
    if self.supervisor_id is not None:
      oprot.writeFieldBegin('supervisor_id', TType.STRING, 5)
      oprot.writeString(self.supervisor_id.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.STRING, 6)
      oprot.writeString(self.version.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.total_resources is not None:
      oprot.writeFieldBegin('total_resources', TType.MAP, 7)
      oprot.writeMapBegin(TType.STRING, TType.DOUBLE, len(self.total_resources))
      for kiter98,viter99 in self.total_resources.items():
        oprot.writeString(kiter98.encode('utf-8'))
        oprot.writeDouble(viter99)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.used_mem is not None:
      oprot.writeFieldBegin('used_mem', TType.DOUBLE, 8)
      oprot.writeDouble(self.used_mem)
      oprot.writeFieldEnd()
    if self.used_cpu is not None:
      oprot.writeFieldBegin('used_cpu', TType.DOUBLE, 9)
      oprot.writeDouble(self.used_cpu)
      oprot.writeFieldEnd()
    if self.fragmented_mem is not None:
      oprot.writeFieldBegin('fragmented_mem', TType.DOUBLE, 10)
      oprot.writeDouble(self.fragmented_mem)
      oprot.writeFieldEnd()
    if self.fragmented_cpu is not None:
      oprot.writeFieldBegin('fragmented_cpu', TType.DOUBLE, 11)
      oprot.writeDouble(self.fragmented_cpu)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.host is None:
      raise TProtocol.TProtocolException(message='Required field host is unset!')
    if self.uptime_secs is None:
      raise TProtocol.TProtocolException(message='Required field uptime_secs is unset!')
    if self.num_workers is None:
      raise TProtocol.TProtocolException(message='Required field num_workers is unset!')
    if self.num_used_workers is None:
      raise TProtocol.TProtocolException(message='Required field num_used_workers is unset!')
    if self.supervisor_id is None:
      raise TProtocol.TProtocolException(message='Required field supervisor_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.host)
    value = (value * 31) ^ hash(self.uptime_secs)
    value = (value * 31) ^ hash(self.num_workers)
    value = (value * 31) ^ hash(self.num_used_workers)
    value = (value * 31) ^ hash(self.supervisor_id)
    value = (value * 31) ^ hash(self.version)
    value = (value * 31) ^ hash(self.total_resources)
    value = (value * 31) ^ hash(self.used_mem)
    value = (value * 31) ^ hash(self.used_cpu)
    value = (value * 31) ^ hash(self.fragmented_mem)
    value = (value * 31) ^ hash(self.fragmented_cpu)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ClusterSummary:
  """
  Attributes:
   - supervisors
   - nimbus_uptime_secs
   - topologies
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'supervisors', (TType.STRUCT,(SupervisorSummary, SupervisorSummary.thrift_spec)), None, ), # 1
    (2, TType.I32, 'nimbus_uptime_secs', None, None, ), # 2
    (3, TType.LIST, 'topologies', (TType.STRUCT,(TopologySummary, TopologySummary.thrift_spec)), None, ), # 3
  )

  def __init__(self, supervisors=None, nimbus_uptime_secs=None, topologies=None,):
    self.supervisors = supervisors
    self.nimbus_uptime_secs = nimbus_uptime_secs
    self.topologies = topologies

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.supervisors = []
          (_etype103, _size100) = iprot.readListBegin()
          for _i104 in xrange(_size100):
            _elem105 = SupervisorSummary()
            _elem105.read(iprot)
            self.supervisors.append(_elem105)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.nimbus_uptime_secs = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.topologies = []
          (_etype109, _size106) = iprot.readListBegin()
          for _i110 in xrange(_size106):
            _elem111 = TopologySummary()
            _elem111.read(iprot)
            self.topologies.append(_elem111)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ClusterSummary')
    if self.supervisors is not None:
      oprot.writeFieldBegin('supervisors', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.supervisors))
      for iter112 in self.supervisors:
        iter112.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.nimbus_uptime_secs is not None:
      oprot.writeFieldBegin('nimbus_uptime_secs', TType.I32, 2)
      oprot.writeI32(self.nimbus_uptime_secs)
      oprot.writeFieldEnd()
    if self.topologies is not None:
      oprot.writeFieldBegin('topologies', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.topologies))
      for iter113 in self.topologies:
        iter113.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.supervisors is None:
      raise TProtocol.TProtocolException(message='Required field supervisors is unset!')
    if self.nimbus_uptime_secs is None:
      raise TProtocol.TProtocolException(message='Required field nimbus_uptime_secs is unset!')
    if self.topologies is None:
      raise TProtocol.TProtocolException(message='Required field topologies is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.supervisors)
    value = (value * 31) ^ hash(self.nimbus_uptime_secs)
    value = (value * 31) ^ hash(self.topologies)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ErrorInfo:
  """
  Attributes:
   - error
   - error_time_secs
   - host
   - port
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'error', None, None, ), # 1
    (2, TType.I32, 'error_time_secs', None, None, ), # 2
    (3, TType.STRING, 'host', None, None, ), # 3
    (4, TType.I32, 'port', None, None, ), # 4
  )

  def __init__(self, error=None, error_time_secs=None, host=None, port=None,):
    self.error = error
    self.error_time_secs = error_time_secs
    self.host = host
    self.port = port

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.error = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.error_time_secs = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.host = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.port = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ErrorInfo')
    if self.error is not None:
      oprot.writeFieldBegin('error', TType.STRING, 1)
      oprot.writeString(self.error.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.error_time_secs is not None:
      oprot.writeFieldBegin('error_time_secs', TType.I32, 2)
      oprot.writeI32(self.error_time_secs)
      oprot.writeFieldEnd()
    if self.host is not None:
      oprot.writeFieldBegin('host', TType.STRING, 3)
      oprot.writeString(self.host.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.port is not None:
      oprot.writeFieldBegin('port', TType.I32, 4)
      oprot.writeI32(self.port)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.error is None:
      raise TProtocol.TProtocolException(message='Required field error is unset!')
    if self.error_time_secs is None:
      raise TProtocol.TProtocolException(message='Required field error_time_secs is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.error)
    value = (value * 31) ^ hash(self.error_time_secs)
    value = (value * 31) ^ hash(self.host)
    value = (value * 31) ^ hash(self.port)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BoltStats:
  """
  Attributes:
   - acked
   - failed
   - process_ms_avg
   - executed
   - execute_ms_avg
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'acked', (TType.STRING,None,TType.MAP,(TType.STRUCT,(GlobalStreamId, GlobalStreamId.thrift_spec),TType.I64,None)), None, ), # 1
    (2, TType.MAP, 'failed', (TType.STRING,None,TType.MAP,(TType.STRUCT,(GlobalStreamId, GlobalStreamId.thrift_spec),TType.I64,None)), None, ), # 2
    (3, TType.MAP, 'process_ms_avg', (TType.STRING,None,TType.MAP,(TType.STRUCT,(GlobalStreamId, GlobalStreamId.thrift_spec),TType.DOUBLE,None)), None, ), # 3
    (4, TType.MAP, 'executed', (TType.STRING,None,TType.MAP,(TType.STRUCT,(GlobalStreamId, GlobalStreamId.thrift_spec),TType.I64,None)), None, ), # 4
    (5, TType.MAP, 'execute_ms_avg', (TType.STRING,None,TType.MAP,(TType.STRUCT,(GlobalStreamId, GlobalStreamId.thrift_spec),TType.DOUBLE,None)), None, ), # 5
  )

  def __init__(self, acked=None, failed=None, process_ms_avg=None, executed=None, execute_ms_avg=None,):
    self.acked = acked
    self.failed = failed
    self.process_ms_avg = process_ms_avg
    self.executed = executed
    self.execute_ms_avg = execute_ms_avg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.acked = {}
          (_ktype115, _vtype116, _size114 ) = iprot.readMapBegin()
          for _i118 in xrange(_size114):
            _key119 = iprot.readString().decode('utf-8')
            _val120 = {}
            (_ktype122, _vtype123, _size121 ) = iprot.readMapBegin()
            for _i125 in xrange(_size121):
              _key126 = GlobalStreamId()
              _key126.read(iprot)
              _val127 = iprot.readI64()
              _val120[_key126] = _val127
            iprot.readMapEnd()
            self.acked[_key119] = _val120
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.failed = {}
          (_ktype129, _vtype130, _size128 ) = iprot.readMapBegin()
          for _i132 in xrange(_size128):
            _key133 = iprot.readString().decode('utf-8')
            _val134 = {}
            (_ktype136, _vtype137, _size135 ) = iprot.readMapBegin()
            for _i139 in xrange(_size135):
              _key140 = GlobalStreamId()
              _key140.read(iprot)
              _val141 = iprot.readI64()
              _val134[_key140] = _val141
            iprot.readMapEnd()
            self.failed[_key133] = _val134
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.process_ms_avg = {}
          (_ktype143, _vtype144, _size142 ) = iprot.readMapBegin()
          for _i146 in xrange(_size142):
            _key147 = iprot.readString().decode('utf-8')
            _val148 = {}
            (_ktype150, _vtype151, _size149 ) = iprot.readMapBegin()
            for _i153 in xrange(_size149):
              _key154 = GlobalStreamId()
              _key154.read(iprot)
              _val155 = iprot.readDouble()
              _val148[_key154] = _val155
            iprot.readMapEnd()
            self.process_ms_avg[_key147] = _val148
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.executed = {}
          (_ktype157, _vtype158, _size156 ) = iprot.readMapBegin()
          for _i160 in xrange(_size156):
            _key161 = iprot.readString().decode('utf-8')
            _val162 = {}
            (_ktype164, _vtype165, _size163 ) = iprot.readMapBegin()
            for _i167 in xrange(_size163):
              _key168 = GlobalStreamId()
              _key168.read(iprot)
              _val169 = iprot.readI64()
              _val162[_key168] = _val169
            iprot.readMapEnd()
            self.executed[_key161] = _val162
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.execute_ms_avg = {}
          (_ktype171, _vtype172, _size170 ) = iprot.readMapBegin()
          for _i174 in xrange(_size170):
            _key175 = iprot.readString().decode('utf-8')
            _val176 = {}
            (_ktype178, _vtype179, _size177 ) = iprot.readMapBegin()
            for _i181 in xrange(_size177):
              _key182 = GlobalStreamId()
              _key182.read(iprot)
              _val183 = iprot.readDouble()
              _val176[_key182] = _val183
            iprot.readMapEnd()
            self.execute_ms_avg[_key175] = _val176
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BoltStats')
    if self.acked is not None:
      oprot.writeFieldBegin('acked', TType.MAP, 1)
      oprot.writeMapBegin(TType.STRING, TType.MAP, len(self.acked))
      for kiter184,viter185 in self.acked.items():
        oprot.writeString(kiter184.encode('utf-8'))
        oprot.writeMapBegin(TType.STRUCT, TType.I64, len(viter185))
        for kiter186,viter187 in viter185.items():
          kiter186.write(oprot)
          oprot.writeI64(viter187)
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.failed is not None:
      oprot.writeFieldBegin('failed', TType.MAP, 2)
      oprot.writeMapBegin(TType.STRING, TType.MAP, len(self.failed))
      for kiter188,viter189 in self.failed.items():
        oprot.writeString(kiter188.encode('utf-8'))
        oprot.writeMapBegin(TType.STRUCT, TType.I64, len(viter189))
        for kiter190,viter191 in viter189.items():
          kiter190.write(oprot)
          oprot.writeI64(viter191)
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.process_ms_avg is not None:
      oprot.writeFieldBegin('process_ms_avg', TType.MAP, 3)
      oprot.writeMapBegin(TType.STRING, TType.MAP, len(self.process_ms_avg))
      for kiter192,viter193 in self.process_ms_avg.items():
        oprot.writeString(kiter192.encode('utf-8'))
        oprot.writeMapBegin(TType.STRUCT, TType.DOUBLE, len(viter193))
        for kiter194,viter195 in viter193.items():
          kiter194.write(oprot)
          oprot.writeDouble(viter195)
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.executed is not None:
      oprot.writeFieldBegin('executed', TType.MAP, 4)
      oprot.writeMapBegin(TType.STRING, TType.MAP, len(self.executed))
      for kiter196,viter197 in self.executed.items():
        oprot.writeString(kiter196.encode('utf-8'))
        oprot.writeMapBegin(TType.STRUCT, TType.I64, len(viter197))
        for kiter198,viter199 in viter197.items():
          kiter198.write(oprot)
          oprot.writeI64(viter199)
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.execute_ms_avg is not None:
      oprot.writeFieldBegin('execute_ms_avg', TType.MAP, 5)
      oprot.writeMapBegin(TType.STRING, TType.MAP, len(self.execute_ms_avg))
      for kiter200,viter201 in self.execute_ms_avg.items():
        oprot.writeString(kiter200.encode('utf-8'))
        oprot.writeMapBegin(TType.STRUCT, TType.DOUBLE, len(viter201))
        for kiter202,viter203 in viter201.items():
          kiter202.write(oprot)
          oprot.writeDouble(viter203)
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.acked is None:
      raise TProtocol.TProtocolException(message='Required field acked is unset!')
    if self.failed is None:
      raise TProtocol.TProtocolException(message='Required field failed is unset!')
    if self.process_ms_avg is None:
      raise TProtocol.TProtocolException(message='Required field process_ms_avg is unset!')
    if self.executed is None:
      raise TProtocol.TProtocolException(message='Required field executed is unset!')
    if self.execute_ms_avg is None:
      raise TProtocol.TProtocolException(message='Required field execute_ms_avg is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.acked)
    value = (value * 31) ^ hash(self.failed)
    value = (value * 31) ^ hash(self.process_ms_avg)
    value = (value * 31) ^ hash(self.executed)
    value = (value * 31) ^ hash(self.execute_ms_avg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SpoutStats:
  """
  Attributes:
   - acked
   - failed
   - complete_ms_avg
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'acked', (TType.STRING,None,TType.MAP,(TType.STRING,None,TType.I64,None)), None, ), # 1
    (2, TType.MAP, 'failed', (TType.STRING,None,TType.MAP,(TType.STRING,None,TType.I64,None)), None, ), # 2
    (3, TType.MAP, 'complete_ms_avg', (TType.STRING,None,TType.MAP,(TType.STRING,None,TType.DOUBLE,None)), None, ), # 3
  )

  def __init__(self, acked=None, failed=None, complete_ms_avg=None,):
    self.acked = acked
    self.failed = failed
    self.complete_ms_avg = complete_ms_avg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.acked = {}
          (_ktype205, _vtype206, _size204 ) = iprot.readMapBegin()
          for _i208 in xrange(_size204):
            _key209 = iprot.readString().decode('utf-8')
            _val210 = {}
            (_ktype212, _vtype213, _size211 ) = iprot.readMapBegin()
            for _i215 in xrange(_size211):
              _key216 = iprot.readString().decode('utf-8')
              _val217 = iprot.readI64()
              _val210[_key216] = _val217
            iprot.readMapEnd()
            self.acked[_key209] = _val210
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.failed = {}
          (_ktype219, _vtype220, _size218 ) = iprot.readMapBegin()
          for _i222 in xrange(_size218):
            _key223 = iprot.readString().decode('utf-8')
            _val224 = {}
            (_ktype226, _vtype227, _size225 ) = iprot.readMapBegin()
            for _i229 in xrange(_size225):
              _key230 = iprot.readString().decode('utf-8')
              _val231 = iprot.readI64()
              _val224[_key230] = _val231
            iprot.readMapEnd()
            self.failed[_key223] = _val224
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.complete_ms_avg = {}
          (_ktype233, _vtype234, _size232 ) = iprot.readMapBegin()
          for _i236 in xrange(_size232):
            _key237 = iprot.readString().decode('utf-8')
            _val238 = {}
            (_ktype240, _vtype241, _size239 ) = iprot.readMapBegin()
            for _i243 in xrange(_size239):
              _key244 = iprot.readString().decode('utf-8')
              _val245 = iprot.readDouble()
              _val238[_key244] = _val245
            iprot.readMapEnd()
            self.complete_ms_avg[_key237] = _val238
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SpoutStats')
    if self.acked is not None:
      oprot.writeFieldBegin('acked', TType.MAP, 1)
      oprot.writeMapBegin(TType.STRING, TType.MAP, len(self.acked))
      for kiter246,viter247 in self.acked.items():
        oprot.writeString(kiter246.encode('utf-8'))
        oprot.writeMapBegin(TType.STRING, TType.I64, len(viter247))
        for kiter248,viter249 in viter247.items():
          oprot.writeString(kiter248.encode('utf-8'))
          oprot.writeI64(viter249)
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.failed is not None:
      oprot.writeFieldBegin('failed', TType.MAP, 2)
      oprot.writeMapBegin(TType.STRING, TType.MAP, len(self.failed))
      for kiter250,viter251 in self.failed.items():
        oprot.writeString(kiter250.encode('utf-8'))
        oprot.writeMapBegin(TType.STRING, TType.I64, len(viter251))
        for kiter252,viter253 in viter251.items():
          oprot.writeString(kiter252.encode('utf-8'))
          oprot.writeI64(viter253)
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.complete_ms_avg is not None:
      oprot.writeFieldBegin('complete_ms_avg', TType.MAP, 3)
      oprot.writeMapBegin(TType.STRING, TType.MAP, len(self.complete_ms_avg))
      for kiter254,viter255 in self.complete_ms_avg.items():
        oprot.writeString(kiter254.encode('utf-8'))
        oprot.writeMapBegin(TType.STRING, TType.DOUBLE, len(viter255))
        for kiter256,viter257 in viter255.items():
          oprot.writeString(kiter256.encode('utf-8'))
          oprot.writeDouble(viter257)
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.acked is None:
      raise TProtocol.TProtocolException(message='Required field acked is unset!')
    if self.failed is None:
      raise TProtocol.TProtocolException(message='Required field failed is unset!')
    if self.complete_ms_avg is None:
      raise TProtocol.TProtocolException(message='Required field complete_ms_avg is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.acked)
    value = (value * 31) ^ hash(self.failed)
    value = (value * 31) ^ hash(self.complete_ms_avg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ExecutorSpecificStats:
  """
  Attributes:
   - bolt
   - spout
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'bolt', (BoltStats, BoltStats.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'spout', (SpoutStats, SpoutStats.thrift_spec), None, ), # 2
  )

  def __init__(self, bolt=None, spout=None,):
    self.bolt = bolt
    self.spout = spout

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.bolt = BoltStats()
          self.bolt.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.spout = SpoutStats()
          self.spout.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ExecutorSpecificStats')
    if self.bolt is not None:
      oprot.writeFieldBegin('bolt', TType.STRUCT, 1)
      self.bolt.write(oprot)
      oprot.writeFieldEnd()
    if self.spout is not None:
      oprot.writeFieldBegin('spout', TType.STRUCT, 2)
      self.spout.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.bolt)
    value = (value * 31) ^ hash(self.spout)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ExecutorStats:
  """
  Attributes:
   - emitted
   - transferred
   - specific
   - rate
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'emitted', (TType.STRING,None,TType.MAP,(TType.STRING,None,TType.I64,None)), None, ), # 1
    (2, TType.MAP, 'transferred', (TType.STRING,None,TType.MAP,(TType.STRING,None,TType.I64,None)), None, ), # 2
    (3, TType.STRUCT, 'specific', (ExecutorSpecificStats, ExecutorSpecificStats.thrift_spec), None, ), # 3
    (4, TType.DOUBLE, 'rate', None, None, ), # 4
  )

  def __init__(self, emitted=None, transferred=None, specific=None, rate=None,):
    self.emitted = emitted
    self.transferred = transferred
    self.specific = specific
    self.rate = rate

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.emitted = {}
          (_ktype259, _vtype260, _size258 ) = iprot.readMapBegin()
          for _i262 in xrange(_size258):
            _key263 = iprot.readString().decode('utf-8')
            _val264 = {}
            (_ktype266, _vtype267, _size265 ) = iprot.readMapBegin()
            for _i269 in xrange(_size265):
              _key270 = iprot.readString().decode('utf-8')
              _val271 = iprot.readI64()
              _val264[_key270] = _val271
            iprot.readMapEnd()
            self.emitted[_key263] = _val264
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.transferred = {}
          (_ktype273, _vtype274, _size272 ) = iprot.readMapBegin()
          for _i276 in xrange(_size272):
            _key277 = iprot.readString().decode('utf-8')
            _val278 = {}
            (_ktype280, _vtype281, _size279 ) = iprot.readMapBegin()
            for _i283 in xrange(_size279):
              _key284 = iprot.readString().decode('utf-8')
              _val285 = iprot.readI64()
              _val278[_key284] = _val285
            iprot.readMapEnd()
            self.transferred[_key277] = _val278
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.specific = ExecutorSpecificStats()
          self.specific.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.rate = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ExecutorStats')
    if self.emitted is not None:
      oprot.writeFieldBegin('emitted', TType.MAP, 1)
      oprot.writeMapBegin(TType.STRING, TType.MAP, len(self.emitted))
      for kiter286,viter287 in self.emitted.items():
        oprot.writeString(kiter286.encode('utf-8'))
        oprot.writeMapBegin(TType.STRING, TType.I64, len(viter287))
        for kiter288,viter289 in viter287.items():
          oprot.writeString(kiter288.encode('utf-8'))
          oprot.writeI64(viter289)
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.transferred is not None:
      oprot.writeFieldBegin('transferred', TType.MAP, 2)
      oprot.writeMapBegin(TType.STRING, TType.MAP, len(self.transferred))
      for kiter290,viter291 in self.transferred.items():
        oprot.writeString(kiter290.encode('utf-8'))
        oprot.writeMapBegin(TType.STRING, TType.I64, len(viter291))
        for kiter292,viter293 in viter291.items():
          oprot.writeString(kiter292.encode('utf-8'))
          oprot.writeI64(viter293)
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.specific is not None:
      oprot.writeFieldBegin('specific', TType.STRUCT, 3)
      self.specific.write(oprot)
      oprot.writeFieldEnd()
    if self.rate is not None:
      oprot.writeFieldBegin('rate', TType.DOUBLE, 4)
      oprot.writeDouble(self.rate)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.emitted is None:
      raise TProtocol.TProtocolException(message='Required field emitted is unset!')
    if self.transferred is None:
      raise TProtocol.TProtocolException(message='Required field transferred is unset!')
    if self.specific is None:
      raise TProtocol.TProtocolException(message='Required field specific is unset!')
    if self.rate is None:
      raise TProtocol.TProtocolException(message='Required field rate is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.emitted)
    value = (value * 31) ^ hash(self.transferred)
    value = (value * 31) ^ hash(self.specific)
    value = (value * 31) ^ hash(self.rate)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ExecutorInfo:
  """
  Attributes:
   - task_start
   - task_end
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'task_start', None, None, ), # 1
    (2, TType.I32, 'task_end', None, None, ), # 2
  )

  def __init__(self, task_start=None, task_end=None,):
    self.task_start = task_start
    self.task_end = task_end

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.task_start = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.task_end = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ExecutorInfo')
    if self.task_start is not None:
      oprot.writeFieldBegin('task_start', TType.I32, 1)
      oprot.writeI32(self.task_start)
      oprot.writeFieldEnd()
    if self.task_end is not None:
      oprot.writeFieldBegin('task_end', TType.I32, 2)
      oprot.writeI32(self.task_end)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.task_start is None:
      raise TProtocol.TProtocolException(message='Required field task_start is unset!')
    if self.task_end is None:
      raise TProtocol.TProtocolException(message='Required field task_end is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.task_start)
    value = (value * 31) ^ hash(self.task_end)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ExecutorSummary:
  """
  Attributes:
   - executor_info
   - component_id
   - host
   - port
   - uptime_secs
   - stats
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'executor_info', (ExecutorInfo, ExecutorInfo.thrift_spec), None, ), # 1
    (2, TType.STRING, 'component_id', None, None, ), # 2
    (3, TType.STRING, 'host', None, None, ), # 3
    (4, TType.I32, 'port', None, None, ), # 4
    (5, TType.I32, 'uptime_secs', None, None, ), # 5
    None, # 6
    (7, TType.STRUCT, 'stats', (ExecutorStats, ExecutorStats.thrift_spec), None, ), # 7
  )

  def __init__(self, executor_info=None, component_id=None, host=None, port=None, uptime_secs=None, stats=None,):
    self.executor_info = executor_info
    self.component_id = component_id
    self.host = host
    self.port = port
    self.uptime_secs = uptime_secs
    self.stats = stats

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.executor_info = ExecutorInfo()
          self.executor_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.component_id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.host = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.port = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.uptime_secs = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.stats = ExecutorStats()
          self.stats.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ExecutorSummary')
    if self.executor_info is not None:
      oprot.writeFieldBegin('executor_info', TType.STRUCT, 1)
      self.executor_info.write(oprot)
      oprot.writeFieldEnd()
    if self.component_id is not None:
      oprot.writeFieldBegin('component_id', TType.STRING, 2)
      oprot.writeString(self.component_id.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.host is not None:
      oprot.writeFieldBegin('host', TType.STRING, 3)
      oprot.writeString(self.host.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.port is not None:
      oprot.writeFieldBegin('port', TType.I32, 4)
      oprot.writeI32(self.port)
      oprot.writeFieldEnd()
    if self.uptime_secs is not None:
      oprot.writeFieldBegin('uptime_secs', TType.I32, 5)
      oprot.writeI32(self.uptime_secs)
      oprot.writeFieldEnd()
    if self.stats is not None:
      oprot.writeFieldBegin('stats', TType.STRUCT, 7)
      self.stats.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.executor_info is None:
      raise TProtocol.TProtocolException(message='Required field executor_info is unset!')
    if self.component_id is None:
      raise TProtocol.TProtocolException(message='Required field component_id is unset!')
    if self.host is None:
      raise TProtocol.TProtocolException(message='Required field host is unset!')
    if self.port is None:
      raise TProtocol.TProtocolException(message='Required field port is unset!')
    if self.uptime_secs is None:
      raise TProtocol.TProtocolException(message='Required field uptime_secs is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.executor_info)
    value = (value * 31) ^ hash(self.component_id)
    value = (value * 31) ^ hash(self.host)
    value = (value * 31) ^ hash(self.port)
    value = (value * 31) ^ hash(self.uptime_secs)
    value = (value * 31) ^ hash(self.stats)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TopologyInfo:
  """
  Attributes:
   - id
   - name
   - uptime_secs
   - executors
   - status
   - errors
   - sched_status
   - owner
   - requested_memonheap
   - requested_memoffheap
   - requested_cpu
   - assigned_memonheap
   - assigned_memoffheap
   - assigned_cpu
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.I32, 'uptime_secs', None, None, ), # 3
    (4, TType.LIST, 'executors', (TType.STRUCT,(ExecutorSummary, ExecutorSummary.thrift_spec)), None, ), # 4
    (5, TType.STRING, 'status', None, None, ), # 5
    (6, TType.MAP, 'errors', (TType.STRING,None,TType.LIST,(TType.STRUCT,(ErrorInfo, ErrorInfo.thrift_spec))), None, ), # 6
    None, # 7
    None, # 8
    None, # 9
    None, # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    None, # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    None, # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    None, # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    None, # 50
    None, # 51
    None, # 52
    None, # 53
    None, # 54
    None, # 55
    None, # 56
    None, # 57
    None, # 58
    None, # 59
    None, # 60
    None, # 61
    None, # 62
    None, # 63
    None, # 64
    None, # 65
    None, # 66
    None, # 67
    None, # 68
    None, # 69
    None, # 70
    None, # 71
    None, # 72
    None, # 73
    None, # 74
    None, # 75
    None, # 76
    None, # 77
    None, # 78
    None, # 79
    None, # 80
    None, # 81
    None, # 82
    None, # 83
    None, # 84
    None, # 85
    None, # 86
    None, # 87
    None, # 88
    None, # 89
    None, # 90
    None, # 91
    None, # 92
    None, # 93
    None, # 94
    None, # 95
    None, # 96
    None, # 97
    None, # 98
    None, # 99
    None, # 100
    None, # 101
    None, # 102
    None, # 103
    None, # 104
    None, # 105
    None, # 106
    None, # 107
    None, # 108
    None, # 109
    None, # 110
    None, # 111
    None, # 112
    None, # 113
    None, # 114
    None, # 115
    None, # 116
    None, # 117
    None, # 118
    None, # 119
    None, # 120
    None, # 121
    None, # 122
    None, # 123
    None, # 124
    None, # 125
    None, # 126
    None, # 127
    None, # 128
    None, # 129
    None, # 130
    None, # 131
    None, # 132
    None, # 133
    None, # 134
    None, # 135
    None, # 136
    None, # 137
    None, # 138
    None, # 139
    None, # 140
    None, # 141
    None, # 142
    None, # 143
    None, # 144
    None, # 145
    None, # 146
    None, # 147
    None, # 148
    None, # 149
    None, # 150
    None, # 151
    None, # 152
    None, # 153
    None, # 154
    None, # 155
    None, # 156
    None, # 157
    None, # 158
    None, # 159
    None, # 160
    None, # 161
    None, # 162
    None, # 163
    None, # 164
    None, # 165
    None, # 166
    None, # 167
    None, # 168
    None, # 169
    None, # 170
    None, # 171
    None, # 172
    None, # 173
    None, # 174
    None, # 175
    None, # 176
    None, # 177
    None, # 178
    None, # 179
    None, # 180
    None, # 181
    None, # 182
    None, # 183
    None, # 184
    None, # 185
    None, # 186
    None, # 187
    None, # 188
    None, # 189
    None, # 190
    None, # 191
    None, # 192
    None, # 193
    None, # 194
    None, # 195
    None, # 196
    None, # 197
    None, # 198
    None, # 199
    None, # 200
    None, # 201
    None, # 202
    None, # 203
    None, # 204
    None, # 205
    None, # 206
    None, # 207
    None, # 208
    None, # 209
    None, # 210
    None, # 211
    None, # 212
    None, # 213
    None, # 214
    None, # 215
    None, # 216
    None, # 217
    None, # 218
    None, # 219
    None, # 220
    None, # 221
    None, # 222
    None, # 223
    None, # 224
    None, # 225
    None, # 226
    None, # 227
    None, # 228
    None, # 229
    None, # 230
    None, # 231
    None, # 232
    None, # 233
    None, # 234
    None, # 235
    None, # 236
    None, # 237
    None, # 238
    None, # 239
    None, # 240
    None, # 241
    None, # 242
    None, # 243
    None, # 244
    None, # 245
    None, # 246
    None, # 247
    None, # 248
    None, # 249
    None, # 250
    None, # 251
    None, # 252
    None, # 253
    None, # 254
    None, # 255
    None, # 256
    None, # 257
    None, # 258
    None, # 259
    None, # 260
    None, # 261
    None, # 262
    None, # 263
    None, # 264
    None, # 265
    None, # 266
    None, # 267
    None, # 268
    None, # 269
    None, # 270
    None, # 271
    None, # 272
    None, # 273
    None, # 274
    None, # 275
    None, # 276
    None, # 277
    None, # 278
    None, # 279
    None, # 280
    None, # 281
    None, # 282
    None, # 283
    None, # 284
    None, # 285
    None, # 286
    None, # 287
    None, # 288
    None, # 289
    None, # 290
    None, # 291
    None, # 292
    None, # 293
    None, # 294
    None, # 295
    None, # 296
    None, # 297
    None, # 298
    None, # 299
    None, # 300
    None, # 301
    None, # 302
    None, # 303
    None, # 304
    None, # 305
    None, # 306
    None, # 307
    None, # 308
    None, # 309
    None, # 310
    None, # 311
    None, # 312
    None, # 313
    None, # 314
    None, # 315
    None, # 316
    None, # 317
    None, # 318
    None, # 319
    None, # 320
    None, # 321
    None, # 322
    None, # 323
    None, # 324
    None, # 325
    None, # 326
    None, # 327
    None, # 328
    None, # 329
    None, # 330
    None, # 331
    None, # 332
    None, # 333
    None, # 334
    None, # 335
    None, # 336
    None, # 337
    None, # 338
    None, # 339
    None, # 340
    None, # 341
    None, # 342
    None, # 343
    None, # 344
    None, # 345
    None, # 346
    None, # 347
    None, # 348
    None, # 349
    None, # 350
    None, # 351
    None, # 352
    None, # 353
    None, # 354
    None, # 355
    None, # 356
    None, # 357
    None, # 358
    None, # 359
    None, # 360
    None, # 361
    None, # 362
    None, # 363
    None, # 364
    None, # 365
    None, # 366
    None, # 367
    None, # 368
    None, # 369
    None, # 370
    None, # 371
    None, # 372
    None, # 373
    None, # 374
    None, # 375
    None, # 376
    None, # 377
    None, # 378
    None, # 379
    None, # 380
    None, # 381
    None, # 382
    None, # 383
    None, # 384
    None, # 385
    None, # 386
    None, # 387
    None, # 388
    None, # 389
    None, # 390
    None, # 391
    None, # 392
    None, # 393
    None, # 394
    None, # 395
    None, # 396
    None, # 397
    None, # 398
    None, # 399
    None, # 400
    None, # 401
    None, # 402
    None, # 403
    None, # 404
    None, # 405
    None, # 406
    None, # 407
    None, # 408
    None, # 409
    None, # 410
    None, # 411
    None, # 412
    None, # 413
    None, # 414
    None, # 415
    None, # 416
    None, # 417
    None, # 418
    None, # 419
    None, # 420
    None, # 421
    None, # 422
    None, # 423
    None, # 424
    None, # 425
    None, # 426
    None, # 427
    None, # 428
    None, # 429
    None, # 430
    None, # 431
    None, # 432
    None, # 433
    None, # 434
    None, # 435
    None, # 436
    None, # 437
    None, # 438
    None, # 439
    None, # 440
    None, # 441
    None, # 442
    None, # 443
    None, # 444
    None, # 445
    None, # 446
    None, # 447
    None, # 448
    None, # 449
    None, # 450
    None, # 451
    None, # 452
    None, # 453
    None, # 454
    None, # 455
    None, # 456
    None, # 457
    None, # 458
    None, # 459
    None, # 460
    None, # 461
    None, # 462
    None, # 463
    None, # 464
    None, # 465
    None, # 466
    None, # 467
    None, # 468
    None, # 469
    None, # 470
    None, # 471
    None, # 472
    None, # 473
    None, # 474
    None, # 475
    None, # 476
    None, # 477
    None, # 478
    None, # 479
    None, # 480
    None, # 481
    None, # 482
    None, # 483
    None, # 484
    None, # 485
    None, # 486
    None, # 487
    None, # 488
    None, # 489
    None, # 490
    None, # 491
    None, # 492
    None, # 493
    None, # 494
    None, # 495
    None, # 496
    None, # 497
    None, # 498
    None, # 499
    None, # 500
    None, # 501
    None, # 502
    None, # 503
    None, # 504
    None, # 505
    None, # 506
    None, # 507
    None, # 508
    None, # 509
    None, # 510
    None, # 511
    None, # 512
    (513, TType.STRING, 'sched_status', None, None, ), # 513
    (514, TType.STRING, 'owner', None, None, ), # 514
    None, # 515
    None, # 516
    None, # 517
    None, # 518
    None, # 519
    None, # 520
    (521, TType.DOUBLE, 'requested_memonheap', None, None, ), # 521
    (522, TType.DOUBLE, 'requested_memoffheap', None, None, ), # 522
    (523, TType.DOUBLE, 'requested_cpu', None, None, ), # 523
    (524, TType.DOUBLE, 'assigned_memonheap', None, None, ), # 524
    (525, TType.DOUBLE, 'assigned_memoffheap', None, None, ), # 525
    (526, TType.DOUBLE, 'assigned_cpu', None, None, ), # 526
  )

  def __init__(self, id=None, name=None, uptime_secs=None, executors=None, status=None, errors=None, sched_status=None, owner=None, requested_memonheap=None, requested_memoffheap=None, requested_cpu=None, assigned_memonheap=None, assigned_memoffheap=None, assigned_cpu=None,):
    self.id = id
    self.name = name
    self.uptime_secs = uptime_secs
    self.executors = executors
    self.status = status
    self.errors = errors
    self.sched_status = sched_status
    self.owner = owner
    self.requested_memonheap = requested_memonheap
    self.requested_memoffheap = requested_memoffheap
    self.requested_cpu = requested_cpu
    self.assigned_memonheap = assigned_memonheap
    self.assigned_memoffheap = assigned_memoffheap
    self.assigned_cpu = assigned_cpu

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.uptime_secs = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.executors = []
          (_etype297, _size294) = iprot.readListBegin()
          for _i298 in xrange(_size294):
            _elem299 = ExecutorSummary()
            _elem299.read(iprot)
            self.executors.append(_elem299)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.status = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.MAP:
          self.errors = {}
          (_ktype301, _vtype302, _size300 ) = iprot.readMapBegin()
          for _i304 in xrange(_size300):
            _key305 = iprot.readString().decode('utf-8')
            _val306 = []
            (_etype310, _size307) = iprot.readListBegin()
            for _i311 in xrange(_size307):
              _elem312 = ErrorInfo()
              _elem312.read(iprot)
              _val306.append(_elem312)
            iprot.readListEnd()
            self.errors[_key305] = _val306
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 513:
        if ftype == TType.STRING:
          self.sched_status = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 514:
        if ftype == TType.STRING:
          self.owner = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 521:
        if ftype == TType.DOUBLE:
          self.requested_memonheap = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 522:
        if ftype == TType.DOUBLE:
          self.requested_memoffheap = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 523:
        if ftype == TType.DOUBLE:
          self.requested_cpu = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 524:
        if ftype == TType.DOUBLE:
          self.assigned_memonheap = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 525:
        if ftype == TType.DOUBLE:
          self.assigned_memoffheap = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 526:
        if ftype == TType.DOUBLE:
          self.assigned_cpu = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TopologyInfo')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.uptime_secs is not None:
      oprot.writeFieldBegin('uptime_secs', TType.I32, 3)
      oprot.writeI32(self.uptime_secs)
      oprot.writeFieldEnd()
    if self.executors is not None:
      oprot.writeFieldBegin('executors', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.executors))
      for iter313 in self.executors:
        iter313.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRING, 5)
      oprot.writeString(self.status.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.errors is not None:
      oprot.writeFieldBegin('errors', TType.MAP, 6)
      oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.errors))
      for kiter314,viter315 in self.errors.items():
        oprot.writeString(kiter314.encode('utf-8'))
        oprot.writeListBegin(TType.STRUCT, len(viter315))
        for iter316 in viter315:
          iter316.write(oprot)
        oprot.writeListEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.sched_status is not None:
      oprot.writeFieldBegin('sched_status', TType.STRING, 513)
      oprot.writeString(self.sched_status.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.owner is not None:
      oprot.writeFieldBegin('owner', TType.STRING, 514)
      oprot.writeString(self.owner.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.requested_memonheap is not None:
      oprot.writeFieldBegin('requested_memonheap', TType.DOUBLE, 521)
      oprot.writeDouble(self.requested_memonheap)
      oprot.writeFieldEnd()
    if self.requested_memoffheap is not None:
      oprot.writeFieldBegin('requested_memoffheap', TType.DOUBLE, 522)
      oprot.writeDouble(self.requested_memoffheap)
      oprot.writeFieldEnd()
    if self.requested_cpu is not None:
      oprot.writeFieldBegin('requested_cpu', TType.DOUBLE, 523)
      oprot.writeDouble(self.requested_cpu)
      oprot.writeFieldEnd()
    if self.assigned_memonheap is not None:
      oprot.writeFieldBegin('assigned_memonheap', TType.DOUBLE, 524)
      oprot.writeDouble(self.assigned_memonheap)
      oprot.writeFieldEnd()
    if self.assigned_memoffheap is not None:
      oprot.writeFieldBegin('assigned_memoffheap', TType.DOUBLE, 525)
      oprot.writeDouble(self.assigned_memoffheap)
      oprot.writeFieldEnd()
    if self.assigned_cpu is not None:
      oprot.writeFieldBegin('assigned_cpu', TType.DOUBLE, 526)
      oprot.writeDouble(self.assigned_cpu)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    if self.name is None:
      raise TProtocol.TProtocolException(message='Required field name is unset!')
    if self.uptime_secs is None:
      raise TProtocol.TProtocolException(message='Required field uptime_secs is unset!')
    if self.executors is None:
      raise TProtocol.TProtocolException(message='Required field executors is unset!')
    if self.status is None:
      raise TProtocol.TProtocolException(message='Required field status is unset!')
    if self.errors is None:
      raise TProtocol.TProtocolException(message='Required field errors is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.uptime_secs)
    value = (value * 31) ^ hash(self.executors)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.errors)
    value = (value * 31) ^ hash(self.sched_status)
    value = (value * 31) ^ hash(self.owner)
    value = (value * 31) ^ hash(self.requested_memonheap)
    value = (value * 31) ^ hash(self.requested_memoffheap)
    value = (value * 31) ^ hash(self.requested_cpu)
    value = (value * 31) ^ hash(self.assigned_memonheap)
    value = (value * 31) ^ hash(self.assigned_memoffheap)
    value = (value * 31) ^ hash(self.assigned_cpu)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CommonAggregateStats:
  """
  Attributes:
   - num_executors
   - num_tasks
   - emitted
   - transferred
   - acked
   - failed
   - resources_map
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'num_executors', None, None, ), # 1
    (2, TType.I32, 'num_tasks', None, None, ), # 2
    (3, TType.I64, 'emitted', None, None, ), # 3
    (4, TType.I64, 'transferred', None, None, ), # 4
    (5, TType.I64, 'acked', None, None, ), # 5
    (6, TType.I64, 'failed', None, None, ), # 6
    (7, TType.MAP, 'resources_map', (TType.STRING,None,TType.DOUBLE,None), None, ), # 7
  )

  def __init__(self, num_executors=None, num_tasks=None, emitted=None, transferred=None, acked=None, failed=None, resources_map=None,):
    self.num_executors = num_executors
    self.num_tasks = num_tasks
    self.emitted = emitted
    self.transferred = transferred
    self.acked = acked
    self.failed = failed
    self.resources_map = resources_map

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.num_executors = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.num_tasks = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.emitted = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.transferred = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.acked = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.failed = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.MAP:
          self.resources_map = {}
          (_ktype318, _vtype319, _size317 ) = iprot.readMapBegin()
          for _i321 in xrange(_size317):
            _key322 = iprot.readString().decode('utf-8')
            _val323 = iprot.readDouble()
            self.resources_map[_key322] = _val323
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CommonAggregateStats')
    if self.num_executors is not None:
      oprot.writeFieldBegin('num_executors', TType.I32, 1)
      oprot.writeI32(self.num_executors)
      oprot.writeFieldEnd()
    if self.num_tasks is not None:
      oprot.writeFieldBegin('num_tasks', TType.I32, 2)
      oprot.writeI32(self.num_tasks)
      oprot.writeFieldEnd()
    if self.emitted is not None:
      oprot.writeFieldBegin('emitted', TType.I64, 3)
      oprot.writeI64(self.emitted)
      oprot.writeFieldEnd()
    if self.transferred is not None:
      oprot.writeFieldBegin('transferred', TType.I64, 4)
      oprot.writeI64(self.transferred)
      oprot.writeFieldEnd()
    if self.acked is not None:
      oprot.writeFieldBegin('acked', TType.I64, 5)
      oprot.writeI64(self.acked)
      oprot.writeFieldEnd()
    if self.failed is not None:
      oprot.writeFieldBegin('failed', TType.I64, 6)
      oprot.writeI64(self.failed)
      oprot.writeFieldEnd()
    if self.resources_map is not None:
      oprot.writeFieldBegin('resources_map', TType.MAP, 7)
      oprot.writeMapBegin(TType.STRING, TType.DOUBLE, len(self.resources_map))
      for kiter324,viter325 in self.resources_map.items():
        oprot.writeString(kiter324.encode('utf-8'))
        oprot.writeDouble(viter325)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.num_executors)
    value = (value * 31) ^ hash(self.num_tasks)
    value = (value * 31) ^ hash(self.emitted)
    value = (value * 31) ^ hash(self.transferred)
    value = (value * 31) ^ hash(self.acked)
    value = (value * 31) ^ hash(self.failed)
    value = (value * 31) ^ hash(self.resources_map)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SpoutAggregateStats:
  """
  Attributes:
   - complete_latency_ms
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'complete_latency_ms', None, None, ), # 1
  )

  def __init__(self, complete_latency_ms=None,):
    self.complete_latency_ms = complete_latency_ms

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.complete_latency_ms = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SpoutAggregateStats')
    if self.complete_latency_ms is not None:
      oprot.writeFieldBegin('complete_latency_ms', TType.DOUBLE, 1)
      oprot.writeDouble(self.complete_latency_ms)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.complete_latency_ms)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BoltAggregateStats:
  """
  Attributes:
   - execute_latency_ms
   - process_latency_ms
   - executed
   - capacity
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'execute_latency_ms', None, None, ), # 1
    (2, TType.DOUBLE, 'process_latency_ms', None, None, ), # 2
    (3, TType.I64, 'executed', None, None, ), # 3
    (4, TType.DOUBLE, 'capacity', None, None, ), # 4
  )

  def __init__(self, execute_latency_ms=None, process_latency_ms=None, executed=None, capacity=None,):
    self.execute_latency_ms = execute_latency_ms
    self.process_latency_ms = process_latency_ms
    self.executed = executed
    self.capacity = capacity

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.execute_latency_ms = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.process_latency_ms = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.executed = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.capacity = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BoltAggregateStats')
    if self.execute_latency_ms is not None:
      oprot.writeFieldBegin('execute_latency_ms', TType.DOUBLE, 1)
      oprot.writeDouble(self.execute_latency_ms)
      oprot.writeFieldEnd()
    if self.process_latency_ms is not None:
      oprot.writeFieldBegin('process_latency_ms', TType.DOUBLE, 2)
      oprot.writeDouble(self.process_latency_ms)
      oprot.writeFieldEnd()
    if self.executed is not None:
      oprot.writeFieldBegin('executed', TType.I64, 3)
      oprot.writeI64(self.executed)
      oprot.writeFieldEnd()
    if self.capacity is not None:
      oprot.writeFieldBegin('capacity', TType.DOUBLE, 4)
      oprot.writeDouble(self.capacity)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.execute_latency_ms)
    value = (value * 31) ^ hash(self.process_latency_ms)
    value = (value * 31) ^ hash(self.executed)
    value = (value * 31) ^ hash(self.capacity)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SpecificAggregateStats:
  """
  Attributes:
   - bolt
   - spout
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'bolt', (BoltAggregateStats, BoltAggregateStats.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'spout', (SpoutAggregateStats, SpoutAggregateStats.thrift_spec), None, ), # 2
  )

  def __init__(self, bolt=None, spout=None,):
    self.bolt = bolt
    self.spout = spout

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.bolt = BoltAggregateStats()
          self.bolt.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.spout = SpoutAggregateStats()
          self.spout.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SpecificAggregateStats')
    if self.bolt is not None:
      oprot.writeFieldBegin('bolt', TType.STRUCT, 1)
      self.bolt.write(oprot)
      oprot.writeFieldEnd()
    if self.spout is not None:
      oprot.writeFieldBegin('spout', TType.STRUCT, 2)
      self.spout.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.bolt)
    value = (value * 31) ^ hash(self.spout)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ComponentAggregateStats:
  """
  Attributes:
   - type
   - common_stats
   - specific_stats
   - last_error
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type', None, None, ), # 1
    (2, TType.STRUCT, 'common_stats', (CommonAggregateStats, CommonAggregateStats.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'specific_stats', (SpecificAggregateStats, SpecificAggregateStats.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'last_error', (ErrorInfo, ErrorInfo.thrift_spec), None, ), # 4
  )

  def __init__(self, type=None, common_stats=None, specific_stats=None, last_error=None,):
    self.type = type
    self.common_stats = common_stats
    self.specific_stats = specific_stats
    self.last_error = last_error

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.common_stats = CommonAggregateStats()
          self.common_stats.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.specific_stats = SpecificAggregateStats()
          self.specific_stats.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.last_error = ErrorInfo()
          self.last_error.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ComponentAggregateStats')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 1)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.common_stats is not None:
      oprot.writeFieldBegin('common_stats', TType.STRUCT, 2)
      self.common_stats.write(oprot)
      oprot.writeFieldEnd()
    if self.specific_stats is not None:
      oprot.writeFieldBegin('specific_stats', TType.STRUCT, 3)
      self.specific_stats.write(oprot)
      oprot.writeFieldEnd()
    if self.last_error is not None:
      oprot.writeFieldBegin('last_error', TType.STRUCT, 4)
      self.last_error.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.common_stats)
    value = (value * 31) ^ hash(self.specific_stats)
    value = (value * 31) ^ hash(self.last_error)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TopologyStats:
  """
  Attributes:
   - window_to_emitted
   - window_to_transferred
   - window_to_complete_latencies_ms
   - window_to_acked
   - window_to_failed
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'window_to_emitted', (TType.STRING,None,TType.I64,None), None, ), # 1
    (2, TType.MAP, 'window_to_transferred', (TType.STRING,None,TType.I64,None), None, ), # 2
    (3, TType.MAP, 'window_to_complete_latencies_ms', (TType.STRING,None,TType.DOUBLE,None), None, ), # 3
    (4, TType.MAP, 'window_to_acked', (TType.STRING,None,TType.I64,None), None, ), # 4
    (5, TType.MAP, 'window_to_failed', (TType.STRING,None,TType.I64,None), None, ), # 5
  )

  def __init__(self, window_to_emitted=None, window_to_transferred=None, window_to_complete_latencies_ms=None, window_to_acked=None, window_to_failed=None,):
    self.window_to_emitted = window_to_emitted
    self.window_to_transferred = window_to_transferred
    self.window_to_complete_latencies_ms = window_to_complete_latencies_ms
    self.window_to_acked = window_to_acked
    self.window_to_failed = window_to_failed

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.window_to_emitted = {}
          (_ktype327, _vtype328, _size326 ) = iprot.readMapBegin()
          for _i330 in xrange(_size326):
            _key331 = iprot.readString().decode('utf-8')
            _val332 = iprot.readI64()
            self.window_to_emitted[_key331] = _val332
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.window_to_transferred = {}
          (_ktype334, _vtype335, _size333 ) = iprot.readMapBegin()
          for _i337 in xrange(_size333):
            _key338 = iprot.readString().decode('utf-8')
            _val339 = iprot.readI64()
            self.window_to_transferred[_key338] = _val339
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.window_to_complete_latencies_ms = {}
          (_ktype341, _vtype342, _size340 ) = iprot.readMapBegin()
          for _i344 in xrange(_size340):
            _key345 = iprot.readString().decode('utf-8')
            _val346 = iprot.readDouble()
            self.window_to_complete_latencies_ms[_key345] = _val346
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.window_to_acked = {}
          (_ktype348, _vtype349, _size347 ) = iprot.readMapBegin()
          for _i351 in xrange(_size347):
            _key352 = iprot.readString().decode('utf-8')
            _val353 = iprot.readI64()
            self.window_to_acked[_key352] = _val353
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.window_to_failed = {}
          (_ktype355, _vtype356, _size354 ) = iprot.readMapBegin()
          for _i358 in xrange(_size354):
            _key359 = iprot.readString().decode('utf-8')
            _val360 = iprot.readI64()
            self.window_to_failed[_key359] = _val360
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TopologyStats')
    if self.window_to_emitted is not None:
      oprot.writeFieldBegin('window_to_emitted', TType.MAP, 1)
      oprot.writeMapBegin(TType.STRING, TType.I64, len(self.window_to_emitted))
      for kiter361,viter362 in self.window_to_emitted.items():
        oprot.writeString(kiter361.encode('utf-8'))
        oprot.writeI64(viter362)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.window_to_transferred is not None:
      oprot.writeFieldBegin('window_to_transferred', TType.MAP, 2)
      oprot.writeMapBegin(TType.STRING, TType.I64, len(self.window_to_transferred))
      for kiter363,viter364 in self.window_to_transferred.items():
        oprot.writeString(kiter363.encode('utf-8'))
        oprot.writeI64(viter364)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.window_to_complete_latencies_ms is not None:
      oprot.writeFieldBegin('window_to_complete_latencies_ms', TType.MAP, 3)
      oprot.writeMapBegin(TType.STRING, TType.DOUBLE, len(self.window_to_complete_latencies_ms))
      for kiter365,viter366 in self.window_to_complete_latencies_ms.items():
        oprot.writeString(kiter365.encode('utf-8'))
        oprot.writeDouble(viter366)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.window_to_acked is not None:
      oprot.writeFieldBegin('window_to_acked', TType.MAP, 4)
      oprot.writeMapBegin(TType.STRING, TType.I64, len(self.window_to_acked))
      for kiter367,viter368 in self.window_to_acked.items():
        oprot.writeString(kiter367.encode('utf-8'))
        oprot.writeI64(viter368)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.window_to_failed is not None:
      oprot.writeFieldBegin('window_to_failed', TType.MAP, 5)
      oprot.writeMapBegin(TType.STRING, TType.I64, len(self.window_to_failed))
      for kiter369,viter370 in self.window_to_failed.items():
        oprot.writeString(kiter369.encode('utf-8'))
        oprot.writeI64(viter370)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.window_to_emitted)
    value = (value * 31) ^ hash(self.window_to_transferred)
    value = (value * 31) ^ hash(self.window_to_complete_latencies_ms)
    value = (value * 31) ^ hash(self.window_to_acked)
    value = (value * 31) ^ hash(self.window_to_failed)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WorkerSummary:
  """
  Attributes:
   - supervisor_id
   - host
   - port
   - topology_id
   - topology_name
   - num_executors
   - component_to_num_tasks
   - time_secs
   - uptime_secs
   - requested_memonheap
   - requested_memoffheap
   - requested_cpu
   - assigned_memonheap
   - assigned_memoffheap
   - assigned_cpu
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'supervisor_id', None, None, ), # 1
    (2, TType.STRING, 'host', None, None, ), # 2
    (3, TType.I32, 'port', None, None, ), # 3
    (4, TType.STRING, 'topology_id', None, None, ), # 4
    (5, TType.STRING, 'topology_name', None, None, ), # 5
    (6, TType.I32, 'num_executors', None, None, ), # 6
    (7, TType.MAP, 'component_to_num_tasks', (TType.STRING,None,TType.I64,None), None, ), # 7
    (8, TType.I32, 'time_secs', None, None, ), # 8
    (9, TType.I32, 'uptime_secs', None, None, ), # 9
    None, # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    None, # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    None, # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    None, # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    None, # 50
    None, # 51
    None, # 52
    None, # 53
    None, # 54
    None, # 55
    None, # 56
    None, # 57
    None, # 58
    None, # 59
    None, # 60
    None, # 61
    None, # 62
    None, # 63
    None, # 64
    None, # 65
    None, # 66
    None, # 67
    None, # 68
    None, # 69
    None, # 70
    None, # 71
    None, # 72
    None, # 73
    None, # 74
    None, # 75
    None, # 76
    None, # 77
    None, # 78
    None, # 79
    None, # 80
    None, # 81
    None, # 82
    None, # 83
    None, # 84
    None, # 85
    None, # 86
    None, # 87
    None, # 88
    None, # 89
    None, # 90
    None, # 91
    None, # 92
    None, # 93
    None, # 94
    None, # 95
    None, # 96
    None, # 97
    None, # 98
    None, # 99
    None, # 100
    None, # 101
    None, # 102
    None, # 103
    None, # 104
    None, # 105
    None, # 106
    None, # 107
    None, # 108
    None, # 109
    None, # 110
    None, # 111
    None, # 112
    None, # 113
    None, # 114
    None, # 115
    None, # 116
    None, # 117
    None, # 118
    None, # 119
    None, # 120
    None, # 121
    None, # 122
    None, # 123
    None, # 124
    None, # 125
    None, # 126
    None, # 127
    None, # 128
    None, # 129
    None, # 130
    None, # 131
    None, # 132
    None, # 133
    None, # 134
    None, # 135
    None, # 136
    None, # 137
    None, # 138
    None, # 139
    None, # 140
    None, # 141
    None, # 142
    None, # 143
    None, # 144
    None, # 145
    None, # 146
    None, # 147
    None, # 148
    None, # 149
    None, # 150
    None, # 151
    None, # 152
    None, # 153
    None, # 154
    None, # 155
    None, # 156
    None, # 157
    None, # 158
    None, # 159
    None, # 160
    None, # 161
    None, # 162
    None, # 163
    None, # 164
    None, # 165
    None, # 166
    None, # 167
    None, # 168
    None, # 169
    None, # 170
    None, # 171
    None, # 172
    None, # 173
    None, # 174
    None, # 175
    None, # 176
    None, # 177
    None, # 178
    None, # 179
    None, # 180
    None, # 181
    None, # 182
    None, # 183
    None, # 184
    None, # 185
    None, # 186
    None, # 187
    None, # 188
    None, # 189
    None, # 190
    None, # 191
    None, # 192
    None, # 193
    None, # 194
    None, # 195
    None, # 196
    None, # 197
    None, # 198
    None, # 199
    None, # 200
    None, # 201
    None, # 202
    None, # 203
    None, # 204
    None, # 205
    None, # 206
    None, # 207
    None, # 208
    None, # 209
    None, # 210
    None, # 211
    None, # 212
    None, # 213
    None, # 214
    None, # 215
    None, # 216
    None, # 217
    None, # 218
    None, # 219
    None, # 220
    None, # 221
    None, # 222
    None, # 223
    None, # 224
    None, # 225
    None, # 226
    None, # 227
    None, # 228
    None, # 229
    None, # 230
    None, # 231
    None, # 232
    None, # 233
    None, # 234
    None, # 235
    None, # 236
    None, # 237
    None, # 238
    None, # 239
    None, # 240
    None, # 241
    None, # 242
    None, # 243
    None, # 244
    None, # 245
    None, # 246
    None, # 247
    None, # 248
    None, # 249
    None, # 250
    None, # 251
    None, # 252
    None, # 253
    None, # 254
    None, # 255
    None, # 256
    None, # 257
    None, # 258
    None, # 259
    None, # 260
    None, # 261
    None, # 262
    None, # 263
    None, # 264
    None, # 265
    None, # 266
    None, # 267
    None, # 268
    None, # 269
    None, # 270
    None, # 271
    None, # 272
    None, # 273
    None, # 274
    None, # 275
    None, # 276
    None, # 277
    None, # 278
    None, # 279
    None, # 280
    None, # 281
    None, # 282
    None, # 283
    None, # 284
    None, # 285
    None, # 286
    None, # 287
    None, # 288
    None, # 289
    None, # 290
    None, # 291
    None, # 292
    None, # 293
    None, # 294
    None, # 295
    None, # 296
    None, # 297
    None, # 298
    None, # 299
    None, # 300
    None, # 301
    None, # 302
    None, # 303
    None, # 304
    None, # 305
    None, # 306
    None, # 307
    None, # 308
    None, # 309
    None, # 310
    None, # 311
    None, # 312
    None, # 313
    None, # 314
    None, # 315
    None, # 316
    None, # 317
    None, # 318
    None, # 319
    None, # 320
    None, # 321
    None, # 322
    None, # 323
    None, # 324
    None, # 325
    None, # 326
    None, # 327
    None, # 328
    None, # 329
    None, # 330
    None, # 331
    None, # 332
    None, # 333
    None, # 334
    None, # 335
    None, # 336
    None, # 337
    None, # 338
    None, # 339
    None, # 340
    None, # 341
    None, # 342
    None, # 343
    None, # 344
    None, # 345
    None, # 346
    None, # 347
    None, # 348
    None, # 349
    None, # 350
    None, # 351
    None, # 352
    None, # 353
    None, # 354
    None, # 355
    None, # 356
    None, # 357
    None, # 358
    None, # 359
    None, # 360
    None, # 361
    None, # 362
    None, # 363
    None, # 364
    None, # 365
    None, # 366
    None, # 367
    None, # 368
    None, # 369
    None, # 370
    None, # 371
    None, # 372
    None, # 373
    None, # 374
    None, # 375
    None, # 376
    None, # 377
    None, # 378
    None, # 379
    None, # 380
    None, # 381
    None, # 382
    None, # 383
    None, # 384
    None, # 385
    None, # 386
    None, # 387
    None, # 388
    None, # 389
    None, # 390
    None, # 391
    None, # 392
    None, # 393
    None, # 394
    None, # 395
    None, # 396
    None, # 397
    None, # 398
    None, # 399
    None, # 400
    None, # 401
    None, # 402
    None, # 403
    None, # 404
    None, # 405
    None, # 406
    None, # 407
    None, # 408
    None, # 409
    None, # 410
    None, # 411
    None, # 412
    None, # 413
    None, # 414
    None, # 415
    None, # 416
    None, # 417
    None, # 418
    None, # 419
    None, # 420
    None, # 421
    None, # 422
    None, # 423
    None, # 424
    None, # 425
    None, # 426
    None, # 427
    None, # 428
    None, # 429
    None, # 430
    None, # 431
    None, # 432
    None, # 433
    None, # 434
    None, # 435
    None, # 436
    None, # 437
    None, # 438
    None, # 439
    None, # 440
    None, # 441
    None, # 442
    None, # 443
    None, # 444
    None, # 445
    None, # 446
    None, # 447
    None, # 448
    None, # 449
    None, # 450
    None, # 451
    None, # 452
    None, # 453
    None, # 454
    None, # 455
    None, # 456
    None, # 457
    None, # 458
    None, # 459
    None, # 460
    None, # 461
    None, # 462
    None, # 463
    None, # 464
    None, # 465
    None, # 466
    None, # 467
    None, # 468
    None, # 469
    None, # 470
    None, # 471
    None, # 472
    None, # 473
    None, # 474
    None, # 475
    None, # 476
    None, # 477
    None, # 478
    None, # 479
    None, # 480
    None, # 481
    None, # 482
    None, # 483
    None, # 484
    None, # 485
    None, # 486
    None, # 487
    None, # 488
    None, # 489
    None, # 490
    None, # 491
    None, # 492
    None, # 493
    None, # 494
    None, # 495
    None, # 496
    None, # 497
    None, # 498
    None, # 499
    None, # 500
    None, # 501
    None, # 502
    None, # 503
    None, # 504
    None, # 505
    None, # 506
    None, # 507
    None, # 508
    None, # 509
    None, # 510
    None, # 511
    None, # 512
    None, # 513
    None, # 514
    None, # 515
    None, # 516
    None, # 517
    None, # 518
    None, # 519
    None, # 520
    (521, TType.DOUBLE, 'requested_memonheap', None, None, ), # 521
    (522, TType.DOUBLE, 'requested_memoffheap', None, None, ), # 522
    (523, TType.DOUBLE, 'requested_cpu', None, None, ), # 523
    (524, TType.DOUBLE, 'assigned_memonheap', None, None, ), # 524
    (525, TType.DOUBLE, 'assigned_memoffheap', None, None, ), # 525
    (526, TType.DOUBLE, 'assigned_cpu', None, None, ), # 526
  )

  def __init__(self, supervisor_id=None, host=None, port=None, topology_id=None, topology_name=None, num_executors=None, component_to_num_tasks=None, time_secs=None, uptime_secs=None, requested_memonheap=None, requested_memoffheap=None, requested_cpu=None, assigned_memonheap=None, assigned_memoffheap=None, assigned_cpu=None,):
    self.supervisor_id = supervisor_id
    self.host = host
    self.port = port
    self.topology_id = topology_id
    self.topology_name = topology_name
    self.num_executors = num_executors
    self.component_to_num_tasks = component_to_num_tasks
    self.time_secs = time_secs
    self.uptime_secs = uptime_secs
    self.requested_memonheap = requested_memonheap
    self.requested_memoffheap = requested_memoffheap
    self.requested_cpu = requested_cpu
    self.assigned_memonheap = assigned_memonheap
    self.assigned_memoffheap = assigned_memoffheap
    self.assigned_cpu = assigned_cpu

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.supervisor_id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.host = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.port = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.topology_id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.topology_name = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.num_executors = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.MAP:
          self.component_to_num_tasks = {}
          (_ktype372, _vtype373, _size371 ) = iprot.readMapBegin()
          for _i375 in xrange(_size371):
            _key376 = iprot.readString().decode('utf-8')
            _val377 = iprot.readI64()
            self.component_to_num_tasks[_key376] = _val377
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.time_secs = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.uptime_secs = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 521:
        if ftype == TType.DOUBLE:
          self.requested_memonheap = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 522:
        if ftype == TType.DOUBLE:
          self.requested_memoffheap = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 523:
        if ftype == TType.DOUBLE:
          self.requested_cpu = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 524:
        if ftype == TType.DOUBLE:
          self.assigned_memonheap = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 525:
        if ftype == TType.DOUBLE:
          self.assigned_memoffheap = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 526:
        if ftype == TType.DOUBLE:
          self.assigned_cpu = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WorkerSummary')
    if self.supervisor_id is not None:
      oprot.writeFieldBegin('supervisor_id', TType.STRING, 1)
      oprot.writeString(self.supervisor_id.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.host is not None:
      oprot.writeFieldBegin('host', TType.STRING, 2)
      oprot.writeString(self.host.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.port is not None:
      oprot.writeFieldBegin('port', TType.I32, 3)
      oprot.writeI32(self.port)
      oprot.writeFieldEnd()
    if self.topology_id is not None:
      oprot.writeFieldBegin('topology_id', TType.STRING, 4)
      oprot.writeString(self.topology_id.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.topology_name is not None:
      oprot.writeFieldBegin('topology_name', TType.STRING, 5)
      oprot.writeString(self.topology_name.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.num_executors is not None:
      oprot.writeFieldBegin('num_executors', TType.I32, 6)
      oprot.writeI32(self.num_executors)
      oprot.writeFieldEnd()
    if self.component_to_num_tasks is not None:
      oprot.writeFieldBegin('component_to_num_tasks', TType.MAP, 7)
      oprot.writeMapBegin(TType.STRING, TType.I64, len(self.component_to_num_tasks))
      for kiter378,viter379 in self.component_to_num_tasks.items():
        oprot.writeString(kiter378.encode('utf-8'))
        oprot.writeI64(viter379)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.time_secs is not None:
      oprot.writeFieldBegin('time_secs', TType.I32, 8)
      oprot.writeI32(self.time_secs)
      oprot.writeFieldEnd()
    if self.uptime_secs is not None:
      oprot.writeFieldBegin('uptime_secs', TType.I32, 9)
      oprot.writeI32(self.uptime_secs)
      oprot.writeFieldEnd()
    if self.requested_memonheap is not None:
      oprot.writeFieldBegin('requested_memonheap', TType.DOUBLE, 521)
      oprot.writeDouble(self.requested_memonheap)
      oprot.writeFieldEnd()
    if self.requested_memoffheap is not None:
      oprot.writeFieldBegin('requested_memoffheap', TType.DOUBLE, 522)
      oprot.writeDouble(self.requested_memoffheap)
      oprot.writeFieldEnd()
    if self.requested_cpu is not None:
      oprot.writeFieldBegin('requested_cpu', TType.DOUBLE, 523)
      oprot.writeDouble(self.requested_cpu)
      oprot.writeFieldEnd()
    if self.assigned_memonheap is not None:
      oprot.writeFieldBegin('assigned_memonheap', TType.DOUBLE, 524)
      oprot.writeDouble(self.assigned_memonheap)
      oprot.writeFieldEnd()
    if self.assigned_memoffheap is not None:
      oprot.writeFieldBegin('assigned_memoffheap', TType.DOUBLE, 525)
      oprot.writeDouble(self.assigned_memoffheap)
      oprot.writeFieldEnd()
    if self.assigned_cpu is not None:
      oprot.writeFieldBegin('assigned_cpu', TType.DOUBLE, 526)
      oprot.writeDouble(self.assigned_cpu)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.supervisor_id)
    value = (value * 31) ^ hash(self.host)
    value = (value * 31) ^ hash(self.port)
    value = (value * 31) ^ hash(self.topology_id)
    value = (value * 31) ^ hash(self.topology_name)
    value = (value * 31) ^ hash(self.num_executors)
    value = (value * 31) ^ hash(self.component_to_num_tasks)
    value = (value * 31) ^ hash(self.time_secs)
    value = (value * 31) ^ hash(self.uptime_secs)
    value = (value * 31) ^ hash(self.requested_memonheap)
    value = (value * 31) ^ hash(self.requested_memoffheap)
    value = (value * 31) ^ hash(self.requested_cpu)
    value = (value * 31) ^ hash(self.assigned_memonheap)
    value = (value * 31) ^ hash(self.assigned_memoffheap)
    value = (value * 31) ^ hash(self.assigned_cpu)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SupervisorPageInfo:
  """
  Attributes:
   - supervisor_summaries
   - worker_summaries
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'supervisor_summaries', (TType.STRUCT,(SupervisorSummary, SupervisorSummary.thrift_spec)), None, ), # 1
    (2, TType.LIST, 'worker_summaries', (TType.STRUCT,(WorkerSummary, WorkerSummary.thrift_spec)), None, ), # 2
  )

  def __init__(self, supervisor_summaries=None, worker_summaries=None,):
    self.supervisor_summaries = supervisor_summaries
    self.worker_summaries = worker_summaries

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.supervisor_summaries = []
          (_etype383, _size380) = iprot.readListBegin()
          for _i384 in xrange(_size380):
            _elem385 = SupervisorSummary()
            _elem385.read(iprot)
            self.supervisor_summaries.append(_elem385)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.worker_summaries = []
          (_etype389, _size386) = iprot.readListBegin()
          for _i390 in xrange(_size386):
            _elem391 = WorkerSummary()
            _elem391.read(iprot)
            self.worker_summaries.append(_elem391)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SupervisorPageInfo')
    if self.supervisor_summaries is not None:
      oprot.writeFieldBegin('supervisor_summaries', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.supervisor_summaries))
      for iter392 in self.supervisor_summaries:
        iter392.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.worker_summaries is not None:
      oprot.writeFieldBegin('worker_summaries', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.worker_summaries))
      for iter393 in self.worker_summaries:
        iter393.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.supervisor_summaries)
    value = (value * 31) ^ hash(self.worker_summaries)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TopologyPageInfo:
  """
  Attributes:
   - id
   - name
   - uptime_secs
   - status
   - num_tasks
   - num_workers
   - num_executors
   - topology_conf
   - id_to_spout_agg_stats
   - id_to_bolt_agg_stats
   - sched_status
   - topology_stats
   - owner
   - workers
   - errors
   - topology_version
   - requested_memonheap
   - requested_memoffheap
   - requested_cpu
   - assigned_memonheap
   - assigned_memoffheap
   - assigned_cpu
   - requested_regular_on_heap_memory
   - requested_shared_on_heap_memory
   - requested_regular_off_heap_memory
   - requested_shared_off_heap_memory
   - assigned_regular_on_heap_memory
   - assigned_shared_on_heap_memory
   - assigned_regular_off_heap_memory
   - assigned_shared_off_heap_memory
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.I32, 'uptime_secs', None, None, ), # 3
    (4, TType.STRING, 'status', None, None, ), # 4
    (5, TType.I32, 'num_tasks', None, None, ), # 5
    (6, TType.I32, 'num_workers', None, None, ), # 6
    (7, TType.I32, 'num_executors', None, None, ), # 7
    (8, TType.STRING, 'topology_conf', None, None, ), # 8
    (9, TType.MAP, 'id_to_spout_agg_stats', (TType.STRING,None,TType.STRUCT,(ComponentAggregateStats, ComponentAggregateStats.thrift_spec)), None, ), # 9
    (10, TType.MAP, 'id_to_bolt_agg_stats', (TType.STRING,None,TType.STRUCT,(ComponentAggregateStats, ComponentAggregateStats.thrift_spec)), None, ), # 10
    (11, TType.STRING, 'sched_status', None, None, ), # 11
    (12, TType.STRUCT, 'topology_stats', (TopologyStats, TopologyStats.thrift_spec), None, ), # 12
    (13, TType.STRING, 'owner', None, None, ), # 13
    (14, TType.LIST, 'workers', (TType.STRUCT,(WorkerSummary, WorkerSummary.thrift_spec)), None, ), # 14
    (15, TType.LIST, 'errors', (TType.STRUCT,(ErrorInfo, ErrorInfo.thrift_spec)), None, ), # 15
    None, # 16
    None, # 17
    (18, TType.STRING, 'topology_version', None, None, ), # 18
    None, # 19
    None, # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    None, # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    None, # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    None, # 50
    None, # 51
    None, # 52
    None, # 53
    None, # 54
    None, # 55
    None, # 56
    None, # 57
    None, # 58
    None, # 59
    None, # 60
    None, # 61
    None, # 62
    None, # 63
    None, # 64
    None, # 65
    None, # 66
    None, # 67
    None, # 68
    None, # 69
    None, # 70
    None, # 71
    None, # 72
    None, # 73
    None, # 74
    None, # 75
    None, # 76
    None, # 77
    None, # 78
    None, # 79
    None, # 80
    None, # 81
    None, # 82
    None, # 83
    None, # 84
    None, # 85
    None, # 86
    None, # 87
    None, # 88
    None, # 89
    None, # 90
    None, # 91
    None, # 92
    None, # 93
    None, # 94
    None, # 95
    None, # 96
    None, # 97
    None, # 98
    None, # 99
    None, # 100
    None, # 101
    None, # 102
    None, # 103
    None, # 104
    None, # 105
    None, # 106
    None, # 107
    None, # 108
    None, # 109
    None, # 110
    None, # 111
    None, # 112
    None, # 113
    None, # 114
    None, # 115
    None, # 116
    None, # 117
    None, # 118
    None, # 119
    None, # 120
    None, # 121
    None, # 122
    None, # 123
    None, # 124
    None, # 125
    None, # 126
    None, # 127
    None, # 128
    None, # 129
    None, # 130
    None, # 131
    None, # 132
    None, # 133
    None, # 134
    None, # 135
    None, # 136
    None, # 137
    None, # 138
    None, # 139
    None, # 140
    None, # 141
    None, # 142
    None, # 143
    None, # 144
    None, # 145
    None, # 146
    None, # 147
    None, # 148
    None, # 149
    None, # 150
    None, # 151
    None, # 152
    None, # 153
    None, # 154
    None, # 155
    None, # 156
    None, # 157
    None, # 158
    None, # 159
    None, # 160
    None, # 161
    None, # 162
    None, # 163
    None, # 164
    None, # 165
    None, # 166
    None, # 167
    None, # 168
    None, # 169
    None, # 170
    None, # 171
    None, # 172
    None, # 173
    None, # 174
    None, # 175
    None, # 176
    None, # 177
    None, # 178
    None, # 179
    None, # 180
    None, # 181
    None, # 182
    None, # 183
    None, # 184
    None, # 185
    None, # 186
    None, # 187
    None, # 188
    None, # 189
    None, # 190
    None, # 191
    None, # 192
    None, # 193
    None, # 194
    None, # 195
    None, # 196
    None, # 197
    None, # 198
    None, # 199
    None, # 200
    None, # 201
    None, # 202
    None, # 203
    None, # 204
    None, # 205
    None, # 206
    None, # 207
    None, # 208
    None, # 209
    None, # 210
    None, # 211
    None, # 212
    None, # 213
    None, # 214
    None, # 215
    None, # 216
    None, # 217
    None, # 218
    None, # 219
    None, # 220
    None, # 221
    None, # 222
    None, # 223
    None, # 224
    None, # 225
    None, # 226
    None, # 227
    None, # 228
    None, # 229
    None, # 230
    None, # 231
    None, # 232
    None, # 233
    None, # 234
    None, # 235
    None, # 236
    None, # 237
    None, # 238
    None, # 239
    None, # 240
    None, # 241
    None, # 242
    None, # 243
    None, # 244
    None, # 245
    None, # 246
    None, # 247
    None, # 248
    None, # 249
    None, # 250
    None, # 251
    None, # 252
    None, # 253
    None, # 254
    None, # 255
    None, # 256
    None, # 257
    None, # 258
    None, # 259
    None, # 260
    None, # 261
    None, # 262
    None, # 263
    None, # 264
    None, # 265
    None, # 266
    None, # 267
    None, # 268
    None, # 269
    None, # 270
    None, # 271
    None, # 272
    None, # 273
    None, # 274
    None, # 275
    None, # 276
    None, # 277
    None, # 278
    None, # 279
    None, # 280
    None, # 281
    None, # 282
    None, # 283
    None, # 284
    None, # 285
    None, # 286
    None, # 287
    None, # 288
    None, # 289
    None, # 290
    None, # 291
    None, # 292
    None, # 293
    None, # 294
    None, # 295
    None, # 296
    None, # 297
    None, # 298
    None, # 299
    None, # 300
    None, # 301
    None, # 302
    None, # 303
    None, # 304
    None, # 305
    None, # 306
    None, # 307
    None, # 308
    None, # 309
    None, # 310
    None, # 311
    None, # 312
    None, # 313
    None, # 314
    None, # 315
    None, # 316
    None, # 317
    None, # 318
    None, # 319
    None, # 320
    None, # 321
    None, # 322
    None, # 323
    None, # 324
    None, # 325
    None, # 326
    None, # 327
    None, # 328
    None, # 329
    None, # 330
    None, # 331
    None, # 332
    None, # 333
    None, # 334
    None, # 335
    None, # 336
    None, # 337
    None, # 338
    None, # 339
    None, # 340
    None, # 341
    None, # 342
    None, # 343
    None, # 344
    None, # 345
    None, # 346
    None, # 347
    None, # 348
    None, # 349
    None, # 350
    None, # 351
    None, # 352
    None, # 353
    None, # 354
    None, # 355
    None, # 356
    None, # 357
    None, # 358
    None, # 359
    None, # 360
    None, # 361
    None, # 362
    None, # 363
    None, # 364
    None, # 365
    None, # 366
    None, # 367
    None, # 368
    None, # 369
    None, # 370
    None, # 371
    None, # 372
    None, # 373
    None, # 374
    None, # 375
    None, # 376
    None, # 377
    None, # 378
    None, # 379
    None, # 380
    None, # 381
    None, # 382
    None, # 383
    None, # 384
    None, # 385
    None, # 386
    None, # 387
    None, # 388
    None, # 389
    None, # 390
    None, # 391
    None, # 392
    None, # 393
    None, # 394
    None, # 395
    None, # 396
    None, # 397
    None, # 398
    None, # 399
    None, # 400
    None, # 401
    None, # 402
    None, # 403
    None, # 404
    None, # 405
    None, # 406
    None, # 407
    None, # 408
    None, # 409
    None, # 410
    None, # 411
    None, # 412
    None, # 413
    None, # 414
    None, # 415
    None, # 416
    None, # 417
    None, # 418
    None, # 419
    None, # 420
    None, # 421
    None, # 422
    None, # 423
    None, # 424
    None, # 425
    None, # 426
    None, # 427
    None, # 428
    None, # 429
    None, # 430
    None, # 431
    None, # 432
    None, # 433
    None, # 434
    None, # 435
    None, # 436
    None, # 437
    None, # 438
    None, # 439
    None, # 440
    None, # 441
    None, # 442
    None, # 443
    None, # 444
    None, # 445
    None, # 446
    None, # 447
    None, # 448
    None, # 449
    None, # 450
    None, # 451
    None, # 452
    None, # 453
    None, # 454
    None, # 455
    None, # 456
    None, # 457
    None, # 458
    None, # 459
    None, # 460
    None, # 461
    None, # 462
    None, # 463
    None, # 464
    None, # 465
    None, # 466
    None, # 467
    None, # 468
    None, # 469
    None, # 470
    None, # 471
    None, # 472
    None, # 473
    None, # 474
    None, # 475
    None, # 476
    None, # 477
    None, # 478
    None, # 479
    None, # 480
    None, # 481
    None, # 482
    None, # 483
    None, # 484
    None, # 485
    None, # 486
    None, # 487
    None, # 488
    None, # 489
    None, # 490
    None, # 491
    None, # 492
    None, # 493
    None, # 494
    None, # 495
    None, # 496
    None, # 497
    None, # 498
    None, # 499
    None, # 500
    None, # 501
    None, # 502
    None, # 503
    None, # 504
    None, # 505
    None, # 506
    None, # 507
    None, # 508
    None, # 509
    None, # 510
    None, # 511
    None, # 512
    None, # 513
    None, # 514
    None, # 515
    None, # 516
    None, # 517
    None, # 518
    None, # 519
    None, # 520
    (521, TType.DOUBLE, 'requested_memonheap', None, None, ), # 521
    (522, TType.DOUBLE, 'requested_memoffheap', None, None, ), # 522
    (523, TType.DOUBLE, 'requested_cpu', None, None, ), # 523
    (524, TType.DOUBLE, 'assigned_memonheap', None, None, ), # 524
    (525, TType.DOUBLE, 'assigned_memoffheap', None, None, ), # 525
    (526, TType.DOUBLE, 'assigned_cpu', None, None, ), # 526
    (527, TType.DOUBLE, 'requested_regular_on_heap_memory', None, None, ), # 527
    (528, TType.DOUBLE, 'requested_shared_on_heap_memory', None, None, ), # 528
    (529, TType.DOUBLE, 'requested_regular_off_heap_memory', None, None, ), # 529
    (530, TType.DOUBLE, 'requested_shared_off_heap_memory', None, None, ), # 530
    (531, TType.DOUBLE, 'assigned_regular_on_heap_memory', None, None, ), # 531
    (532, TType.DOUBLE, 'assigned_shared_on_heap_memory', None, None, ), # 532
    (533, TType.DOUBLE, 'assigned_regular_off_heap_memory', None, None, ), # 533
    (534, TType.DOUBLE, 'assigned_shared_off_heap_memory', None, None, ), # 534
  )

  def __init__(self, id=None, name=None, uptime_secs=None, status=None, num_tasks=None, num_workers=None, num_executors=None, topology_conf=None, id_to_spout_agg_stats=None, id_to_bolt_agg_stats=None, sched_status=None, topology_stats=None, owner=None, workers=None, errors=None, topology_version=None, requested_memonheap=None, requested_memoffheap=None, requested_cpu=None, assigned_memonheap=None, assigned_memoffheap=None, assigned_cpu=None, requested_regular_on_heap_memory=None, requested_shared_on_heap_memory=None, requested_regular_off_heap_memory=None, requested_shared_off_heap_memory=None, assigned_regular_on_heap_memory=None, assigned_shared_on_heap_memory=None, assigned_regular_off_heap_memory=None, assigned_shared_off_heap_memory=None,):
    self.id = id
    self.name = name
    self.uptime_secs = uptime_secs
    self.status = status
    self.num_tasks = num_tasks
    self.num_workers = num_workers
    self.num_executors = num_executors
    self.topology_conf = topology_conf
    self.id_to_spout_agg_stats = id_to_spout_agg_stats
    self.id_to_bolt_agg_stats = id_to_bolt_agg_stats
    self.sched_status = sched_status
    self.topology_stats = topology_stats
    self.owner = owner
    self.workers = workers
    self.errors = errors
    self.topology_version = topology_version
    self.requested_memonheap = requested_memonheap
    self.requested_memoffheap = requested_memoffheap
    self.requested_cpu = requested_cpu
    self.assigned_memonheap = assigned_memonheap
    self.assigned_memoffheap = assigned_memoffheap
    self.assigned_cpu = assigned_cpu
    self.requested_regular_on_heap_memory = requested_regular_on_heap_memory
    self.requested_shared_on_heap_memory = requested_shared_on_heap_memory
    self.requested_regular_off_heap_memory = requested_regular_off_heap_memory
    self.requested_shared_off_heap_memory = requested_shared_off_heap_memory
    self.assigned_regular_on_heap_memory = assigned_regular_on_heap_memory
    self.assigned_shared_on_heap_memory = assigned_shared_on_heap_memory
    self.assigned_regular_off_heap_memory = assigned_regular_off_heap_memory
    self.assigned_shared_off_heap_memory = assigned_shared_off_heap_memory

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.uptime_secs = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.status = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.num_tasks = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.num_workers = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.num_executors = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.topology_conf = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.MAP:
          self.id_to_spout_agg_stats = {}
          (_ktype395, _vtype396, _size394 ) = iprot.readMapBegin()
          for _i398 in xrange(_size394):
            _key399 = iprot.readString().decode('utf-8')
            _val400 = ComponentAggregateStats()
            _val400.read(iprot)
            self.id_to_spout_agg_stats[_key399] = _val400
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.MAP:
          self.id_to_bolt_agg_stats = {}
          (_ktype402, _vtype403, _size401 ) = iprot.readMapBegin()
          for _i405 in xrange(_size401):
            _key406 = iprot.readString().decode('utf-8')
            _val407 = ComponentAggregateStats()
            _val407.read(iprot)
            self.id_to_bolt_agg_stats[_key406] = _val407
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.sched_status = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRUCT:
          self.topology_stats = TopologyStats()
          self.topology_stats.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.owner = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.LIST:
          self.workers = []
          (_etype411, _size408) = iprot.readListBegin()
          for _i412 in xrange(_size408):
            _elem413 = WorkerSummary()
            _elem413.read(iprot)
            self.workers.append(_elem413)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.LIST:
          self.errors = []
          (_etype417, _size414) = iprot.readListBegin()
          for _i418 in xrange(_size414):
            _elem419 = ErrorInfo()
            _elem419.read(iprot)
            self.errors.append(_elem419)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.topology_version = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 521:
        if ftype == TType.DOUBLE:
          self.requested_memonheap = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 522:
        if ftype == TType.DOUBLE:
          self.requested_memoffheap = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 523:
        if ftype == TType.DOUBLE:
          self.requested_cpu = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 524:
        if ftype == TType.DOUBLE:
          self.assigned_memonheap = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 525:
        if ftype == TType.DOUBLE:
          self.assigned_memoffheap = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 526:
        if ftype == TType.DOUBLE:
          self.assigned_cpu = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 527:
        if ftype == TType.DOUBLE:
          self.requested_regular_on_heap_memory = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 528:
        if ftype == TType.DOUBLE:
          self.requested_shared_on_heap_memory = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 529:
        if ftype == TType.DOUBLE:
          self.requested_regular_off_heap_memory = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 530:
        if ftype == TType.DOUBLE:
          self.requested_shared_off_heap_memory = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 531:
        if ftype == TType.DOUBLE:
          self.assigned_regular_on_heap_memory = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 532:
        if ftype == TType.DOUBLE:
          self.assigned_shared_on_heap_memory = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 533:
        if ftype == TType.DOUBLE:
          self.assigned_regular_off_heap_memory = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 534:
        if ftype == TType.DOUBLE:
          self.assigned_shared_off_heap_memory = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TopologyPageInfo')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.uptime_secs is not None:
      oprot.writeFieldBegin('uptime_secs', TType.I32, 3)
      oprot.writeI32(self.uptime_secs)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRING, 4)
      oprot.writeString(self.status.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.num_tasks is not None:
      oprot.writeFieldBegin('num_tasks', TType.I32, 5)
      oprot.writeI32(self.num_tasks)
      oprot.writeFieldEnd()
    if self.num_workers is not None:
      oprot.writeFieldBegin('num_workers', TType.I32, 6)
      oprot.writeI32(self.num_workers)
      oprot.writeFieldEnd()
    if self.num_executors is not None:
      oprot.writeFieldBegin('num_executors', TType.I32, 7)
      oprot.writeI32(self.num_executors)
      oprot.writeFieldEnd()
    if self.topology_conf is not None:
      oprot.writeFieldBegin('topology_conf', TType.STRING, 8)
      oprot.writeString(self.topology_conf.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.id_to_spout_agg_stats is not None:
      oprot.writeFieldBegin('id_to_spout_agg_stats', TType.MAP, 9)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.id_to_spout_agg_stats))
      for kiter420,viter421 in self.id_to_spout_agg_stats.items():
        oprot.writeString(kiter420.encode('utf-8'))
        viter421.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.id_to_bolt_agg_stats is not None:
      oprot.writeFieldBegin('id_to_bolt_agg_stats', TType.MAP, 10)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.id_to_bolt_agg_stats))
      for kiter422,viter423 in self.id_to_bolt_agg_stats.items():
        oprot.writeString(kiter422.encode('utf-8'))
        viter423.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.sched_status is not None:
      oprot.writeFieldBegin('sched_status', TType.STRING, 11)
      oprot.writeString(self.sched_status.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.topology_stats is not None:
      oprot.writeFieldBegin('topology_stats', TType.STRUCT, 12)
      self.topology_stats.write(oprot)
      oprot.writeFieldEnd()
    if self.owner is not None:
      oprot.writeFieldBegin('owner', TType.STRING, 13)
      oprot.writeString(self.owner.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.workers is not None:
      oprot.writeFieldBegin('workers', TType.LIST, 14)
      oprot.writeListBegin(TType.STRUCT, len(self.workers))
      for iter424 in self.workers:
        iter424.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.errors is not None:
      oprot.writeFieldBegin('errors', TType.LIST, 15)
      oprot.writeListBegin(TType.STRUCT, len(self.errors))
      for iter425 in self.errors:
        iter425.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.topology_version is not None:
      oprot.writeFieldBegin('topology_version', TType.STRING, 18)
      oprot.writeString(self.topology_version.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.requested_memonheap is not None:
      oprot.writeFieldBegin('requested_memonheap', TType.DOUBLE, 521)
      oprot.writeDouble(self.requested_memonheap)
      oprot.writeFieldEnd()
    if self.requested_memoffheap is not None:
      oprot.writeFieldBegin('requested_memoffheap', TType.DOUBLE, 522)
      oprot.writeDouble(self.requested_memoffheap)
      oprot.writeFieldEnd()
    if self.requested_cpu is not None:
      oprot.writeFieldBegin('requested_cpu', TType.DOUBLE, 523)
      oprot.writeDouble(self.requested_cpu)
      oprot.writeFieldEnd()
    if self.assigned_memonheap is not None:
      oprot.writeFieldBegin('assigned_memonheap', TType.DOUBLE, 524)
      oprot.writeDouble(self.assigned_memonheap)
      oprot.writeFieldEnd()
    if self.assigned_memoffheap is not None:
      oprot.writeFieldBegin('assigned_memoffheap', TType.DOUBLE, 525)
      oprot.writeDouble(self.assigned_memoffheap)
      oprot.writeFieldEnd()
    if self.assigned_cpu is not None:
      oprot.writeFieldBegin('assigned_cpu', TType.DOUBLE, 526)
      oprot.writeDouble(self.assigned_cpu)
      oprot.writeFieldEnd()
    if self.requested_regular_on_heap_memory is not None:
      oprot.writeFieldBegin('requested_regular_on_heap_memory', TType.DOUBLE, 527)
      oprot.writeDouble(self.requested_regular_on_heap_memory)
      oprot.writeFieldEnd()
    if self.requested_shared_on_heap_memory is not None:
      oprot.writeFieldBegin('requested_shared_on_heap_memory', TType.DOUBLE, 528)
      oprot.writeDouble(self.requested_shared_on_heap_memory)
      oprot.writeFieldEnd()
    if self.requested_regular_off_heap_memory is not None:
      oprot.writeFieldBegin('requested_regular_off_heap_memory', TType.DOUBLE, 529)
      oprot.writeDouble(self.requested_regular_off_heap_memory)
      oprot.writeFieldEnd()
    if self.requested_shared_off_heap_memory is not None:
      oprot.writeFieldBegin('requested_shared_off_heap_memory', TType.DOUBLE, 530)
      oprot.writeDouble(self.requested_shared_off_heap_memory)
      oprot.writeFieldEnd()
    if self.assigned_regular_on_heap_memory is not None:
      oprot.writeFieldBegin('assigned_regular_on_heap_memory', TType.DOUBLE, 531)
      oprot.writeDouble(self.assigned_regular_on_heap_memory)
      oprot.writeFieldEnd()
    if self.assigned_shared_on_heap_memory is not None:
      oprot.writeFieldBegin('assigned_shared_on_heap_memory', TType.DOUBLE, 532)
      oprot.writeDouble(self.assigned_shared_on_heap_memory)
      oprot.writeFieldEnd()
    if self.assigned_regular_off_heap_memory is not None:
      oprot.writeFieldBegin('assigned_regular_off_heap_memory', TType.DOUBLE, 533)
      oprot.writeDouble(self.assigned_regular_off_heap_memory)
      oprot.writeFieldEnd()
    if self.assigned_shared_off_heap_memory is not None:
      oprot.writeFieldBegin('assigned_shared_off_heap_memory', TType.DOUBLE, 534)
      oprot.writeDouble(self.assigned_shared_off_heap_memory)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.uptime_secs)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.num_tasks)
    value = (value * 31) ^ hash(self.num_workers)
    value = (value * 31) ^ hash(self.num_executors)
    value = (value * 31) ^ hash(self.topology_conf)
    value = (value * 31) ^ hash(self.id_to_spout_agg_stats)
    value = (value * 31) ^ hash(self.id_to_bolt_agg_stats)
    value = (value * 31) ^ hash(self.sched_status)
    value = (value * 31) ^ hash(self.topology_stats)
    value = (value * 31) ^ hash(self.owner)
    value = (value * 31) ^ hash(self.workers)
    value = (value * 31) ^ hash(self.errors)
    value = (value * 31) ^ hash(self.topology_version)
    value = (value * 31) ^ hash(self.requested_memonheap)
    value = (value * 31) ^ hash(self.requested_memoffheap)
    value = (value * 31) ^ hash(self.requested_cpu)
    value = (value * 31) ^ hash(self.assigned_memonheap)
    value = (value * 31) ^ hash(self.assigned_memoffheap)
    value = (value * 31) ^ hash(self.assigned_cpu)
    value = (value * 31) ^ hash(self.requested_regular_on_heap_memory)
    value = (value * 31) ^ hash(self.requested_shared_on_heap_memory)
    value = (value * 31) ^ hash(self.requested_regular_off_heap_memory)
    value = (value * 31) ^ hash(self.requested_shared_off_heap_memory)
    value = (value * 31) ^ hash(self.assigned_regular_on_heap_memory)
    value = (value * 31) ^ hash(self.assigned_shared_on_heap_memory)
    value = (value * 31) ^ hash(self.assigned_regular_off_heap_memory)
    value = (value * 31) ^ hash(self.assigned_shared_off_heap_memory)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ExecutorAggregateStats:
  """
  Attributes:
   - exec_summary
   - stats
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'exec_summary', (ExecutorSummary, ExecutorSummary.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'stats', (ComponentAggregateStats, ComponentAggregateStats.thrift_spec), None, ), # 2
  )

  def __init__(self, exec_summary=None, stats=None,):
    self.exec_summary = exec_summary
    self.stats = stats

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.exec_summary = ExecutorSummary()
          self.exec_summary.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.stats = ComponentAggregateStats()
          self.stats.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ExecutorAggregateStats')
    if self.exec_summary is not None:
      oprot.writeFieldBegin('exec_summary', TType.STRUCT, 1)
      self.exec_summary.write(oprot)
      oprot.writeFieldEnd()
    if self.stats is not None:
      oprot.writeFieldBegin('stats', TType.STRUCT, 2)
      self.stats.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.exec_summary)
    value = (value * 31) ^ hash(self.stats)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ComponentPageInfo:
  """
  Attributes:
   - component_id
   - component_type
   - topology_id
   - topology_name
   - num_executors
   - num_tasks
   - window_to_stats
   - gsid_to_input_stats
   - sid_to_output_stats
   - exec_stats
   - errors
   - resources_map
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'component_id', None, None, ), # 1
    (2, TType.I32, 'component_type', None, None, ), # 2
    (3, TType.STRING, 'topology_id', None, None, ), # 3
    (4, TType.STRING, 'topology_name', None, None, ), # 4
    (5, TType.I32, 'num_executors', None, None, ), # 5
    (6, TType.I32, 'num_tasks', None, None, ), # 6
    (7, TType.MAP, 'window_to_stats', (TType.STRING,None,TType.STRUCT,(ComponentAggregateStats, ComponentAggregateStats.thrift_spec)), None, ), # 7
    (8, TType.MAP, 'gsid_to_input_stats', (TType.STRUCT,(GlobalStreamId, GlobalStreamId.thrift_spec),TType.STRUCT,(ComponentAggregateStats, ComponentAggregateStats.thrift_spec)), None, ), # 8
    (9, TType.MAP, 'sid_to_output_stats', (TType.STRING,None,TType.STRUCT,(ComponentAggregateStats, ComponentAggregateStats.thrift_spec)), None, ), # 9
    (10, TType.LIST, 'exec_stats', (TType.STRUCT,(ExecutorAggregateStats, ExecutorAggregateStats.thrift_spec)), None, ), # 10
    (11, TType.LIST, 'errors', (TType.STRUCT,(ErrorInfo, ErrorInfo.thrift_spec)), None, ), # 11
    (12, TType.MAP, 'resources_map', (TType.STRING,None,TType.DOUBLE,None), None, ), # 12
  )

  def __init__(self, component_id=None, component_type=None, topology_id=None, topology_name=None, num_executors=None, num_tasks=None, window_to_stats=None, gsid_to_input_stats=None, sid_to_output_stats=None, exec_stats=None, errors=None, resources_map=None,):
    self.component_id = component_id
    self.component_type = component_type
    self.topology_id = topology_id
    self.topology_name = topology_name
    self.num_executors = num_executors
    self.num_tasks = num_tasks
    self.window_to_stats = window_to_stats
    self.gsid_to_input_stats = gsid_to_input_stats
    self.sid_to_output_stats = sid_to_output_stats
    self.exec_stats = exec_stats
    self.errors = errors
    self.resources_map = resources_map

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.component_id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.component_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.topology_id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.topology_name = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.num_executors = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.num_tasks = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.MAP:
          self.window_to_stats = {}
          (_ktype427, _vtype428, _size426 ) = iprot.readMapBegin()
          for _i430 in xrange(_size426):
            _key431 = iprot.readString().decode('utf-8')
            _val432 = ComponentAggregateStats()
            _val432.read(iprot)
            self.window_to_stats[_key431] = _val432
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.MAP:
          self.gsid_to_input_stats = {}
          (_ktype434, _vtype435, _size433 ) = iprot.readMapBegin()
          for _i437 in xrange(_size433):
            _key438 = GlobalStreamId()
            _key438.read(iprot)
            _val439 = ComponentAggregateStats()
            _val439.read(iprot)
            self.gsid_to_input_stats[_key438] = _val439
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.MAP:
          self.sid_to_output_stats = {}
          (_ktype441, _vtype442, _size440 ) = iprot.readMapBegin()
          for _i444 in xrange(_size440):
            _key445 = iprot.readString().decode('utf-8')
            _val446 = ComponentAggregateStats()
            _val446.read(iprot)
            self.sid_to_output_stats[_key445] = _val446
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.exec_stats = []
          (_etype450, _size447) = iprot.readListBegin()
          for _i451 in xrange(_size447):
            _elem452 = ExecutorAggregateStats()
            _elem452.read(iprot)
            self.exec_stats.append(_elem452)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.LIST:
          self.errors = []
          (_etype456, _size453) = iprot.readListBegin()
          for _i457 in xrange(_size453):
            _elem458 = ErrorInfo()
            _elem458.read(iprot)
            self.errors.append(_elem458)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.MAP:
          self.resources_map = {}
          (_ktype460, _vtype461, _size459 ) = iprot.readMapBegin()
          for _i463 in xrange(_size459):
            _key464 = iprot.readString().decode('utf-8')
            _val465 = iprot.readDouble()
            self.resources_map[_key464] = _val465
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ComponentPageInfo')
    if self.component_id is not None:
      oprot.writeFieldBegin('component_id', TType.STRING, 1)
      oprot.writeString(self.component_id.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.component_type is not None:
      oprot.writeFieldBegin('component_type', TType.I32, 2)
      oprot.writeI32(self.component_type)
      oprot.writeFieldEnd()
    if self.topology_id is not None:
      oprot.writeFieldBegin('topology_id', TType.STRING, 3)
      oprot.writeString(self.topology_id.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.topology_name is not None:
      oprot.writeFieldBegin('topology_name', TType.STRING, 4)
      oprot.writeString(self.topology_name.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.num_executors is not None:
      oprot.writeFieldBegin('num_executors', TType.I32, 5)
      oprot.writeI32(self.num_executors)
      oprot.writeFieldEnd()
    if self.num_tasks is not None:
      oprot.writeFieldBegin('num_tasks', TType.I32, 6)
      oprot.writeI32(self.num_tasks)
      oprot.writeFieldEnd()
    if self.window_to_stats is not None:
      oprot.writeFieldBegin('window_to_stats', TType.MAP, 7)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.window_to_stats))
      for kiter466,viter467 in self.window_to_stats.items():
        oprot.writeString(kiter466.encode('utf-8'))
        viter467.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.gsid_to_input_stats is not None:
      oprot.writeFieldBegin('gsid_to_input_stats', TType.MAP, 8)
      oprot.writeMapBegin(TType.STRUCT, TType.STRUCT, len(self.gsid_to_input_stats))
      for kiter468,viter469 in self.gsid_to_input_stats.items():
        kiter468.write(oprot)
        viter469.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.sid_to_output_stats is not None:
      oprot.writeFieldBegin('sid_to_output_stats', TType.MAP, 9)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.sid_to_output_stats))
      for kiter470,viter471 in self.sid_to_output_stats.items():
        oprot.writeString(kiter470.encode('utf-8'))
        viter471.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.exec_stats is not None:
      oprot.writeFieldBegin('exec_stats', TType.LIST, 10)
      oprot.writeListBegin(TType.STRUCT, len(self.exec_stats))
      for iter472 in self.exec_stats:
        iter472.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.errors is not None:
      oprot.writeFieldBegin('errors', TType.LIST, 11)
      oprot.writeListBegin(TType.STRUCT, len(self.errors))
      for iter473 in self.errors:
        iter473.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.resources_map is not None:
      oprot.writeFieldBegin('resources_map', TType.MAP, 12)
      oprot.writeMapBegin(TType.STRING, TType.DOUBLE, len(self.resources_map))
      for kiter474,viter475 in self.resources_map.items():
        oprot.writeString(kiter474.encode('utf-8'))
        oprot.writeDouble(viter475)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.component_id is None:
      raise TProtocol.TProtocolException(message='Required field component_id is unset!')
    if self.component_type is None:
      raise TProtocol.TProtocolException(message='Required field component_type is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.component_id)
    value = (value * 31) ^ hash(self.component_type)
    value = (value * 31) ^ hash(self.topology_id)
    value = (value * 31) ^ hash(self.topology_name)
    value = (value * 31) ^ hash(self.num_executors)
    value = (value * 31) ^ hash(self.num_tasks)
    value = (value * 31) ^ hash(self.window_to_stats)
    value = (value * 31) ^ hash(self.gsid_to_input_stats)
    value = (value * 31) ^ hash(self.sid_to_output_stats)
    value = (value * 31) ^ hash(self.exec_stats)
    value = (value * 31) ^ hash(self.errors)
    value = (value * 31) ^ hash(self.resources_map)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class KillOptions:
  """
  Attributes:
   - wait_secs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'wait_secs', None, None, ), # 1
  )

  def __init__(self, wait_secs=None,):
    self.wait_secs = wait_secs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.wait_secs = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('KillOptions')
    if self.wait_secs is not None:
      oprot.writeFieldBegin('wait_secs', TType.I32, 1)
      oprot.writeI32(self.wait_secs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.wait_secs)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RebalanceOptions:
  """
  Attributes:
   - wait_secs
   - num_workers
   - num_executors
   - topology_resources_overrides
   - topology_conf_overrides
   - principal
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'wait_secs', None, None, ), # 1
    (2, TType.I32, 'num_workers', None, None, ), # 2
    (3, TType.MAP, 'num_executors', (TType.STRING,None,TType.I32,None), None, ), # 3
    (4, TType.MAP, 'topology_resources_overrides', (TType.STRING,None,TType.MAP,(TType.STRING,None,TType.DOUBLE,None)), None, ), # 4
    (5, TType.STRING, 'topology_conf_overrides', None, None, ), # 5
    (6, TType.STRING, 'principal', None, None, ), # 6
  )

  def __init__(self, wait_secs=None, num_workers=None, num_executors=None, topology_resources_overrides=None, topology_conf_overrides=None, principal=None,):
    self.wait_secs = wait_secs
    self.num_workers = num_workers
    self.num_executors = num_executors
    self.topology_resources_overrides = topology_resources_overrides
    self.topology_conf_overrides = topology_conf_overrides
    self.principal = principal

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.wait_secs = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.num_workers = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.num_executors = {}
          (_ktype477, _vtype478, _size476 ) = iprot.readMapBegin()
          for _i480 in xrange(_size476):
            _key481 = iprot.readString().decode('utf-8')
            _val482 = iprot.readI32()
            self.num_executors[_key481] = _val482
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.topology_resources_overrides = {}
          (_ktype484, _vtype485, _size483 ) = iprot.readMapBegin()
          for _i487 in xrange(_size483):
            _key488 = iprot.readString().decode('utf-8')
            _val489 = {}
            (_ktype491, _vtype492, _size490 ) = iprot.readMapBegin()
            for _i494 in xrange(_size490):
              _key495 = iprot.readString().decode('utf-8')
              _val496 = iprot.readDouble()
              _val489[_key495] = _val496
            iprot.readMapEnd()
            self.topology_resources_overrides[_key488] = _val489
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.topology_conf_overrides = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.principal = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RebalanceOptions')
    if self.wait_secs is not None:
      oprot.writeFieldBegin('wait_secs', TType.I32, 1)
      oprot.writeI32(self.wait_secs)
      oprot.writeFieldEnd()
    if self.num_workers is not None:
      oprot.writeFieldBegin('num_workers', TType.I32, 2)
      oprot.writeI32(self.num_workers)
      oprot.writeFieldEnd()
    if self.num_executors is not None:
      oprot.writeFieldBegin('num_executors', TType.MAP, 3)
      oprot.writeMapBegin(TType.STRING, TType.I32, len(self.num_executors))
      for kiter497,viter498 in self.num_executors.items():
        oprot.writeString(kiter497.encode('utf-8'))
        oprot.writeI32(viter498)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.topology_resources_overrides is not None:
      oprot.writeFieldBegin('topology_resources_overrides', TType.MAP, 4)
      oprot.writeMapBegin(TType.STRING, TType.MAP, len(self.topology_resources_overrides))
      for kiter499,viter500 in self.topology_resources_overrides.items():
        oprot.writeString(kiter499.encode('utf-8'))
        oprot.writeMapBegin(TType.STRING, TType.DOUBLE, len(viter500))
        for kiter501,viter502 in viter500.items():
          oprot.writeString(kiter501.encode('utf-8'))
          oprot.writeDouble(viter502)
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.topology_conf_overrides is not None:
      oprot.writeFieldBegin('topology_conf_overrides', TType.STRING, 5)
      oprot.writeString(self.topology_conf_overrides.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.principal is not None:
      oprot.writeFieldBegin('principal', TType.STRING, 6)
      oprot.writeString(self.principal.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.wait_secs)
    value = (value * 31) ^ hash(self.num_workers)
    value = (value * 31) ^ hash(self.num_executors)
    value = (value * 31) ^ hash(self.topology_resources_overrides)
    value = (value * 31) ^ hash(self.topology_conf_overrides)
    value = (value * 31) ^ hash(self.principal)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Credentials:
  """
  Attributes:
   - creds
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'creds', (TType.STRING,None,TType.STRING,None), None, ), # 1
  )

  def __init__(self, creds=None,):
    self.creds = creds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.creds = {}
          (_ktype504, _vtype505, _size503 ) = iprot.readMapBegin()
          for _i507 in xrange(_size503):
            _key508 = iprot.readString().decode('utf-8')
            _val509 = iprot.readString().decode('utf-8')
            self.creds[_key508] = _val509
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Credentials')
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.MAP, 1)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.creds))
      for kiter510,viter511 in self.creds.items():
        oprot.writeString(kiter510.encode('utf-8'))
        oprot.writeString(viter511.encode('utf-8'))
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.creds is None:
      raise TProtocol.TProtocolException(message='Required field creds is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.creds)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SubmitOptions:
  """
  Attributes:
   - initial_status
   - creds
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'initial_status', None, None, ), # 1
    (2, TType.STRUCT, 'creds', (Credentials, Credentials.thrift_spec), None, ), # 2
  )

  def __init__(self, initial_status=None, creds=None,):
    self.initial_status = initial_status
    self.creds = creds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.initial_status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.creds = Credentials()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SubmitOptions')
    if self.initial_status is not None:
      oprot.writeFieldBegin('initial_status', TType.I32, 1)
      oprot.writeI32(self.initial_status)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 2)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.initial_status is None:
      raise TProtocol.TProtocolException(message='Required field initial_status is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.initial_status)
    value = (value * 31) ^ hash(self.creds)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AccessControl:
  """
  Attributes:
   - type
   - name
   - access
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.I32, 'access', None, None, ), # 3
  )

  def __init__(self, type=None, name=None, access=None,):
    self.type = type
    self.name = name
    self.access = access

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.access = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AccessControl')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 1)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.access is not None:
      oprot.writeFieldBegin('access', TType.I32, 3)
      oprot.writeI32(self.access)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    if self.access is None:
      raise TProtocol.TProtocolException(message='Required field access is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.access)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SettableBlobMeta:
  """
  Attributes:
   - acl
   - replication_factor
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'acl', (TType.STRUCT,(AccessControl, AccessControl.thrift_spec)), None, ), # 1
    (2, TType.I32, 'replication_factor', None, None, ), # 2
  )

  def __init__(self, acl=None, replication_factor=None,):
    self.acl = acl
    self.replication_factor = replication_factor

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.acl = []
          (_etype515, _size512) = iprot.readListBegin()
          for _i516 in xrange(_size512):
            _elem517 = AccessControl()
            _elem517.read(iprot)
            self.acl.append(_elem517)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.replication_factor = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SettableBlobMeta')
    if self.acl is not None:
      oprot.writeFieldBegin('acl', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.acl))
      for iter518 in self.acl:
        iter518.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.replication_factor is not None:
      oprot.writeFieldBegin('replication_factor', TType.I32, 2)
      oprot.writeI32(self.replication_factor)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.acl is None:
      raise TProtocol.TProtocolException(message='Required field acl is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.acl)
    value = (value * 31) ^ hash(self.replication_factor)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReadableBlobMeta:
  """
  Attributes:
   - settable
   - version
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'settable', (SettableBlobMeta, SettableBlobMeta.thrift_spec), None, ), # 1
    (2, TType.I64, 'version', None, None, ), # 2
  )

  def __init__(self, settable=None, version=None,):
    self.settable = settable
    self.version = version

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.settable = SettableBlobMeta()
          self.settable.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.version = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReadableBlobMeta')
    if self.settable is not None:
      oprot.writeFieldBegin('settable', TType.STRUCT, 1)
      self.settable.write(oprot)
      oprot.writeFieldEnd()
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.I64, 2)
      oprot.writeI64(self.version)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.settable is None:
      raise TProtocol.TProtocolException(message='Required field settable is unset!')
    if self.version is None:
      raise TProtocol.TProtocolException(message='Required field version is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.settable)
    value = (value * 31) ^ hash(self.version)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ListBlobsResult:
  """
  Attributes:
   - keys
   - session
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'keys', (TType.STRING,None), None, ), # 1
    (2, TType.STRING, 'session', None, None, ), # 2
  )

  def __init__(self, keys=None, session=None,):
    self.keys = keys
    self.session = session

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.keys = []
          (_etype522, _size519) = iprot.readListBegin()
          for _i523 in xrange(_size519):
            _elem524 = iprot.readString().decode('utf-8')
            self.keys.append(_elem524)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.session = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ListBlobsResult')
    if self.keys is not None:
      oprot.writeFieldBegin('keys', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.keys))
      for iter525 in self.keys:
        oprot.writeString(iter525.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.session is not None:
      oprot.writeFieldBegin('session', TType.STRING, 2)
      oprot.writeString(self.session.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.keys is None:
      raise TProtocol.TProtocolException(message='Required field keys is unset!')
    if self.session is None:
      raise TProtocol.TProtocolException(message='Required field session is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.keys)
    value = (value * 31) ^ hash(self.session)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BeginDownloadResult:
  """
  Attributes:
   - version
   - session
   - data_size
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'version', None, None, ), # 1
    (2, TType.STRING, 'session', None, None, ), # 2
    (3, TType.I64, 'data_size', None, None, ), # 3
  )

  def __init__(self, version=None, session=None, data_size=None,):
    self.version = version
    self.session = session
    self.data_size = data_size

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.version = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.session = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.data_size = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BeginDownloadResult')
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.I64, 1)
      oprot.writeI64(self.version)
      oprot.writeFieldEnd()
    if self.session is not None:
      oprot.writeFieldBegin('session', TType.STRING, 2)
      oprot.writeString(self.session.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.data_size is not None:
      oprot.writeFieldBegin('data_size', TType.I64, 3)
      oprot.writeI64(self.data_size)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.version is None:
      raise TProtocol.TProtocolException(message='Required field version is unset!')
    if self.session is None:
      raise TProtocol.TProtocolException(message='Required field session is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.version)
    value = (value * 31) ^ hash(self.session)
    value = (value * 31) ^ hash(self.data_size)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SupervisorInfo:
  """
  Attributes:
   - time_secs
   - hostname
   - assignment_id
   - used_ports
   - meta
   - scheduler_meta
   - uptime_secs
   - version
   - resources_map
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'time_secs', None, None, ), # 1
    (2, TType.STRING, 'hostname', None, None, ), # 2
    (3, TType.STRING, 'assignment_id', None, None, ), # 3
    (4, TType.LIST, 'used_ports', (TType.I64,None), None, ), # 4
    (5, TType.LIST, 'meta', (TType.I64,None), None, ), # 5
    (6, TType.MAP, 'scheduler_meta', (TType.STRING,None,TType.STRING,None), None, ), # 6
    (7, TType.I64, 'uptime_secs', None, None, ), # 7
    (8, TType.STRING, 'version', None, None, ), # 8
    (9, TType.MAP, 'resources_map', (TType.STRING,None,TType.DOUBLE,None), None, ), # 9
  )

  def __init__(self, time_secs=None, hostname=None, assignment_id=None, used_ports=None, meta=None, scheduler_meta=None, uptime_secs=None, version=None, resources_map=None,):
    self.time_secs = time_secs
    self.hostname = hostname
    self.assignment_id = assignment_id
    self.used_ports = used_ports
    self.meta = meta
    self.scheduler_meta = scheduler_meta
    self.uptime_secs = uptime_secs
    self.version = version
    self.resources_map = resources_map

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.time_secs = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.hostname = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.assignment_id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.used_ports = []
          (_etype529, _size526) = iprot.readListBegin()
          for _i530 in xrange(_size526):
            _elem531 = iprot.readI64()
            self.used_ports.append(_elem531)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.meta = []
          (_etype535, _size532) = iprot.readListBegin()
          for _i536 in xrange(_size532):
            _elem537 = iprot.readI64()
            self.meta.append(_elem537)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.MAP:
          self.scheduler_meta = {}
          (_ktype539, _vtype540, _size538 ) = iprot.readMapBegin()
          for _i542 in xrange(_size538):
            _key543 = iprot.readString().decode('utf-8')
            _val544 = iprot.readString().decode('utf-8')
            self.scheduler_meta[_key543] = _val544
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.uptime_secs = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.version = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.MAP:
          self.resources_map = {}
          (_ktype546, _vtype547, _size545 ) = iprot.readMapBegin()
          for _i549 in xrange(_size545):
            _key550 = iprot.readString().decode('utf-8')
            _val551 = iprot.readDouble()
            self.resources_map[_key550] = _val551
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SupervisorInfo')
    if self.time_secs is not None:
      oprot.writeFieldBegin('time_secs', TType.I64, 1)
      oprot.writeI64(self.time_secs)
      oprot.writeFieldEnd()
    if self.hostname is not None:
      oprot.writeFieldBegin('hostname', TType.STRING, 2)
      oprot.writeString(self.hostname.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.assignment_id is not None:
      oprot.writeFieldBegin('assignment_id', TType.STRING, 3)
      oprot.writeString(self.assignment_id.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.used_ports is not None:
      oprot.writeFieldBegin('used_ports', TType.LIST, 4)
      oprot.writeListBegin(TType.I64, len(self.used_ports))
      for iter552 in self.used_ports:
        oprot.writeI64(iter552)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.meta is not None:
      oprot.writeFieldBegin('meta', TType.LIST, 5)
      oprot.writeListBegin(TType.I64, len(self.meta))
      for iter553 in self.meta:
        oprot.writeI64(iter553)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.scheduler_meta is not None:
      oprot.writeFieldBegin('scheduler_meta', TType.MAP, 6)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.scheduler_meta))
      for kiter554,viter555 in self.scheduler_meta.items():
        oprot.writeString(kiter554.encode('utf-8'))
        oprot.writeString(viter555.encode('utf-8'))
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.uptime_secs is not None:
      oprot.writeFieldBegin('uptime_secs', TType.I64, 7)
      oprot.writeI64(self.uptime_secs)
      oprot.writeFieldEnd()
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.STRING, 8)
      oprot.writeString(self.version.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.resources_map is not None:
      oprot.writeFieldBegin('resources_map', TType.MAP, 9)
      oprot.writeMapBegin(TType.STRING, TType.DOUBLE, len(self.resources_map))
      for kiter556,viter557 in self.resources_map.items():
        oprot.writeString(kiter556.encode('utf-8'))
        oprot.writeDouble(viter557)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.time_secs is None:
      raise TProtocol.TProtocolException(message='Required field time_secs is unset!')
    if self.hostname is None:
      raise TProtocol.TProtocolException(message='Required field hostname is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.time_secs)
    value = (value * 31) ^ hash(self.hostname)
    value = (value * 31) ^ hash(self.assignment_id)
    value = (value * 31) ^ hash(self.used_ports)
    value = (value * 31) ^ hash(self.meta)
    value = (value * 31) ^ hash(self.scheduler_meta)
    value = (value * 31) ^ hash(self.uptime_secs)
    value = (value * 31) ^ hash(self.version)
    value = (value * 31) ^ hash(self.resources_map)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NodeInfo:
  """
  Attributes:
   - node
   - port
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'node', None, None, ), # 1
    (2, TType.SET, 'port', (TType.I64,None), None, ), # 2
  )

  def __init__(self, node=None, port=None,):
    self.node = node
    self.port = port

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.node = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.SET:
          self.port = set()
          (_etype561, _size558) = iprot.readSetBegin()
          for _i562 in xrange(_size558):
            _elem563 = iprot.readI64()
            self.port.add(_elem563)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NodeInfo')
    if self.node is not None:
      oprot.writeFieldBegin('node', TType.STRING, 1)
      oprot.writeString(self.node.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.port is not None:
      oprot.writeFieldBegin('port', TType.SET, 2)
      oprot.writeSetBegin(TType.I64, len(self.port))
      for iter564 in self.port:
        oprot.writeI64(iter564)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.node is None:
      raise TProtocol.TProtocolException(message='Required field node is unset!')
    if self.port is None:
      raise TProtocol.TProtocolException(message='Required field port is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.node)
    value = (value * 31) ^ hash(self.port)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WorkerResources:
  """
  Attributes:
   - mem_on_heap
   - mem_off_heap
   - cpu
   - shared_mem_on_heap
   - shared_mem_off_heap
   - resources
   - shared_resources
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'mem_on_heap', None, None, ), # 1
    (2, TType.DOUBLE, 'mem_off_heap', None, None, ), # 2
    (3, TType.DOUBLE, 'cpu', None, None, ), # 3
    (4, TType.DOUBLE, 'shared_mem_on_heap', None, None, ), # 4
    (5, TType.DOUBLE, 'shared_mem_off_heap', None, None, ), # 5
    (6, TType.MAP, 'resources', (TType.STRING,None,TType.DOUBLE,None), None, ), # 6
    (7, TType.MAP, 'shared_resources', (TType.STRING,None,TType.DOUBLE,None), None, ), # 7
  )

  def __init__(self, mem_on_heap=None, mem_off_heap=None, cpu=None, shared_mem_on_heap=None, shared_mem_off_heap=None, resources=None, shared_resources=None,):
    self.mem_on_heap = mem_on_heap
    self.mem_off_heap = mem_off_heap
    self.cpu = cpu
    self.shared_mem_on_heap = shared_mem_on_heap
    self.shared_mem_off_heap = shared_mem_off_heap
    self.resources = resources
    self.shared_resources = shared_resources

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.mem_on_heap = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.mem_off_heap = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.cpu = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.shared_mem_on_heap = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.shared_mem_off_heap = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.MAP:
          self.resources = {}
          (_ktype566, _vtype567, _size565 ) = iprot.readMapBegin()
          for _i569 in xrange(_size565):
            _key570 = iprot.readString().decode('utf-8')
            _val571 = iprot.readDouble()
            self.resources[_key570] = _val571
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.MAP:
          self.shared_resources = {}
          (_ktype573, _vtype574, _size572 ) = iprot.readMapBegin()
          for _i576 in xrange(_size572):
            _key577 = iprot.readString().decode('utf-8')
            _val578 = iprot.readDouble()
            self.shared_resources[_key577] = _val578
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WorkerResources')
    if self.mem_on_heap is not None:
      oprot.writeFieldBegin('mem_on_heap', TType.DOUBLE, 1)
      oprot.writeDouble(self.mem_on_heap)
      oprot.writeFieldEnd()
    if self.mem_off_heap is not None:
      oprot.writeFieldBegin('mem_off_heap', TType.DOUBLE, 2)
      oprot.writeDouble(self.mem_off_heap)
      oprot.writeFieldEnd()
    if self.cpu is not None:
      oprot.writeFieldBegin('cpu', TType.DOUBLE, 3)
      oprot.writeDouble(self.cpu)
      oprot.writeFieldEnd()
    if self.shared_mem_on_heap is not None:
      oprot.writeFieldBegin('shared_mem_on_heap', TType.DOUBLE, 4)
      oprot.writeDouble(self.shared_mem_on_heap)
      oprot.writeFieldEnd()
    if self.shared_mem_off_heap is not None:
      oprot.writeFieldBegin('shared_mem_off_heap', TType.DOUBLE, 5)
      oprot.writeDouble(self.shared_mem_off_heap)
      oprot.writeFieldEnd()
    if self.resources is not None:
      oprot.writeFieldBegin('resources', TType.MAP, 6)
      oprot.writeMapBegin(TType.STRING, TType.DOUBLE, len(self.resources))
      for kiter579,viter580 in self.resources.items():
        oprot.writeString(kiter579.encode('utf-8'))
        oprot.writeDouble(viter580)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.shared_resources is not None:
      oprot.writeFieldBegin('shared_resources', TType.MAP, 7)
      oprot.writeMapBegin(TType.STRING, TType.DOUBLE, len(self.shared_resources))
      for kiter581,viter582 in self.shared_resources.items():
        oprot.writeString(kiter581.encode('utf-8'))
        oprot.writeDouble(viter582)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mem_on_heap)
    value = (value * 31) ^ hash(self.mem_off_heap)
    value = (value * 31) ^ hash(self.cpu)
    value = (value * 31) ^ hash(self.shared_mem_on_heap)
    value = (value * 31) ^ hash(self.shared_mem_off_heap)
    value = (value * 31) ^ hash(self.resources)
    value = (value * 31) ^ hash(self.shared_resources)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Assignment:
  """
  Attributes:
   - master_code_dir
   - node_host
   - executor_node_port
   - executor_start_time_secs
   - worker_resources
   - total_shared_off_heap
   - owner
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'master_code_dir', None, None, ), # 1
    (2, TType.MAP, 'node_host', (TType.STRING,None,TType.STRING,None), {
    }, ), # 2
    (3, TType.MAP, 'executor_node_port', (TType.LIST,(TType.I64,None),TType.STRUCT,(NodeInfo, NodeInfo.thrift_spec)), {
    }, ), # 3
    (4, TType.MAP, 'executor_start_time_secs', (TType.LIST,(TType.I64,None),TType.I64,None), {
    }, ), # 4
    (5, TType.MAP, 'worker_resources', (TType.STRUCT,(NodeInfo, NodeInfo.thrift_spec),TType.STRUCT,(WorkerResources, WorkerResources.thrift_spec)), {
    }, ), # 5
    (6, TType.MAP, 'total_shared_off_heap', (TType.STRING,None,TType.DOUBLE,None), {
    }, ), # 6
    (7, TType.STRING, 'owner', None, None, ), # 7
  )

  def __init__(self, master_code_dir=None, node_host=thrift_spec[2][4], executor_node_port=thrift_spec[3][4], executor_start_time_secs=thrift_spec[4][4], worker_resources=thrift_spec[5][4], total_shared_off_heap=thrift_spec[6][4], owner=None,):
    self.master_code_dir = master_code_dir
    if node_host is self.thrift_spec[2][4]:
      node_host = {
    }
    self.node_host = node_host
    if executor_node_port is self.thrift_spec[3][4]:
      executor_node_port = {
    }
    self.executor_node_port = executor_node_port
    if executor_start_time_secs is self.thrift_spec[4][4]:
      executor_start_time_secs = {
    }
    self.executor_start_time_secs = executor_start_time_secs
    if worker_resources is self.thrift_spec[5][4]:
      worker_resources = {
    }
    self.worker_resources = worker_resources
    if total_shared_off_heap is self.thrift_spec[6][4]:
      total_shared_off_heap = {
    }
    self.total_shared_off_heap = total_shared_off_heap
    self.owner = owner

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.master_code_dir = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.node_host = {}
          (_ktype584, _vtype585, _size583 ) = iprot.readMapBegin()
          for _i587 in xrange(_size583):
            _key588 = iprot.readString().decode('utf-8')
            _val589 = iprot.readString().decode('utf-8')
            self.node_host[_key588] = _val589
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.executor_node_port = {}
          (_ktype591, _vtype592, _size590 ) = iprot.readMapBegin()
          for _i594 in xrange(_size590):
            _key595 = []
            (_etype600, _size597) = iprot.readListBegin()
            for _i601 in xrange(_size597):
              _elem602 = iprot.readI64()
              _key595.append(_elem602)
            iprot.readListEnd()
            _val596 = NodeInfo()
            _val596.read(iprot)
            self.executor_node_port[_key595] = _val596
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.executor_start_time_secs = {}
          (_ktype604, _vtype605, _size603 ) = iprot.readMapBegin()
          for _i607 in xrange(_size603):
            _key608 = []
            (_etype613, _size610) = iprot.readListBegin()
            for _i614 in xrange(_size610):
              _elem615 = iprot.readI64()
              _key608.append(_elem615)
            iprot.readListEnd()
            _val609 = iprot.readI64()
            self.executor_start_time_secs[_key608] = _val609
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.worker_resources = {}
          (_ktype617, _vtype618, _size616 ) = iprot.readMapBegin()
          for _i620 in xrange(_size616):
            _key621 = NodeInfo()
            _key621.read(iprot)
            _val622 = WorkerResources()
            _val622.read(iprot)
            self.worker_resources[_key621] = _val622
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.MAP:
          self.total_shared_off_heap = {}
          (_ktype624, _vtype625, _size623 ) = iprot.readMapBegin()
          for _i627 in xrange(_size623):
            _key628 = iprot.readString().decode('utf-8')
            _val629 = iprot.readDouble()
            self.total_shared_off_heap[_key628] = _val629
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.owner = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Assignment')
    if self.master_code_dir is not None:
      oprot.writeFieldBegin('master_code_dir', TType.STRING, 1)
      oprot.writeString(self.master_code_dir.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.node_host is not None:
      oprot.writeFieldBegin('node_host', TType.MAP, 2)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.node_host))
      for kiter630,viter631 in self.node_host.items():
        oprot.writeString(kiter630.encode('utf-8'))
        oprot.writeString(viter631.encode('utf-8'))
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.executor_node_port is not None:
      oprot.writeFieldBegin('executor_node_port', TType.MAP, 3)
      oprot.writeMapBegin(TType.LIST, TType.STRUCT, len(self.executor_node_port))
      for kiter632,viter633 in self.executor_node_port.items():
        oprot.writeListBegin(TType.I64, len(kiter632))
        for iter634 in kiter632:
          oprot.writeI64(iter634)
        oprot.writeListEnd()
        viter633.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.executor_start_time_secs is not None:
      oprot.writeFieldBegin('executor_start_time_secs', TType.MAP, 4)
      oprot.writeMapBegin(TType.LIST, TType.I64, len(self.executor_start_time_secs))
      for kiter635,viter636 in self.executor_start_time_secs.items():
        oprot.writeListBegin(TType.I64, len(kiter635))
        for iter637 in kiter635:
          oprot.writeI64(iter637)
        oprot.writeListEnd()
        oprot.writeI64(viter636)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.worker_resources is not None:
      oprot.writeFieldBegin('worker_resources', TType.MAP, 5)
      oprot.writeMapBegin(TType.STRUCT, TType.STRUCT, len(self.worker_resources))
      for kiter638,viter639 in self.worker_resources.items():
        kiter638.write(oprot)
        viter639.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.total_shared_off_heap is not None:
      oprot.writeFieldBegin('total_shared_off_heap', TType.MAP, 6)
      oprot.writeMapBegin(TType.STRING, TType.DOUBLE, len(self.total_shared_off_heap))
      for kiter640,viter641 in self.total_shared_off_heap.items():
        oprot.writeString(kiter640.encode('utf-8'))
        oprot.writeDouble(viter641)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.owner is not None:
      oprot.writeFieldBegin('owner', TType.STRING, 7)
      oprot.writeString(self.owner.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.master_code_dir is None:
      raise TProtocol.TProtocolException(message='Required field master_code_dir is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.master_code_dir)
    value = (value * 31) ^ hash(self.node_host)
    value = (value * 31) ^ hash(self.executor_node_port)
    value = (value * 31) ^ hash(self.executor_start_time_secs)
    value = (value * 31) ^ hash(self.worker_resources)
    value = (value * 31) ^ hash(self.total_shared_off_heap)
    value = (value * 31) ^ hash(self.owner)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TopologyActionOptions:
  """
  Attributes:
   - kill_options
   - rebalance_options
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'kill_options', (KillOptions, KillOptions.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'rebalance_options', (RebalanceOptions, RebalanceOptions.thrift_spec), None, ), # 2
  )

  def __init__(self, kill_options=None, rebalance_options=None,):
    self.kill_options = kill_options
    self.rebalance_options = rebalance_options

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.kill_options = KillOptions()
          self.kill_options.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.rebalance_options = RebalanceOptions()
          self.rebalance_options.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TopologyActionOptions')
    if self.kill_options is not None:
      oprot.writeFieldBegin('kill_options', TType.STRUCT, 1)
      self.kill_options.write(oprot)
      oprot.writeFieldEnd()
    if self.rebalance_options is not None:
      oprot.writeFieldBegin('rebalance_options', TType.STRUCT, 2)
      self.rebalance_options.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.kill_options)
    value = (value * 31) ^ hash(self.rebalance_options)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StormBase:
  """
  Attributes:
   - name
   - status
   - num_workers
   - component_executors
   - launch_time_secs
   - owner
   - topology_action_options
   - prev_status
   - principal
   - topology_version
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.I32, 'status', None, None, ), # 2
    (3, TType.I32, 'num_workers', None, None, ), # 3
    (4, TType.MAP, 'component_executors', (TType.STRING,None,TType.I32,None), None, ), # 4
    (5, TType.I32, 'launch_time_secs', None, None, ), # 5
    (6, TType.STRING, 'owner', None, None, ), # 6
    (7, TType.STRUCT, 'topology_action_options', (TopologyActionOptions, TopologyActionOptions.thrift_spec), None, ), # 7
    (8, TType.I32, 'prev_status', None, None, ), # 8
    None, # 9
    (10, TType.STRING, 'principal', None, None, ), # 10
    (11, TType.STRING, 'topology_version', None, None, ), # 11
  )

  def __init__(self, name=None, status=None, num_workers=None, component_executors=None, launch_time_secs=None, owner=None, topology_action_options=None, prev_status=None, principal=None, topology_version=None,):
    self.name = name
    self.status = status
    self.num_workers = num_workers
    self.component_executors = component_executors
    self.launch_time_secs = launch_time_secs
    self.owner = owner
    self.topology_action_options = topology_action_options
    self.prev_status = prev_status
    self.principal = principal
    self.topology_version = topology_version

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.num_workers = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.component_executors = {}
          (_ktype643, _vtype644, _size642 ) = iprot.readMapBegin()
          for _i646 in xrange(_size642):
            _key647 = iprot.readString().decode('utf-8')
            _val648 = iprot.readI32()
            self.component_executors[_key647] = _val648
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.launch_time_secs = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.owner = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.topology_action_options = TopologyActionOptions()
          self.topology_action_options.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.prev_status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.principal = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.topology_version = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StormBase')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 2)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.num_workers is not None:
      oprot.writeFieldBegin('num_workers', TType.I32, 3)
      oprot.writeI32(self.num_workers)
      oprot.writeFieldEnd()
    if self.component_executors is not None:
      oprot.writeFieldBegin('component_executors', TType.MAP, 4)
      oprot.writeMapBegin(TType.STRING, TType.I32, len(self.component_executors))
      for kiter649,viter650 in self.component_executors.items():
        oprot.writeString(kiter649.encode('utf-8'))
        oprot.writeI32(viter650)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.launch_time_secs is not None:
      oprot.writeFieldBegin('launch_time_secs', TType.I32, 5)
      oprot.writeI32(self.launch_time_secs)
      oprot.writeFieldEnd()
    if self.owner is not None:
      oprot.writeFieldBegin('owner', TType.STRING, 6)
      oprot.writeString(self.owner.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.topology_action_options is not None:
      oprot.writeFieldBegin('topology_action_options', TType.STRUCT, 7)
      self.topology_action_options.write(oprot)
      oprot.writeFieldEnd()
    if self.prev_status is not None:
      oprot.writeFieldBegin('prev_status', TType.I32, 8)
      oprot.writeI32(self.prev_status)
      oprot.writeFieldEnd()
    if self.principal is not None:
      oprot.writeFieldBegin('principal', TType.STRING, 10)
      oprot.writeString(self.principal.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.topology_version is not None:
      oprot.writeFieldBegin('topology_version', TType.STRING, 11)
      oprot.writeString(self.topology_version.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.name is None:
      raise TProtocol.TProtocolException(message='Required field name is unset!')
    if self.status is None:
      raise TProtocol.TProtocolException(message='Required field status is unset!')
    if self.num_workers is None:
      raise TProtocol.TProtocolException(message='Required field num_workers is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.num_workers)
    value = (value * 31) ^ hash(self.component_executors)
    value = (value * 31) ^ hash(self.launch_time_secs)
    value = (value * 31) ^ hash(self.owner)
    value = (value * 31) ^ hash(self.topology_action_options)
    value = (value * 31) ^ hash(self.prev_status)
    value = (value * 31) ^ hash(self.principal)
    value = (value * 31) ^ hash(self.topology_version)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ClusterWorkerHeartbeat:
  """
  Attributes:
   - storm_id
   - executor_stats
   - time_secs
   - uptime_secs
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'storm_id', None, None, ), # 1
    (2, TType.MAP, 'executor_stats', (TType.STRUCT,(ExecutorInfo, ExecutorInfo.thrift_spec),TType.STRUCT,(ExecutorStats, ExecutorStats.thrift_spec)), None, ), # 2
    (3, TType.I32, 'time_secs', None, None, ), # 3
    (4, TType.I32, 'uptime_secs', None, None, ), # 4
  )

  def __init__(self, storm_id=None, executor_stats=None, time_secs=None, uptime_secs=None,):
    self.storm_id = storm_id
    self.executor_stats = executor_stats
    self.time_secs = time_secs
    self.uptime_secs = uptime_secs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.storm_id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.executor_stats = {}
          (_ktype652, _vtype653, _size651 ) = iprot.readMapBegin()
          for _i655 in xrange(_size651):
            _key656 = ExecutorInfo()
            _key656.read(iprot)
            _val657 = ExecutorStats()
            _val657.read(iprot)
            self.executor_stats[_key656] = _val657
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.time_secs = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.uptime_secs = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ClusterWorkerHeartbeat')
    if self.storm_id is not None:
      oprot.writeFieldBegin('storm_id', TType.STRING, 1)
      oprot.writeString(self.storm_id.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.executor_stats is not None:
      oprot.writeFieldBegin('executor_stats', TType.MAP, 2)
      oprot.writeMapBegin(TType.STRUCT, TType.STRUCT, len(self.executor_stats))
      for kiter658,viter659 in self.executor_stats.items():
        kiter658.write(oprot)
        viter659.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.time_secs is not None:
      oprot.writeFieldBegin('time_secs', TType.I32, 3)
      oprot.writeI32(self.time_secs)
      oprot.writeFieldEnd()
    if self.uptime_secs is not None:
      oprot.writeFieldBegin('uptime_secs', TType.I32, 4)
      oprot.writeI32(self.uptime_secs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.storm_id is None:
      raise TProtocol.TProtocolException(message='Required field storm_id is unset!')
    if self.executor_stats is None:
      raise TProtocol.TProtocolException(message='Required field executor_stats is unset!')
    if self.time_secs is None:
      raise TProtocol.TProtocolException(message='Required field time_secs is unset!')
    if self.uptime_secs is None:
      raise TProtocol.TProtocolException(message='Required field uptime_secs is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.storm_id)
    value = (value * 31) ^ hash(self.executor_stats)
    value = (value * 31) ^ hash(self.time_secs)
    value = (value * 31) ^ hash(self.uptime_secs)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ThriftSerializedObject:
  """
  Attributes:
   - name
   - bits
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.STRING, 'bits', None, None, ), # 2
  )

  def __init__(self, name=None, bits=None,):
    self.name = name
    self.bits = bits

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.bits = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ThriftSerializedObject')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.bits is not None:
      oprot.writeFieldBegin('bits', TType.STRING, 2)
      oprot.writeString(self.bits)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.name is None:
      raise TProtocol.TProtocolException(message='Required field name is unset!')
    if self.bits is None:
      raise TProtocol.TProtocolException(message='Required field bits is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.bits)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LocalStateData:
  """
  Attributes:
   - serialized_parts
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'serialized_parts', (TType.STRING,None,TType.STRUCT,(ThriftSerializedObject, ThriftSerializedObject.thrift_spec)), None, ), # 1
  )

  def __init__(self, serialized_parts=None,):
    self.serialized_parts = serialized_parts

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.serialized_parts = {}
          (_ktype661, _vtype662, _size660 ) = iprot.readMapBegin()
          for _i664 in xrange(_size660):
            _key665 = iprot.readString().decode('utf-8')
            _val666 = ThriftSerializedObject()
            _val666.read(iprot)
            self.serialized_parts[_key665] = _val666
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LocalStateData')
    if self.serialized_parts is not None:
      oprot.writeFieldBegin('serialized_parts', TType.MAP, 1)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.serialized_parts))
      for kiter667,viter668 in self.serialized_parts.items():
        oprot.writeString(kiter667.encode('utf-8'))
        viter668.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.serialized_parts is None:
      raise TProtocol.TProtocolException(message='Required field serialized_parts is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.serialized_parts)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LocalAssignment:
  """
  Attributes:
   - topology_id
   - executors
   - resources
   - total_node_shared
   - owner
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'topology_id', None, None, ), # 1
    (2, TType.LIST, 'executors', (TType.STRUCT,(ExecutorInfo, ExecutorInfo.thrift_spec)), None, ), # 2
    (3, TType.STRUCT, 'resources', (WorkerResources, WorkerResources.thrift_spec), None, ), # 3
    (4, TType.DOUBLE, 'total_node_shared', None, None, ), # 4
    (5, TType.STRING, 'owner', None, None, ), # 5
  )

  def __init__(self, topology_id=None, executors=None, resources=None, total_node_shared=None, owner=None,):
    self.topology_id = topology_id
    self.executors = executors
    self.resources = resources
    self.total_node_shared = total_node_shared
    self.owner = owner

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.topology_id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.executors = []
          (_etype672, _size669) = iprot.readListBegin()
          for _i673 in xrange(_size669):
            _elem674 = ExecutorInfo()
            _elem674.read(iprot)
            self.executors.append(_elem674)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.resources = WorkerResources()
          self.resources.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.total_node_shared = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.owner = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LocalAssignment')
    if self.topology_id is not None:
      oprot.writeFieldBegin('topology_id', TType.STRING, 1)
      oprot.writeString(self.topology_id.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.executors is not None:
      oprot.writeFieldBegin('executors', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.executors))
      for iter675 in self.executors:
        iter675.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.resources is not None:
      oprot.writeFieldBegin('resources', TType.STRUCT, 3)
      self.resources.write(oprot)
      oprot.writeFieldEnd()
    if self.total_node_shared is not None:
      oprot.writeFieldBegin('total_node_shared', TType.DOUBLE, 4)
      oprot.writeDouble(self.total_node_shared)
      oprot.writeFieldEnd()
    if self.owner is not None:
      oprot.writeFieldBegin('owner', TType.STRING, 5)
      oprot.writeString(self.owner.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.topology_id is None:
      raise TProtocol.TProtocolException(message='Required field topology_id is unset!')
    if self.executors is None:
      raise TProtocol.TProtocolException(message='Required field executors is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.topology_id)
    value = (value * 31) ^ hash(self.executors)
    value = (value * 31) ^ hash(self.resources)
    value = (value * 31) ^ hash(self.total_node_shared)
    value = (value * 31) ^ hash(self.owner)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LSSupervisorId:
  """
  Attributes:
   - supervisor_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'supervisor_id', None, None, ), # 1
  )

  def __init__(self, supervisor_id=None,):
    self.supervisor_id = supervisor_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.supervisor_id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LSSupervisorId')
    if self.supervisor_id is not None:
      oprot.writeFieldBegin('supervisor_id', TType.STRING, 1)
      oprot.writeString(self.supervisor_id.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.supervisor_id is None:
      raise TProtocol.TProtocolException(message='Required field supervisor_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.supervisor_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LSApprovedWorkers:
  """
  Attributes:
   - approved_workers
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'approved_workers', (TType.STRING,None,TType.I32,None), None, ), # 1
  )

  def __init__(self, approved_workers=None,):
    self.approved_workers = approved_workers

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.approved_workers = {}
          (_ktype677, _vtype678, _size676 ) = iprot.readMapBegin()
          for _i680 in xrange(_size676):
            _key681 = iprot.readString().decode('utf-8')
            _val682 = iprot.readI32()
            self.approved_workers[_key681] = _val682
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LSApprovedWorkers')
    if self.approved_workers is not None:
      oprot.writeFieldBegin('approved_workers', TType.MAP, 1)
      oprot.writeMapBegin(TType.STRING, TType.I32, len(self.approved_workers))
      for kiter683,viter684 in self.approved_workers.items():
        oprot.writeString(kiter683.encode('utf-8'))
        oprot.writeI32(viter684)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.approved_workers is None:
      raise TProtocol.TProtocolException(message='Required field approved_workers is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.approved_workers)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LSSupervisorAssignments:
  """
  Attributes:
   - assignments
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'assignments', (TType.I32,None,TType.STRUCT,(LocalAssignment, LocalAssignment.thrift_spec)), None, ), # 1
  )

  def __init__(self, assignments=None,):
    self.assignments = assignments

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.assignments = {}
          (_ktype686, _vtype687, _size685 ) = iprot.readMapBegin()
          for _i689 in xrange(_size685):
            _key690 = iprot.readI32()
            _val691 = LocalAssignment()
            _val691.read(iprot)
            self.assignments[_key690] = _val691
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LSSupervisorAssignments')
    if self.assignments is not None:
      oprot.writeFieldBegin('assignments', TType.MAP, 1)
      oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.assignments))
      for kiter692,viter693 in self.assignments.items():
        oprot.writeI32(kiter692)
        viter693.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.assignments is None:
      raise TProtocol.TProtocolException(message='Required field assignments is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.assignments)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LSWorkerHeartbeat:
  """
  Attributes:
   - time_secs
   - topology_id
   - executors
   - port
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'time_secs', None, None, ), # 1
    (2, TType.STRING, 'topology_id', None, None, ), # 2
    (3, TType.LIST, 'executors', (TType.STRUCT,(ExecutorInfo, ExecutorInfo.thrift_spec)), None, ), # 3
    (4, TType.I32, 'port', None, None, ), # 4
  )

  def __init__(self, time_secs=None, topology_id=None, executors=None, port=None,):
    self.time_secs = time_secs
    self.topology_id = topology_id
    self.executors = executors
    self.port = port

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.time_secs = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.topology_id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.executors = []
          (_etype697, _size694) = iprot.readListBegin()
          for _i698 in xrange(_size694):
            _elem699 = ExecutorInfo()
            _elem699.read(iprot)
            self.executors.append(_elem699)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.port = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LSWorkerHeartbeat')
    if self.time_secs is not None:
      oprot.writeFieldBegin('time_secs', TType.I32, 1)
      oprot.writeI32(self.time_secs)
      oprot.writeFieldEnd()
    if self.topology_id is not None:
      oprot.writeFieldBegin('topology_id', TType.STRING, 2)
      oprot.writeString(self.topology_id.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.executors is not None:
      oprot.writeFieldBegin('executors', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.executors))
      for iter700 in self.executors:
        iter700.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.port is not None:
      oprot.writeFieldBegin('port', TType.I32, 4)
      oprot.writeI32(self.port)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.time_secs is None:
      raise TProtocol.TProtocolException(message='Required field time_secs is unset!')
    if self.topology_id is None:
      raise TProtocol.TProtocolException(message='Required field topology_id is unset!')
    if self.executors is None:
      raise TProtocol.TProtocolException(message='Required field executors is unset!')
    if self.port is None:
      raise TProtocol.TProtocolException(message='Required field port is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.time_secs)
    value = (value * 31) ^ hash(self.topology_id)
    value = (value * 31) ^ hash(self.executors)
    value = (value * 31) ^ hash(self.port)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LSTopoHistory:
  """
  Attributes:
   - topology_id
   - time_stamp
   - users
   - groups
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'topology_id', None, None, ), # 1
    (2, TType.I64, 'time_stamp', None, None, ), # 2
    (3, TType.LIST, 'users', (TType.STRING,None), None, ), # 3
    (4, TType.LIST, 'groups', (TType.STRING,None), None, ), # 4
  )

  def __init__(self, topology_id=None, time_stamp=None, users=None, groups=None,):
    self.topology_id = topology_id
    self.time_stamp = time_stamp
    self.users = users
    self.groups = groups

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.topology_id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.time_stamp = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.users = []
          (_etype704, _size701) = iprot.readListBegin()
          for _i705 in xrange(_size701):
            _elem706 = iprot.readString().decode('utf-8')
            self.users.append(_elem706)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.groups = []
          (_etype710, _size707) = iprot.readListBegin()
          for _i711 in xrange(_size707):
            _elem712 = iprot.readString().decode('utf-8')
            self.groups.append(_elem712)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LSTopoHistory')
    if self.topology_id is not None:
      oprot.writeFieldBegin('topology_id', TType.STRING, 1)
      oprot.writeString(self.topology_id.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.time_stamp is not None:
      oprot.writeFieldBegin('time_stamp', TType.I64, 2)
      oprot.writeI64(self.time_stamp)
      oprot.writeFieldEnd()
    if self.users is not None:
      oprot.writeFieldBegin('users', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.users))
      for iter713 in self.users:
        oprot.writeString(iter713.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.groups is not None:
      oprot.writeFieldBegin('groups', TType.LIST, 4)
      oprot.writeListBegin(TType.STRING, len(self.groups))
      for iter714 in self.groups:
        oprot.writeString(iter714.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.topology_id is None:
      raise TProtocol.TProtocolException(message='Required field topology_id is unset!')
    if self.time_stamp is None:
      raise TProtocol.TProtocolException(message='Required field time_stamp is unset!')
    if self.users is None:
      raise TProtocol.TProtocolException(message='Required field users is unset!')
    if self.groups is None:
      raise TProtocol.TProtocolException(message='Required field groups is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.topology_id)
    value = (value * 31) ^ hash(self.time_stamp)
    value = (value * 31) ^ hash(self.users)
    value = (value * 31) ^ hash(self.groups)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LSTopoHistoryList:
  """
  Attributes:
   - topo_history
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'topo_history', (TType.STRUCT,(LSTopoHistory, LSTopoHistory.thrift_spec)), None, ), # 1
  )

  def __init__(self, topo_history=None,):
    self.topo_history = topo_history

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.topo_history = []
          (_etype718, _size715) = iprot.readListBegin()
          for _i719 in xrange(_size715):
            _elem720 = LSTopoHistory()
            _elem720.read(iprot)
            self.topo_history.append(_elem720)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LSTopoHistoryList')
    if self.topo_history is not None:
      oprot.writeFieldBegin('topo_history', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.topo_history))
      for iter721 in self.topo_history:
        iter721.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.topo_history is None:
      raise TProtocol.TProtocolException(message='Required field topo_history is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.topo_history)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ProfileRequest:
  """
  Attributes:
   - nodeInfo
   - action
   - time_stamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'nodeInfo', (NodeInfo, NodeInfo.thrift_spec), None, ), # 1
    (2, TType.I32, 'action', None, None, ), # 2
    (3, TType.I64, 'time_stamp', None, None, ), # 3
  )

  def __init__(self, nodeInfo=None, action=None, time_stamp=None,):
    self.nodeInfo = nodeInfo
    self.action = action
    self.time_stamp = time_stamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.nodeInfo = NodeInfo()
          self.nodeInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.action = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.time_stamp = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ProfileRequest')
    if self.nodeInfo is not None:
      oprot.writeFieldBegin('nodeInfo', TType.STRUCT, 1)
      self.nodeInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.action is not None:
      oprot.writeFieldBegin('action', TType.I32, 2)
      oprot.writeI32(self.action)
      oprot.writeFieldEnd()
    if self.time_stamp is not None:
      oprot.writeFieldBegin('time_stamp', TType.I64, 3)
      oprot.writeI64(self.time_stamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.nodeInfo is None:
      raise TProtocol.TProtocolException(message='Required field nodeInfo is unset!')
    if self.action is None:
      raise TProtocol.TProtocolException(message='Required field action is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.nodeInfo)
    value = (value * 31) ^ hash(self.action)
    value = (value * 31) ^ hash(self.time_stamp)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetInfoOptions:
  """
  Attributes:
   - num_err_choice
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'num_err_choice', None, None, ), # 1
  )

  def __init__(self, num_err_choice=None,):
    self.num_err_choice = num_err_choice

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.num_err_choice = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetInfoOptions')
    if self.num_err_choice is not None:
      oprot.writeFieldBegin('num_err_choice', TType.I32, 1)
      oprot.writeI32(self.num_err_choice)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.num_err_choice)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LogLevel:
  """
  Attributes:
   - action
   - target_log_level
   - reset_log_level_timeout_secs
   - reset_log_level_timeout_epoch
   - reset_log_level
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'action', None, None, ), # 1
    (2, TType.STRING, 'target_log_level', None, None, ), # 2
    (3, TType.I32, 'reset_log_level_timeout_secs', None, None, ), # 3
    (4, TType.I64, 'reset_log_level_timeout_epoch', None, None, ), # 4
    (5, TType.STRING, 'reset_log_level', None, None, ), # 5
  )

  def __init__(self, action=None, target_log_level=None, reset_log_level_timeout_secs=None, reset_log_level_timeout_epoch=None, reset_log_level=None,):
    self.action = action
    self.target_log_level = target_log_level
    self.reset_log_level_timeout_secs = reset_log_level_timeout_secs
    self.reset_log_level_timeout_epoch = reset_log_level_timeout_epoch
    self.reset_log_level = reset_log_level

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.action = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.target_log_level = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.reset_log_level_timeout_secs = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.reset_log_level_timeout_epoch = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.reset_log_level = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LogLevel')
    if self.action is not None:
      oprot.writeFieldBegin('action', TType.I32, 1)
      oprot.writeI32(self.action)
      oprot.writeFieldEnd()
    if self.target_log_level is not None:
      oprot.writeFieldBegin('target_log_level', TType.STRING, 2)
      oprot.writeString(self.target_log_level.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.reset_log_level_timeout_secs is not None:
      oprot.writeFieldBegin('reset_log_level_timeout_secs', TType.I32, 3)
      oprot.writeI32(self.reset_log_level_timeout_secs)
      oprot.writeFieldEnd()
    if self.reset_log_level_timeout_epoch is not None:
      oprot.writeFieldBegin('reset_log_level_timeout_epoch', TType.I64, 4)
      oprot.writeI64(self.reset_log_level_timeout_epoch)
      oprot.writeFieldEnd()
    if self.reset_log_level is not None:
      oprot.writeFieldBegin('reset_log_level', TType.STRING, 5)
      oprot.writeString(self.reset_log_level.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.action is None:
      raise TProtocol.TProtocolException(message='Required field action is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.action)
    value = (value * 31) ^ hash(self.target_log_level)
    value = (value * 31) ^ hash(self.reset_log_level_timeout_secs)
    value = (value * 31) ^ hash(self.reset_log_level_timeout_epoch)
    value = (value * 31) ^ hash(self.reset_log_level)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LogConfig:
  """
  Attributes:
   - named_logger_level
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'named_logger_level', (TType.STRING,None,TType.STRUCT,(LogLevel, LogLevel.thrift_spec)), None, ), # 1
  )

  def __init__(self, named_logger_level=None,):
    self.named_logger_level = named_logger_level

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.named_logger_level = {}
          (_ktype723, _vtype724, _size722 ) = iprot.readMapBegin()
          for _i726 in xrange(_size722):
            _key727 = iprot.readString().decode('utf-8')
            _val728 = LogLevel()
            _val728.read(iprot)
            self.named_logger_level[_key727] = _val728
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LogConfig')
    if self.named_logger_level is not None:
      oprot.writeFieldBegin('named_logger_level', TType.MAP, 1)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.named_logger_level))
      for kiter729,viter730 in self.named_logger_level.items():
        oprot.writeString(kiter729.encode('utf-8'))
        viter730.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.named_logger_level)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TopologyHistoryInfo:
  """
  Attributes:
   - topo_ids
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'topo_ids', (TType.STRING,None), None, ), # 1
  )

  def __init__(self, topo_ids=None,):
    self.topo_ids = topo_ids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.topo_ids = []
          (_etype734, _size731) = iprot.readListBegin()
          for _i735 in xrange(_size731):
            _elem736 = iprot.readString().decode('utf-8')
            self.topo_ids.append(_elem736)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TopologyHistoryInfo')
    if self.topo_ids is not None:
      oprot.writeFieldBegin('topo_ids', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.topo_ids))
      for iter737 in self.topo_ids:
        oprot.writeString(iter737.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.topo_ids)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class OwnerResourceSummary:
  """
  Attributes:
   - owner
   - total_topologies
   - total_executors
   - total_workers
   - memory_usage
   - cpu_usage
   - memory_guarantee
   - cpu_guarantee
   - memory_guarantee_remaining
   - cpu_guarantee_remaining
   - isolated_node_guarantee
   - total_tasks
   - requested_on_heap_memory
   - requested_off_heap_memory
   - requested_total_memory
   - requested_cpu
   - assigned_on_heap_memory
   - assigned_off_heap_memory
   - assigned_ras_total_memory
   - assigned_ras_cpu
   - requested_regular_on_heap_memory
   - requested_shared_on_heap_memory
   - requested_regular_off_heap_memory
   - requested_shared_off_heap_memory
   - assigned_regular_on_heap_memory
   - assigned_shared_on_heap_memory
   - assigned_regular_off_heap_memory
   - assigned_shared_off_heap_memory
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'owner', None, None, ), # 1
    (2, TType.I32, 'total_topologies', None, None, ), # 2
    (3, TType.I32, 'total_executors', None, None, ), # 3
    (4, TType.I32, 'total_workers', None, None, ), # 4
    (5, TType.I64, 'memory_usage', None, None, ), # 5
    (6, TType.I32, 'cpu_usage', None, None, ), # 6
    (7, TType.I64, 'memory_guarantee', None, None, ), # 7
    (8, TType.I32, 'cpu_guarantee', None, None, ), # 8
    (9, TType.I64, 'memory_guarantee_remaining', None, None, ), # 9
    (10, TType.I32, 'cpu_guarantee_remaining', None, None, ), # 10
    (11, TType.I32, 'isolated_node_guarantee', None, None, ), # 11
    (12, TType.I32, 'total_tasks', None, None, ), # 12
    (13, TType.I64, 'requested_on_heap_memory', None, None, ), # 13
    (14, TType.I64, 'requested_off_heap_memory', None, None, ), # 14
    (15, TType.I64, 'requested_total_memory', None, None, ), # 15
    (16, TType.I32, 'requested_cpu', None, None, ), # 16
    (17, TType.I64, 'assigned_on_heap_memory', None, None, ), # 17
    (18, TType.I64, 'assigned_off_heap_memory', None, None, ), # 18
    (19, TType.I64, 'assigned_ras_total_memory', None, None, ), # 19
    (20, TType.I32, 'assigned_ras_cpu', None, None, ), # 20
    (21, TType.DOUBLE, 'requested_regular_on_heap_memory', None, None, ), # 21
    (22, TType.DOUBLE, 'requested_shared_on_heap_memory', None, None, ), # 22
    (23, TType.DOUBLE, 'requested_regular_off_heap_memory', None, None, ), # 23
    (24, TType.DOUBLE, 'requested_shared_off_heap_memory', None, None, ), # 24
    (25, TType.DOUBLE, 'assigned_regular_on_heap_memory', None, None, ), # 25
    (26, TType.DOUBLE, 'assigned_shared_on_heap_memory', None, None, ), # 26
    (27, TType.DOUBLE, 'assigned_regular_off_heap_memory', None, None, ), # 27
    (28, TType.DOUBLE, 'assigned_shared_off_heap_memory', None, None, ), # 28
  )

  def __init__(self, owner=None, total_topologies=None, total_executors=None, total_workers=None, memory_usage=None, cpu_usage=None, memory_guarantee=None, cpu_guarantee=None, memory_guarantee_remaining=None, cpu_guarantee_remaining=None, isolated_node_guarantee=None, total_tasks=None, requested_on_heap_memory=None, requested_off_heap_memory=None, requested_total_memory=None, requested_cpu=None, assigned_on_heap_memory=None, assigned_off_heap_memory=None, assigned_ras_total_memory=None, assigned_ras_cpu=None, requested_regular_on_heap_memory=None, requested_shared_on_heap_memory=None, requested_regular_off_heap_memory=None, requested_shared_off_heap_memory=None, assigned_regular_on_heap_memory=None, assigned_shared_on_heap_memory=None, assigned_regular_off_heap_memory=None, assigned_shared_off_heap_memory=None,):
    self.owner = owner
    self.total_topologies = total_topologies
    self.total_executors = total_executors
    self.total_workers = total_workers
    self.memory_usage = memory_usage
    self.cpu_usage = cpu_usage
    self.memory_guarantee = memory_guarantee
    self.cpu_guarantee = cpu_guarantee
    self.memory_guarantee_remaining = memory_guarantee_remaining
    self.cpu_guarantee_remaining = cpu_guarantee_remaining
    self.isolated_node_guarantee = isolated_node_guarantee
    self.total_tasks = total_tasks
    self.requested_on_heap_memory = requested_on_heap_memory
    self.requested_off_heap_memory = requested_off_heap_memory
    self.requested_total_memory = requested_total_memory
    self.requested_cpu = requested_cpu
    self.assigned_on_heap_memory = assigned_on_heap_memory
    self.assigned_off_heap_memory = assigned_off_heap_memory
    self.assigned_ras_total_memory = assigned_ras_total_memory
    self.assigned_ras_cpu = assigned_ras_cpu
    self.requested_regular_on_heap_memory = requested_regular_on_heap_memory
    self.requested_shared_on_heap_memory = requested_shared_on_heap_memory
    self.requested_regular_off_heap_memory = requested_regular_off_heap_memory
    self.requested_shared_off_heap_memory = requested_shared_off_heap_memory
    self.assigned_regular_on_heap_memory = assigned_regular_on_heap_memory
    self.assigned_shared_on_heap_memory = assigned_shared_on_heap_memory
    self.assigned_regular_off_heap_memory = assigned_regular_off_heap_memory
    self.assigned_shared_off_heap_memory = assigned_shared_off_heap_memory

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.owner = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.total_topologies = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.total_executors = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.total_workers = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.memory_usage = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.cpu_usage = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.memory_guarantee = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.cpu_guarantee = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.memory_guarantee_remaining = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.cpu_guarantee_remaining = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.isolated_node_guarantee = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.total_tasks = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I64:
          self.requested_on_heap_memory = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I64:
          self.requested_off_heap_memory = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I64:
          self.requested_total_memory = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.requested_cpu = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I64:
          self.assigned_on_heap_memory = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I64:
          self.assigned_off_heap_memory = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I64:
          self.assigned_ras_total_memory = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.assigned_ras_cpu = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.DOUBLE:
          self.requested_regular_on_heap_memory = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.DOUBLE:
          self.requested_shared_on_heap_memory = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.DOUBLE:
          self.requested_regular_off_heap_memory = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.DOUBLE:
          self.requested_shared_off_heap_memory = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.DOUBLE:
          self.assigned_regular_on_heap_memory = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.DOUBLE:
          self.assigned_shared_on_heap_memory = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.DOUBLE:
          self.assigned_regular_off_heap_memory = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.DOUBLE:
          self.assigned_shared_off_heap_memory = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('OwnerResourceSummary')
    if self.owner is not None:
      oprot.writeFieldBegin('owner', TType.STRING, 1)
      oprot.writeString(self.owner.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.total_topologies is not None:
      oprot.writeFieldBegin('total_topologies', TType.I32, 2)
      oprot.writeI32(self.total_topologies)
      oprot.writeFieldEnd()
    if self.total_executors is not None:
      oprot.writeFieldBegin('total_executors', TType.I32, 3)
      oprot.writeI32(self.total_executors)
      oprot.writeFieldEnd()
    if self.total_workers is not None:
      oprot.writeFieldBegin('total_workers', TType.I32, 4)
      oprot.writeI32(self.total_workers)
      oprot.writeFieldEnd()
    if self.memory_usage is not None:
      oprot.writeFieldBegin('memory_usage', TType.I64, 5)
      oprot.writeI64(self.memory_usage)
      oprot.writeFieldEnd()
    if self.cpu_usage is not None:
      oprot.writeFieldBegin('cpu_usage', TType.I32, 6)
      oprot.writeI32(self.cpu_usage)
      oprot.writeFieldEnd()
    if self.memory_guarantee is not None:
      oprot.writeFieldBegin('memory_guarantee', TType.I64, 7)
      oprot.writeI64(self.memory_guarantee)
      oprot.writeFieldEnd()
    if self.cpu_guarantee is not None:
      oprot.writeFieldBegin('cpu_guarantee', TType.I32, 8)
      oprot.writeI32(self.cpu_guarantee)
      oprot.writeFieldEnd()
    if self.memory_guarantee_remaining is not None:
      oprot.writeFieldBegin('memory_guarantee_remaining', TType.I64, 9)
      oprot.writeI64(self.memory_guarantee_remaining)
      oprot.writeFieldEnd()
    if self.cpu_guarantee_remaining is not None:
      oprot.writeFieldBegin('cpu_guarantee_remaining', TType.I32, 10)
      oprot.writeI32(self.cpu_guarantee_remaining)
      oprot.writeFieldEnd()
    if self.isolated_node_guarantee is not None:
      oprot.writeFieldBegin('isolated_node_guarantee', TType.I32, 11)
      oprot.writeI32(self.isolated_node_guarantee)
      oprot.writeFieldEnd()
    if self.total_tasks is not None:
      oprot.writeFieldBegin('total_tasks', TType.I32, 12)
      oprot.writeI32(self.total_tasks)
      oprot.writeFieldEnd()
    if self.requested_on_heap_memory is not None:
      oprot.writeFieldBegin('requested_on_heap_memory', TType.I64, 13)
      oprot.writeI64(self.requested_on_heap_memory)
      oprot.writeFieldEnd()
    if self.requested_off_heap_memory is not None:
      oprot.writeFieldBegin('requested_off_heap_memory', TType.I64, 14)
      oprot.writeI64(self.requested_off_heap_memory)
      oprot.writeFieldEnd()
    if self.requested_total_memory is not None:
      oprot.writeFieldBegin('requested_total_memory', TType.I64, 15)
      oprot.writeI64(self.requested_total_memory)
      oprot.writeFieldEnd()
    if self.requested_cpu is not None:
      oprot.writeFieldBegin('requested_cpu', TType.I32, 16)
      oprot.writeI32(self.requested_cpu)
      oprot.writeFieldEnd()
    if self.assigned_on_heap_memory is not None:
      oprot.writeFieldBegin('assigned_on_heap_memory', TType.I64, 17)
      oprot.writeI64(self.assigned_on_heap_memory)
      oprot.writeFieldEnd()
    if self.assigned_off_heap_memory is not None:
      oprot.writeFieldBegin('assigned_off_heap_memory', TType.I64, 18)
      oprot.writeI64(self.assigned_off_heap_memory)
      oprot.writeFieldEnd()
    if self.assigned_ras_total_memory is not None:
      oprot.writeFieldBegin('assigned_ras_total_memory', TType.I64, 19)
      oprot.writeI64(self.assigned_ras_total_memory)
      oprot.writeFieldEnd()
    if self.assigned_ras_cpu is not None:
      oprot.writeFieldBegin('assigned_ras_cpu', TType.I32, 20)
      oprot.writeI32(self.assigned_ras_cpu)
      oprot.writeFieldEnd()
    if self.requested_regular_on_heap_memory is not None:
      oprot.writeFieldBegin('requested_regular_on_heap_memory', TType.DOUBLE, 21)
      oprot.writeDouble(self.requested_regular_on_heap_memory)
      oprot.writeFieldEnd()
    if self.requested_shared_on_heap_memory is not None:
      oprot.writeFieldBegin('requested_shared_on_heap_memory', TType.DOUBLE, 22)
      oprot.writeDouble(self.requested_shared_on_heap_memory)
      oprot.writeFieldEnd()
    if self.requested_regular_off_heap_memory is not None:
      oprot.writeFieldBegin('requested_regular_off_heap_memory', TType.DOUBLE, 23)
      oprot.writeDouble(self.requested_regular_off_heap_memory)
      oprot.writeFieldEnd()
    if self.requested_shared_off_heap_memory is not None:
      oprot.writeFieldBegin('requested_shared_off_heap_memory', TType.DOUBLE, 24)
      oprot.writeDouble(self.requested_shared_off_heap_memory)
      oprot.writeFieldEnd()
    if self.assigned_regular_on_heap_memory is not None:
      oprot.writeFieldBegin('assigned_regular_on_heap_memory', TType.DOUBLE, 25)
      oprot.writeDouble(self.assigned_regular_on_heap_memory)
      oprot.writeFieldEnd()
    if self.assigned_shared_on_heap_memory is not None:
      oprot.writeFieldBegin('assigned_shared_on_heap_memory', TType.DOUBLE, 26)
      oprot.writeDouble(self.assigned_shared_on_heap_memory)
      oprot.writeFieldEnd()
    if self.assigned_regular_off_heap_memory is not None:
      oprot.writeFieldBegin('assigned_regular_off_heap_memory', TType.DOUBLE, 27)
      oprot.writeDouble(self.assigned_regular_off_heap_memory)
      oprot.writeFieldEnd()
    if self.assigned_shared_off_heap_memory is not None:
      oprot.writeFieldBegin('assigned_shared_off_heap_memory', TType.DOUBLE, 28)
      oprot.writeDouble(self.assigned_shared_off_heap_memory)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.owner is None:
      raise TProtocol.TProtocolException(message='Required field owner is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.owner)
    value = (value * 31) ^ hash(self.total_topologies)
    value = (value * 31) ^ hash(self.total_executors)
    value = (value * 31) ^ hash(self.total_workers)
    value = (value * 31) ^ hash(self.memory_usage)
    value = (value * 31) ^ hash(self.cpu_usage)
    value = (value * 31) ^ hash(self.memory_guarantee)
    value = (value * 31) ^ hash(self.cpu_guarantee)
    value = (value * 31) ^ hash(self.memory_guarantee_remaining)
    value = (value * 31) ^ hash(self.cpu_guarantee_remaining)
    value = (value * 31) ^ hash(self.isolated_node_guarantee)
    value = (value * 31) ^ hash(self.total_tasks)
    value = (value * 31) ^ hash(self.requested_on_heap_memory)
    value = (value * 31) ^ hash(self.requested_off_heap_memory)
    value = (value * 31) ^ hash(self.requested_total_memory)
    value = (value * 31) ^ hash(self.requested_cpu)
    value = (value * 31) ^ hash(self.assigned_on_heap_memory)
    value = (value * 31) ^ hash(self.assigned_off_heap_memory)
    value = (value * 31) ^ hash(self.assigned_ras_total_memory)
    value = (value * 31) ^ hash(self.assigned_ras_cpu)
    value = (value * 31) ^ hash(self.requested_regular_on_heap_memory)
    value = (value * 31) ^ hash(self.requested_shared_on_heap_memory)
    value = (value * 31) ^ hash(self.requested_regular_off_heap_memory)
    value = (value * 31) ^ hash(self.requested_shared_off_heap_memory)
    value = (value * 31) ^ hash(self.assigned_regular_on_heap_memory)
    value = (value * 31) ^ hash(self.assigned_shared_on_heap_memory)
    value = (value * 31) ^ hash(self.assigned_regular_off_heap_memory)
    value = (value * 31) ^ hash(self.assigned_shared_off_heap_memory)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BlobReplication:
  """
  Attributes:
   - replication
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'replication', None, None, ), # 1
  )

  def __init__(self, replication=None,):
    self.replication = replication

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.replication = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BlobReplication')
    if self.replication is not None:
      oprot.writeFieldBegin('replication', TType.I32, 1)
      oprot.writeI32(self.replication)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.replication is None:
      raise TProtocol.TProtocolException(message='Required field replication is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.replication)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DRPCRequest:
  """
  Attributes:
   - func_args
   - request_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'func_args', None, None, ), # 1
    (2, TType.STRING, 'request_id', None, None, ), # 2
  )

  def __init__(self, func_args=None, request_id=None,):
    self.func_args = func_args
    self.request_id = request_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.func_args = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.request_id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DRPCRequest')
    if self.func_args is not None:
      oprot.writeFieldBegin('func_args', TType.STRING, 1)
      oprot.writeString(self.func_args.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.request_id is not None:
      oprot.writeFieldBegin('request_id', TType.STRING, 2)
      oprot.writeString(self.request_id.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.func_args is None:
      raise TProtocol.TProtocolException(message='Required field func_args is unset!')
    if self.request_id is None:
      raise TProtocol.TProtocolException(message='Required field request_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.func_args)
    value = (value * 31) ^ hash(self.request_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DRPCExecutionException(TException):
  """
  Attributes:
   - msg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'msg', None, None, ), # 1
  )

  def __init__(self, msg=None,):
    self.msg = msg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.msg = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DRPCExecutionException')
    if self.msg is not None:
      oprot.writeFieldBegin('msg', TType.STRING, 1)
      oprot.writeString(self.msg.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.msg is None:
      raise TProtocol.TProtocolException(message='Required field msg is unset!')
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.msg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HBPulse:
  """
  Attributes:
   - id
   - details
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRING, 'details', None, None, ), # 2
  )

  def __init__(self, id=None, details=None,):
    self.id = id
    self.details = details

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.details = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HBPulse')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.details is not None:
      oprot.writeFieldBegin('details', TType.STRING, 2)
      oprot.writeString(self.details)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.details)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HBRecords:
  """
  Attributes:
   - pulses
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'pulses', (TType.STRUCT,(HBPulse, HBPulse.thrift_spec)), None, ), # 1
  )

  def __init__(self, pulses=None,):
    self.pulses = pulses

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.pulses = []
          (_etype741, _size738) = iprot.readListBegin()
          for _i742 in xrange(_size738):
            _elem743 = HBPulse()
            _elem743.read(iprot)
            self.pulses.append(_elem743)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HBRecords')
    if self.pulses is not None:
      oprot.writeFieldBegin('pulses', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.pulses))
      for iter744 in self.pulses:
        iter744.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.pulses)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HBNodes:
  """
  Attributes:
   - pulseIds
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'pulseIds', (TType.STRING,None), None, ), # 1
  )

  def __init__(self, pulseIds=None,):
    self.pulseIds = pulseIds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.pulseIds = []
          (_etype748, _size745) = iprot.readListBegin()
          for _i749 in xrange(_size745):
            _elem750 = iprot.readString().decode('utf-8')
            self.pulseIds.append(_elem750)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HBNodes')
    if self.pulseIds is not None:
      oprot.writeFieldBegin('pulseIds', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.pulseIds))
      for iter751 in self.pulseIds:
        oprot.writeString(iter751.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.pulseIds)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HBMessageData:
  """
  Attributes:
   - path
   - pulse
   - boolval
   - records
   - nodes
   - message_blob
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'path', None, None, ), # 1
    (2, TType.STRUCT, 'pulse', (HBPulse, HBPulse.thrift_spec), None, ), # 2
    (3, TType.BOOL, 'boolval', None, None, ), # 3
    (4, TType.STRUCT, 'records', (HBRecords, HBRecords.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'nodes', (HBNodes, HBNodes.thrift_spec), None, ), # 5
    None, # 6
    (7, TType.STRING, 'message_blob', None, None, ), # 7
  )

  def __init__(self, path=None, pulse=None, boolval=None, records=None, nodes=None, message_blob=None,):
    self.path = path
    self.pulse = pulse
    self.boolval = boolval
    self.records = records
    self.nodes = nodes
    self.message_blob = message_blob

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.path = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.pulse = HBPulse()
          self.pulse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.boolval = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.records = HBRecords()
          self.records.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.nodes = HBNodes()
          self.nodes.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.message_blob = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HBMessageData')
    if self.path is not None:
      oprot.writeFieldBegin('path', TType.STRING, 1)
      oprot.writeString(self.path.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.pulse is not None:
      oprot.writeFieldBegin('pulse', TType.STRUCT, 2)
      self.pulse.write(oprot)
      oprot.writeFieldEnd()
    if self.boolval is not None:
      oprot.writeFieldBegin('boolval', TType.BOOL, 3)
      oprot.writeBool(self.boolval)
      oprot.writeFieldEnd()
    if self.records is not None:
      oprot.writeFieldBegin('records', TType.STRUCT, 4)
      self.records.write(oprot)
      oprot.writeFieldEnd()
    if self.nodes is not None:
      oprot.writeFieldBegin('nodes', TType.STRUCT, 5)
      self.nodes.write(oprot)
      oprot.writeFieldEnd()
    if self.message_blob is not None:
      oprot.writeFieldBegin('message_blob', TType.STRING, 7)
      oprot.writeString(self.message_blob)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.path)
    value = (value * 31) ^ hash(self.pulse)
    value = (value * 31) ^ hash(self.boolval)
    value = (value * 31) ^ hash(self.records)
    value = (value * 31) ^ hash(self.nodes)
    value = (value * 31) ^ hash(self.message_blob)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HBMessage:
  """
  Attributes:
   - type
   - data
   - message_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type', None, None, ), # 1
    (2, TType.STRUCT, 'data', (HBMessageData, HBMessageData.thrift_spec), None, ), # 2
    (3, TType.I32, 'message_id', None, -1, ), # 3
  )

  def __init__(self, type=None, data=None, message_id=thrift_spec[3][4],):
    self.type = type
    self.data = data
    self.message_id = message_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.data = HBMessageData()
          self.data.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.message_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HBMessage')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 1)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.data is not None:
      oprot.writeFieldBegin('data', TType.STRUCT, 2)
      self.data.write(oprot)
      oprot.writeFieldEnd()
    if self.message_id is not None:
      oprot.writeFieldBegin('message_id', TType.I32, 3)
      oprot.writeI32(self.message_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.data)
    value = (value * 31) ^ hash(self.message_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HBAuthorizationException(TException):
  """
  Attributes:
   - msg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'msg', None, None, ), # 1
  )

  def __init__(self, msg=None,):
    self.msg = msg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.msg = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HBAuthorizationException')
    if self.msg is not None:
      oprot.writeFieldBegin('msg', TType.STRING, 1)
      oprot.writeString(self.msg.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.msg is None:
      raise TProtocol.TProtocolException(message='Required field msg is unset!')
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.msg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HBExecutionException(TException):
  """
  Attributes:
   - msg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'msg', None, None, ), # 1
  )

  def __init__(self, msg=None,):
    self.msg = msg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.msg = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HBExecutionException')
    if self.msg is not None:
      oprot.writeFieldBegin('msg', TType.STRING, 1)
      oprot.writeString(self.msg.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.msg is None:
      raise TProtocol.TProtocolException(message='Required field msg is unset!')
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.msg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
