/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package backtype.storm.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class SupervisorPageInfo implements org.apache.thrift.TBase<SupervisorPageInfo, SupervisorPageInfo._Fields>, java.io.Serializable, Cloneable, Comparable<SupervisorPageInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SupervisorPageInfo");

  private static final org.apache.thrift.protocol.TField SUPERVISOR_SUMMARY_FIELD_DESC = new org.apache.thrift.protocol.TField("supervisor_summary", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField WORKER_SUMMARIES_FIELD_DESC = new org.apache.thrift.protocol.TField("worker_summaries", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SupervisorPageInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SupervisorPageInfoTupleSchemeFactory());
  }

  private SupervisorSummary supervisor_summary; // optional
  private List<WorkerSummary> worker_summaries; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SUPERVISOR_SUMMARY((short)1, "supervisor_summary"),
    WORKER_SUMMARIES((short)2, "worker_summaries");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUPERVISOR_SUMMARY
          return SUPERVISOR_SUMMARY;
        case 2: // WORKER_SUMMARIES
          return WORKER_SUMMARIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.SUPERVISOR_SUMMARY,_Fields.WORKER_SUMMARIES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUPERVISOR_SUMMARY, new org.apache.thrift.meta_data.FieldMetaData("supervisor_summary", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SupervisorSummary.class)));
    tmpMap.put(_Fields.WORKER_SUMMARIES, new org.apache.thrift.meta_data.FieldMetaData("worker_summaries", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "WorkerSummary"))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SupervisorPageInfo.class, metaDataMap);
  }

  public SupervisorPageInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SupervisorPageInfo(SupervisorPageInfo other) {
    if (other.is_set_supervisor_summary()) {
      this.supervisor_summary = new SupervisorSummary(other.supervisor_summary);
    }
    if (other.is_set_worker_summaries()) {
      List<WorkerSummary> __this__worker_summaries = new ArrayList<WorkerSummary>(other.worker_summaries.size());
      for (WorkerSummary other_element : other.worker_summaries) {
        __this__worker_summaries.add(other_element);
      }
      this.worker_summaries = __this__worker_summaries;
    }
  }

  public SupervisorPageInfo deepCopy() {
    return new SupervisorPageInfo(this);
  }

  @Override
  public void clear() {
    this.supervisor_summary = null;
    this.worker_summaries = null;
  }

  public SupervisorSummary get_supervisor_summary() {
    return this.supervisor_summary;
  }

  public void set_supervisor_summary(SupervisorSummary supervisor_summary) {
    this.supervisor_summary = supervisor_summary;
  }

  public void unset_supervisor_summary() {
    this.supervisor_summary = null;
  }

  /** Returns true if field supervisor_summary is set (has been assigned a value) and false otherwise */
  public boolean is_set_supervisor_summary() {
    return this.supervisor_summary != null;
  }

  public void set_supervisor_summary_isSet(boolean value) {
    if (!value) {
      this.supervisor_summary = null;
    }
  }

  public int get_worker_summaries_size() {
    return (this.worker_summaries == null) ? 0 : this.worker_summaries.size();
  }

  public java.util.Iterator<WorkerSummary> get_worker_summaries_iterator() {
    return (this.worker_summaries == null) ? null : this.worker_summaries.iterator();
  }

  public void add_to_worker_summaries(WorkerSummary elem) {
    if (this.worker_summaries == null) {
      this.worker_summaries = new ArrayList<WorkerSummary>();
    }
    this.worker_summaries.add(elem);
  }

  public List<WorkerSummary> get_worker_summaries() {
    return this.worker_summaries;
  }

  public void set_worker_summaries(List<WorkerSummary> worker_summaries) {
    this.worker_summaries = worker_summaries;
  }

  public void unset_worker_summaries() {
    this.worker_summaries = null;
  }

  /** Returns true if field worker_summaries is set (has been assigned a value) and false otherwise */
  public boolean is_set_worker_summaries() {
    return this.worker_summaries != null;
  }

  public void set_worker_summaries_isSet(boolean value) {
    if (!value) {
      this.worker_summaries = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUPERVISOR_SUMMARY:
      if (value == null) {
        unset_supervisor_summary();
      } else {
        set_supervisor_summary((SupervisorSummary)value);
      }
      break;

    case WORKER_SUMMARIES:
      if (value == null) {
        unset_worker_summaries();
      } else {
        set_worker_summaries((List<WorkerSummary>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUPERVISOR_SUMMARY:
      return get_supervisor_summary();

    case WORKER_SUMMARIES:
      return get_worker_summaries();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUPERVISOR_SUMMARY:
      return is_set_supervisor_summary();
    case WORKER_SUMMARIES:
      return is_set_worker_summaries();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SupervisorPageInfo)
      return this.equals((SupervisorPageInfo)that);
    return false;
  }

  public boolean equals(SupervisorPageInfo that) {
    if (that == null)
      return false;

    boolean this_present_supervisor_summary = true && this.is_set_supervisor_summary();
    boolean that_present_supervisor_summary = true && that.is_set_supervisor_summary();
    if (this_present_supervisor_summary || that_present_supervisor_summary) {
      if (!(this_present_supervisor_summary && that_present_supervisor_summary))
        return false;
      if (!this.supervisor_summary.equals(that.supervisor_summary))
        return false;
    }

    boolean this_present_worker_summaries = true && this.is_set_worker_summaries();
    boolean that_present_worker_summaries = true && that.is_set_worker_summaries();
    if (this_present_worker_summaries || that_present_worker_summaries) {
      if (!(this_present_worker_summaries && that_present_worker_summaries))
        return false;
      if (!this.worker_summaries.equals(that.worker_summaries))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_supervisor_summary = true && (is_set_supervisor_summary());
    list.add(present_supervisor_summary);
    if (present_supervisor_summary)
      list.add(supervisor_summary);

    boolean present_worker_summaries = true && (is_set_worker_summaries());
    list.add(present_worker_summaries);
    if (present_worker_summaries)
      list.add(worker_summaries);

    return list.hashCode();
  }

  @Override
  public int compareTo(SupervisorPageInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_supervisor_summary()).compareTo(other.is_set_supervisor_summary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_supervisor_summary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supervisor_summary, other.supervisor_summary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_worker_summaries()).compareTo(other.is_set_worker_summaries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_worker_summaries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.worker_summaries, other.worker_summaries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SupervisorPageInfo(");
    boolean first = true;

    if (is_set_supervisor_summary()) {
      sb.append("supervisor_summary:");
      if (this.supervisor_summary == null) {
        sb.append("null");
      } else {
        sb.append(this.supervisor_summary);
      }
      first = false;
    }
    if (is_set_worker_summaries()) {
      if (!first) sb.append(", ");
      sb.append("worker_summaries:");
      if (this.worker_summaries == null) {
        sb.append("null");
      } else {
        sb.append(this.worker_summaries);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (supervisor_summary != null) {
      supervisor_summary.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SupervisorPageInfoStandardSchemeFactory implements SchemeFactory {
    public SupervisorPageInfoStandardScheme getScheme() {
      return new SupervisorPageInfoStandardScheme();
    }
  }

  private static class SupervisorPageInfoStandardScheme extends StandardScheme<SupervisorPageInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SupervisorPageInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUPERVISOR_SUMMARY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.supervisor_summary = new SupervisorSummary();
              struct.supervisor_summary.read(iprot);
              struct.set_supervisor_summary_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WORKER_SUMMARIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list376 = iprot.readListBegin();
                struct.worker_summaries = new ArrayList<WorkerSummary>(_list376.size);
                WorkerSummary _elem377;
                for (int _i378 = 0; _i378 < _list376.size; ++_i378)
                {
                  _elem377 = new WorkerSummary();
                  _elem377.read(iprot);
                  struct.worker_summaries.add(_elem377);
                }
                iprot.readListEnd();
              }
              struct.set_worker_summaries_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SupervisorPageInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.supervisor_summary != null) {
        if (struct.is_set_supervisor_summary()) {
          oprot.writeFieldBegin(SUPERVISOR_SUMMARY_FIELD_DESC);
          struct.supervisor_summary.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.worker_summaries != null) {
        if (struct.is_set_worker_summaries()) {
          oprot.writeFieldBegin(WORKER_SUMMARIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.worker_summaries.size()));
            for (WorkerSummary _iter379 : struct.worker_summaries)
            {
              _iter379.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SupervisorPageInfoTupleSchemeFactory implements SchemeFactory {
    public SupervisorPageInfoTupleScheme getScheme() {
      return new SupervisorPageInfoTupleScheme();
    }
  }

  private static class SupervisorPageInfoTupleScheme extends TupleScheme<SupervisorPageInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SupervisorPageInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.is_set_supervisor_summary()) {
        optionals.set(0);
      }
      if (struct.is_set_worker_summaries()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.is_set_supervisor_summary()) {
        struct.supervisor_summary.write(oprot);
      }
      if (struct.is_set_worker_summaries()) {
        {
          oprot.writeI32(struct.worker_summaries.size());
          for (WorkerSummary _iter380 : struct.worker_summaries)
          {
            _iter380.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SupervisorPageInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.supervisor_summary = new SupervisorSummary();
        struct.supervisor_summary.read(iprot);
        struct.set_supervisor_summary_isSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list381 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.worker_summaries = new ArrayList<WorkerSummary>(_list381.size);
          WorkerSummary _elem382;
          for (int _i383 = 0; _i383 < _list381.size; ++_i383)
          {
            _elem382 = new WorkerSummary();
            _elem382.read(iprot);
            struct.worker_summaries.add(_elem382);
          }
        }
        struct.set_worker_summaries_isSet(true);
      }
    }
  }

}

